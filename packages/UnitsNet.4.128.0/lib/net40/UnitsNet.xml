<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UnitsNet</name>
    </assembly>
    <members>
        <member name="T:UnitsNet.AmbiguousUnitParseException">
            <summary>
                Unable to parse because more than one unit of the given quantity type had this exact unit abbreviation.
                Example: Length.Parse("1 pt") will throw <see cref="T:UnitsNet.AmbiguousUnitParseException" />, because both
                <see cref="F:UnitsNet.Units.LengthUnit.DtpPoint" /> and
                <see cref="F:UnitsNet.Units.LengthUnit.PrinterPoint" /> have "pt" as their abbreviation.
            </summary>
        </member>
        <member name="M:UnitsNet.AmbiguousUnitParseException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AmbiguousUnitParseException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:UnitsNet.BaseDimensions">
            <summary>
                Represents the base dimensions of a quantity.
            </summary>
        </member>
        <member name="M:UnitsNet.BaseDimensions.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.BaseDimensions.IsBaseQuantity">
            <summary>
            Checks if the dimensions represent a base quantity.
            </summary>
            <returns>True if the dimensions represent a base quantity, otherwise false.</returns>
        </member>
        <member name="M:UnitsNet.BaseDimensions.IsDerivedQuantity">
            <summary>
            Checks if the dimensions represent a derived quantity.
            </summary>
            <returns>True if the dimensions represent a derived quantity, otherwise false.</returns>
        </member>
        <member name="M:UnitsNet.BaseDimensions.IsDimensionless">
            <summary>
            Checks if this base dimensions object represents a dimensionless quantity.
            </summary>
            <returns>True if this object represents a dimensionless quantity, otherwise false.</returns>
        </member>
        <member name="M:UnitsNet.BaseDimensions.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.BaseDimensions.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.BaseDimensions.Multiply(UnitsNet.BaseDimensions)">
            <summary>
            Get resulting dimensions after multiplying two dimensions, by performing addition of each dimension.
            </summary>
            <param name="right">Other dimensions.</param>
            <returns>Resulting dimensions.</returns>
        </member>
        <member name="M:UnitsNet.BaseDimensions.Divide(UnitsNet.BaseDimensions)">
            <summary>
            Get resulting dimensions after dividing two dimensions, by performing subtraction of each dimension.
            </summary>
            <param name="right">Other dimensions.</param>
            <returns>Resulting dimensions.</returns>
        </member>
        <member name="M:UnitsNet.BaseDimensions.op_Equality(UnitsNet.BaseDimensions,UnitsNet.BaseDimensions)">
            <summary>
            Check if two dimensions are equal.
            </summary>
            <param name="left">Left.</param>
            <param name="right">Right.</param>
            <returns>True if equal.</returns>
        </member>
        <member name="M:UnitsNet.BaseDimensions.op_Inequality(UnitsNet.BaseDimensions,UnitsNet.BaseDimensions)">
            <summary>
            Check if two dimensions are unequal.
            </summary>
            <param name="left">Left.</param>
            <param name="right">Right.</param>
            <returns>True if not equal.</returns>
        </member>
        <member name="M:UnitsNet.BaseDimensions.op_Multiply(UnitsNet.BaseDimensions,UnitsNet.BaseDimensions)">
            <summary>
            Multiply two dimensions.
            </summary>
            <param name="left">Left.</param>
            <param name="right">Right.</param>
            <returns>Resulting dimensions.</returns>
        </member>
        <member name="M:UnitsNet.BaseDimensions.op_Division(UnitsNet.BaseDimensions,UnitsNet.BaseDimensions)">
            <summary>
            Divide two dimensions.
            </summary>
            <param name="left">Left.</param>
            <param name="right">Right.</param>
            <returns>Resulting dimensions.</returns>
        </member>
        <member name="M:UnitsNet.BaseDimensions.ToString">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.BaseDimensions.Length">
            <summary>
            Gets the length dimensions (L).
            </summary>
        </member>
        <member name="P:UnitsNet.BaseDimensions.Mass">
            <summary>
            Gets the mass dimensions (M).
            </summary>
        </member>
        <member name="P:UnitsNet.BaseDimensions.Time">
            <summary>
            Gets the time dimensions (T).
            </summary>
        </member>
        <member name="P:UnitsNet.BaseDimensions.Current">
            <summary>
            Gets the electric current dimensions (I).
            </summary>
        </member>
        <member name="P:UnitsNet.BaseDimensions.Temperature">
            <summary>
            Gets the temperature dimensions (Θ).
            </summary>
        </member>
        <member name="P:UnitsNet.BaseDimensions.Amount">
            <summary>
            Gets the amount of substance dimensions (N).
            </summary>
        </member>
        <member name="P:UnitsNet.BaseDimensions.LuminousIntensity">
            <summary>
            Gets the luminous intensity dimensions (J).
            </summary>
        </member>
        <member name="P:UnitsNet.BaseDimensions.Dimensionless">
            <summary>
            Represents a dimensionless (unitless) quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.BaseUnits">
            <inheritdoc />
            <summary>
                Represents the base units for a quantity. All quantities, both base and derived, can be
                represented by a combination of these seven base units.
            </summary>
        </member>
        <member name="P:UnitsNet.BaseUnits.Undefined">
            <summary>
            Represents BaseUnits that have not been defined.
            </summary>
        </member>
        <member name="M:UnitsNet.BaseUnits.#ctor(UnitsNet.Units.LengthUnit,UnitsNet.Units.MassUnit,UnitsNet.Units.DurationUnit,UnitsNet.Units.ElectricCurrentUnit,UnitsNet.Units.TemperatureUnit,UnitsNet.Units.AmountOfSubstanceUnit,UnitsNet.Units.LuminousIntensityUnit)">
            <summary>
            Creates an instance of if the base units class that represents the base units for a quantity.
            All quantities, both base and derived, can be represented by a combination of these seven base units.
            </summary>
            <param name="length">The length unit (L).</param>
            <param name="mass">The mass unit (M).</param>
            <param name="time">The time unit (T).</param>
            <param name="current">The electric current unit (I).</param>
            <param name="temperature">The temperature unit (Θ).</param>
            <param name="amount">The amount of substance unit (N).</param>
            <param name="luminousIntensity">The luminous intensity unit (J).</param>
        </member>
        <member name="M:UnitsNet.BaseUnits.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.BaseUnits.Equals(UnitsNet.BaseUnits)">
            <summary>
            Checks if all of the base units are equal to another instance's.
            </summary>
            <param name="other">The other instance to check if equal to.</param>
            <returns>True if equal, otherwise false.</returns>
        </member>
        <member name="M:UnitsNet.BaseUnits.IsSubsetOf(UnitsNet.BaseUnits)">
            <summary>
            Checks if the base units are a subset of another. Undefined base units are ignored.
            If all base united are undefined (equal to <see cref="P:UnitsNet.BaseUnits.Undefined"/>),
            IsSubsetOf will return true only if other is also equal to <see cref="P:UnitsNet.BaseUnits.Undefined"/>.
            </summary>
            <param name="other">The other <see cref="T:UnitsNet.BaseUnits"/> to compare to.</param>
            <returns>True if the base units are a subset of other, otherwise false.</returns>
        </member>
        <member name="M:UnitsNet.BaseUnits.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.BaseUnits.op_Equality(UnitsNet.BaseUnits,UnitsNet.BaseUnits)">
            <summary>
            Checks if this instance is equal to another.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>True if equal, otherwise false.</returns>
            <seealso cref="M:UnitsNet.BaseUnits.Equals(UnitsNet.BaseUnits)"/>
        </member>
        <member name="M:UnitsNet.BaseUnits.op_Inequality(UnitsNet.BaseUnits,UnitsNet.BaseUnits)">
            <summary>
            Checks if this instance is not equal to another.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>True if not equal, otherwise false.</returns>
            <seealso cref="M:UnitsNet.BaseUnits.Equals(UnitsNet.BaseUnits)"/>
        </member>
        <member name="M:UnitsNet.BaseUnits.ToString">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.BaseUnits.Length">
            <summary>
            Gets the length unit (L).
            </summary>
        </member>
        <member name="P:UnitsNet.BaseUnits.Mass">
            <summary>
            Gets the mass unit (M).
            </summary>
        </member>
        <member name="P:UnitsNet.BaseUnits.Time">
            <summary>
            Gets the time unit (T).
            </summary>
        </member>
        <member name="P:UnitsNet.BaseUnits.Current">
            <summary>
            Gets the electric current unit (I).
            </summary>
        </member>
        <member name="P:UnitsNet.BaseUnits.Temperature">
            <summary>
            Gets the temperature unit (Θ).
            </summary>
        </member>
        <member name="P:UnitsNet.BaseUnits.Amount">
            <summary>
            Gets the amount of substance unit (N).
            </summary>
        </member>
        <member name="P:UnitsNet.BaseUnits.LuminousIntensity">
            <summary>
            Gets the luminous intensity unit (J).
            </summary>
        </member>
        <member name="P:UnitsNet.BaseUnits.IsFullyDefined">
            <summary>
            Gets whether or not all of the base units are defined.
            </summary>
        </member>
        <member name="T:UnitsNet.Comparison">
            <summary>
                Helper methods to perform relative and absolute comparison.
            </summary>
        </member>
        <member name="M:UnitsNet.Comparison.Equals(System.Double,System.Double,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                    Checks if two values are equal with a given relative or absolute tolerance.
                </para>
                <para>
                    Relative tolerance is defined as the maximum allowable absolute difference between
                    <paramref name="referenceValue" /> and
                    <paramref name="otherValue" /> as a percentage of <paramref name="referenceValue" />. A relative tolerance of
                    0.01 means the
                    absolute difference of <paramref name="referenceValue" /> and <paramref name="otherValue" /> must be within +/-
                    1%.
                    <example>
                        In this example, the two values will be equal if the value of b is within +/- 1% of a.
                        <code>
                Equals(a, b, 0.01, ComparisonType.Relative);
                </code>
                    </example>
                </para>
                <para>
                    Absolute tolerance is defined as the maximum allowable absolute difference between
                    <paramref name="referenceValue" /> and
                    <paramref name="otherValue" /> as a fixed number.
                    <example>
                        In this example, the two values will be equal if abs(<paramref name="referenceValue" /> -
                        <paramref name="otherValue" />) &lt;= 0.01
                        <code>
                Equals(a, b, 0.01, ComparisonType.Absolute);
                </code>
                    </example>
                </para>
            </summary>
            <param name="referenceValue">
                The reference value. If using relative tolerance, it is the value which the relative
                tolerance will be calculated against.
            </param>
            <param name="otherValue">The value to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">Whether the tolerance is absolute or relative.</param>
            <returns></returns>
        </member>
        <member name="M:UnitsNet.Comparison.EqualsRelative(System.Double,System.Double,System.Double)">
            <summary>
                Checks if two values are equal with a given relative tolerance.
                <para>
                    Relative tolerance is defined as the maximum allowable absolute difference between
                    <paramref name="referenceValue" /> and
                    <paramref name="otherValue" /> as a percentage of <paramref name="referenceValue" />. A relative tolerance of
                    0.01 means the
                    absolute difference of <paramref name="referenceValue" /> and <paramref name="otherValue" /> must be within +/-
                    1%.
                    <example>
                        In this example, the two values will be equal if the value of b is within +/- 1% of a.
                        <code>
                EqualsRelative(a, b, 0.01);
                </code>
                    </example>
                </para>
            </summary>
            <param name="referenceValue">The reference value which the tolerance will be calculated against.</param>
            <param name="otherValue">The value to compare to.</param>
            <param name="tolerance">The relative tolerance. Must be greater than or equal to 0.</param>
            <returns>True if the two values are equal within the given relative tolerance, otherwise false.</returns>
        </member>
        <member name="M:UnitsNet.Comparison.EqualsAbsolute(System.Double,System.Double,System.Double)">
            <summary>
                Checks if two values are equal with a given absolute tolerance.
                <para>
                    Absolute tolerance is defined as the maximum allowable absolute difference between <paramref name="value1" />
                    and
                    <paramref name="value2" /> as a fixed number.
                    <example>
                        In this example, the two values will be equal if abs(<paramref name="value1" /> -
                        <paramref name="value2" />) &lt;= 0.01
                        <code>
                Equals(a, b, 0.01, ComparisonType.Absolute);
                </code>
                    </example>
                </para>
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="tolerance">The absolute tolerance. Must be greater than or equal to 0.</param>
            <returns>True if the two values are equal within the given absolute tolerance, otherwise false.</returns>
        </member>
        <member name="T:UnitsNet.ComparisonType">
            <summary>
            Specifies if the comparison between numbers is absolute or relative.
            </summary>
        </member>
        <member name="F:UnitsNet.ComparisonType.Relative">
            <summary>
            Error margin in relative size to a reference value.
            </summary>
        </member>
        <member name="F:UnitsNet.ComparisonType.Absolute">
            <summary>
            Error margin as absolute size.
            </summary>
        </member>
        <member name="T:UnitsNet.CompiledLambdas">
            <summary>
            Compiled lambda expressions that can be invoked with generic run-time parameters. This is used for performance as
            it is far faster than reflection based alternatives.
            </summary>
        </member>
        <member name="M:UnitsNet.CompiledLambdas.Multiply``1(``0,``0)">
            <summary>
            Multiplies the given values.
            </summary>
            <typeparam name="T">The type of the operation (left hand side, right hand side, and result).</typeparam>
            <param name="left">The left hand side parameter.</param>
            <param name="right">The right hand side parameter.</param>
            <returns>The multiplied result.</returns>
        </member>
        <member name="M:UnitsNet.CompiledLambdas.Multiply``3(``0,``1)">
            <summary>
            Multiplies the given values.
            </summary>
            <typeparam name="TLeft">The type of the left hand side.</typeparam>
            <typeparam name="TRight">The type of the right hand side.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="left">The left hand side parameter.</param>
            <param name="right">The right hand side parameter.</param>
            <returns>The multiplied result.</returns>
        </member>
        <member name="M:UnitsNet.CompiledLambdas.Divide``1(``0,``0)">
            <summary>
            Divides the given values.
            </summary>
            <typeparam name="T">The type of the operation (left hand side, right hand side, and result).</typeparam>
            <param name="left">The left hand side parameter.</param>
            <param name="right">The right hand side parameter.</param>
            <returns>The divided result.</returns>
        </member>
        <member name="M:UnitsNet.CompiledLambdas.Divide``3(``0,``1)">
            <summary>
            Divides the given values.
            </summary>
            <typeparam name="TLeft">The type of the left hand side.</typeparam>
            <typeparam name="TRight">The type of the right hand side.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="left">The left hand side parameter.</param>
            <param name="right">The right hand side parameter.</param>
            <returns>The divided result.</returns>
        </member>
        <member name="M:UnitsNet.CompiledLambdas.Add``1(``0,``0)">
            <summary>
            Adds the given values.
            </summary>
            <typeparam name="T">The type of the operation (left hand side, right hand side, and result).</typeparam>
            <param name="left">The left hand side parameter.</param>
            <param name="right">The right hand side parameter.</param>
            <returns>The added result.</returns>
        </member>
        <member name="M:UnitsNet.CompiledLambdas.Add``3(``0,``1)">
            <summary>
            Adds the given values.
            </summary>
            <typeparam name="TLeft">The type of the left hand side.</typeparam>
            <typeparam name="TRight">The type of the right hand side.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="left">The left hand side parameter.</param>
            <param name="right">The right hand side parameter.</param>
            <returns>The added result.</returns>
        </member>
        <member name="M:UnitsNet.CompiledLambdas.Subtract``1(``0,``0)">
            <summary>
            Subtracts the given values.
            </summary>
            <typeparam name="T">The type of the operation (left hand side, right hand side, and result).</typeparam>
            <param name="left">The left hand side parameter.</param>
            <param name="right">The right hand side parameter.</param>
            <returns>The subtracted result.</returns>
        </member>
        <member name="M:UnitsNet.CompiledLambdas.Subtract``3(``0,``1)">
            <summary>
            Subtracts the given values.
            </summary>
            <typeparam name="TLeft">The type of the left hand side.</typeparam>
            <typeparam name="TRight">The type of the right hand side.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="left">The left hand side parameter.</param>
            <param name="right">The right hand side parameter.</param>
            <returns>The subtracted result.</returns>
        </member>
        <member name="M:UnitsNet.CompiledLambdas.Modulo``1(``0,``0)">
            <summary>
            Gets the modulus of the given values.
            </summary>
            <typeparam name="T">The type of the operation (left hand side, right hand side, and result).</typeparam>
            <param name="left">The left hand side parameter.</param>
            <param name="right">The right hand side parameter.</param>
            <returns>The modulus.</returns>
        </member>
        <member name="M:UnitsNet.CompiledLambdas.Modulo``3(``0,``1)">
            <summary>
            Gets the modulus of the given values.
            </summary>
            <typeparam name="TLeft">The type of the left hand side.</typeparam>
            <typeparam name="TRight">The type of the right hand side.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="left">The left hand side parameter.</param>
            <param name="right">The right hand side parameter.</param>
            <returns>The modulus.</returns>
        </member>
        <member name="M:UnitsNet.CompiledLambdas.Equal``1(``0,``0)">
            <summary>
            Checks if the left and right hand side are equal.
            </summary>
            <typeparam name="T">The type of both the left and right hand side.</typeparam>
            <param name="left">The left hand side parameter.</param>
            <param name="right">The right hand side parameter.</param>
            <returns>True if equal, otherwise false.</returns>
        </member>
        <member name="M:UnitsNet.CompiledLambdas.Equal``2(``0,``1)">
            <summary>
            Checks if the left and right hand side are equal.
            </summary>
            <typeparam name="TLeft">The type of the left hand side.</typeparam>
            <typeparam name="TRight">The type of the right hand side.</typeparam>
            <param name="left">The left hand side parameter.</param>
            <param name="right">The right hand side parameter.</param>
            <returns>True if equal, otherwise false.</returns>
        </member>
        <member name="M:UnitsNet.CompiledLambdas.NotEqual``1(``0,``0)">
            <summary>
            Checks if the left and right hand side are not equal.
            </summary>
            <typeparam name="T">The type of both the left and right hand side.</typeparam>
            <param name="left">The left hand side parameter.</param>
            <param name="right">The right hand side parameter.</param>
            <returns>True if not equal, otherwise false.</returns>
        </member>
        <member name="M:UnitsNet.CompiledLambdas.NotEqual``2(``0,``1)">
            <summary>
            Checks if the left and right hand side are not equal.
            </summary>
            <typeparam name="TLeft">The type of the left hand side.</typeparam>
            <typeparam name="TRight">The type of the right hand side.</typeparam>
            <param name="left">The left hand side parameter.</param>
            <param name="right">The right hand side parameter.</param>
            <returns>True if not equal, otherwise false.</returns>
        </member>
        <member name="M:UnitsNet.CompiledLambdas.LessThan``2(``0,``1)">
            <summary>
            Checks if the left hand side is less than the right hand side.
            </summary>
            <typeparam name="TLeft">The type of the left hand side.</typeparam>
            <typeparam name="TRight">The type of the right hand side.</typeparam>
            <param name="left">The left hand side parameter.</param>
            <param name="right">The right hand side parameter.</param>
            <returns>True if the left hand side is less than the right hand side, otherwise false.</returns>
        </member>
        <member name="M:UnitsNet.CompiledLambdas.LessThanOrEqual``2(``0,``1)">
            <summary>
            Checks if the left hand side is less than or equal to the right hand side.
            </summary>
            <typeparam name="TLeft">The type of the left hand side.</typeparam>
            <typeparam name="TRight">The type of the right hand side.</typeparam>
            <param name="left">The left hand side parameter.</param>
            <param name="right">The right hand side parameter.</param>
            <returns>True if the left hand side is less than or equal to the right hand side, otherwise false.</returns>
        </member>
        <member name="M:UnitsNet.CompiledLambdas.GreaterThan``2(``0,``1)">
            <summary>
            Checks if the left hand side is greater than the right hand side.
            </summary>
            <typeparam name="TLeft">The type of the left hand side.</typeparam>
            <typeparam name="TRight">The type of the right hand side.</typeparam>
            <param name="left">The left hand side parameter.</param>
            <param name="right">The right hand side parameter.</param>
            <returns>True if the left hand side is greater than the right hand side, otherwise false.</returns>
        </member>
        <member name="M:UnitsNet.CompiledLambdas.GreaterThanOrEqual``2(``0,``1)">
            <summary>
            Checks if the left hand side is greater than or equal to the right hand side.
            </summary>
            <typeparam name="TLeft">The type of the left hand side.</typeparam>
            <typeparam name="TRight">The type of the right hand side.</typeparam>
            <param name="left">The left hand side parameter.</param>
            <param name="right">The right hand side parameter.</param>
            <returns>True if the left hand side is greater than or equal to the right hand side, otherwise false.</returns>
        </member>
        <member name="M:UnitsNet.CompiledLambdas.CreateBinaryFunction``3(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.BinaryExpression})">
            <summary>
            Creates a compiled lambda for the given <see cref="T:System.Func`3"/>.
            </summary>
            <typeparam name="TLeft">The type of the left hand side of the binary operation.</typeparam>
            <typeparam name="TRight">The type of the right hand side of the binary operation.</typeparam>
            <typeparam name="TResult">The type of the result of the binary operation.</typeparam>
            <param name="expressionCreationFunction">The function that creates a binary expression to compile.</param>
            <returns>The compiled binary expression.</returns>
        </member>
        <member name="T:UnitsNet.GlobalConfiguration">
            <summary>
                Global configuration for culture, used as default culture in methods like <see cref="M:UnitsNet.Length.ToString" /> and
                <see cref="M:UnitsNet.Length.Parse(System.String)" />.
            </summary>
        </member>
        <member name="P:UnitsNet.GlobalConfiguration.DefaultCulture">
            <summary>
                Wrapper for <see cref="P:System.Threading.Thread.CurrentUICulture"/>.
            </summary>
        </member>
        <member name="T:UnitsNet.Acceleration">
            <inheritdoc />
            <summary>
                Acceleration, in physics, is the rate at which the velocity of an object changes over time. An object's acceleration is the net result of any and all forces acting on the object, as described by Newton's Second Law. The SI unit for acceleration is the Meter per second squared (m/s²). Accelerations are vector quantities (they have magnitude and direction) and add according to the parallelogram law. As a vector, the calculated net force is equal to the product of the object's mass (a scalar quantity) and the acceleration.
            </summary>
        </member>
        <member name="M:UnitsNet.Acceleration.op_Multiply(UnitsNet.Acceleration,UnitsNet.Density)">
            <summary>
            Multiply <see cref="T:UnitsNet.Acceleration"/> and <see cref="T:UnitsNet.Density"/> to get <see cref="T:UnitsNet.SpecificWeight"/>.
            </summary>
        </member>
        <member name="M:UnitsNet.Acceleration.op_Multiply(UnitsNet.Acceleration,UnitsNet.Duration)">
            <summary>
            Multiply <see cref="T:UnitsNet.Acceleration"/> and <see cref="T:UnitsNet.Duration"/> to get <see cref="T:UnitsNet.Speed"/>.
            </summary>
        </member>
        <member name="F:UnitsNet.Acceleration._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Acceleration._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Acceleration.#ctor(System.Double,UnitsNet.Units.AccelerationUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Acceleration.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Acceleration" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Acceleration.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Acceleration.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.BaseUnit">
            <summary>
                The base unit of Acceleration, which is MeterPerSecondSquared. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.MaxValue">
            <summary>
            Represents the largest possible value of Acceleration
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.MinValue">
            <summary>
            Represents the smallest possible value of Acceleration
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Acceleration.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.Units">
            <summary>
                All units of measurement for the Acceleration quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit MeterPerSecondSquared.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Acceleration.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Acceleration.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Acceleration.Type">
            <summary>
                The <see cref="P:UnitsNet.Acceleration.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Acceleration.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.CentimetersPerSecondSquared">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AccelerationUnit.CentimeterPerSecondSquared"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.DecimetersPerSecondSquared">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AccelerationUnit.DecimeterPerSecondSquared"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.FeetPerSecondSquared">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AccelerationUnit.FootPerSecondSquared"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.InchesPerSecondSquared">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AccelerationUnit.InchPerSecondSquared"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.KilometersPerSecondSquared">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AccelerationUnit.KilometerPerSecondSquared"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.KnotsPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AccelerationUnit.KnotPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.KnotsPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AccelerationUnit.KnotPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.KnotsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AccelerationUnit.KnotPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.MetersPerSecondSquared">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AccelerationUnit.MeterPerSecondSquared"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.MicrometersPerSecondSquared">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AccelerationUnit.MicrometerPerSecondSquared"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.MillimetersPerSecondSquared">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AccelerationUnit.MillimeterPerSecondSquared"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.MillistandardGravity">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AccelerationUnit.MillistandardGravity"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.NanometersPerSecondSquared">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AccelerationUnit.NanometerPerSecondSquared"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.StandardGravity">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AccelerationUnit.StandardGravity"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Acceleration.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Acceleration.GetAbbreviation(UnitsNet.Units.AccelerationUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Acceleration.GetAbbreviation(UnitsNet.Units.AccelerationUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Acceleration.FromCentimetersPerSecondSquared(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Acceleration"/> from <see cref="F:UnitsNet.Units.AccelerationUnit.CentimeterPerSecondSquared"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.FromDecimetersPerSecondSquared(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Acceleration"/> from <see cref="F:UnitsNet.Units.AccelerationUnit.DecimeterPerSecondSquared"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.FromFeetPerSecondSquared(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Acceleration"/> from <see cref="F:UnitsNet.Units.AccelerationUnit.FootPerSecondSquared"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.FromInchesPerSecondSquared(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Acceleration"/> from <see cref="F:UnitsNet.Units.AccelerationUnit.InchPerSecondSquared"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.FromKilometersPerSecondSquared(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Acceleration"/> from <see cref="F:UnitsNet.Units.AccelerationUnit.KilometerPerSecondSquared"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.FromKnotsPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Acceleration"/> from <see cref="F:UnitsNet.Units.AccelerationUnit.KnotPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.FromKnotsPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Acceleration"/> from <see cref="F:UnitsNet.Units.AccelerationUnit.KnotPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.FromKnotsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Acceleration"/> from <see cref="F:UnitsNet.Units.AccelerationUnit.KnotPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.FromMetersPerSecondSquared(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Acceleration"/> from <see cref="F:UnitsNet.Units.AccelerationUnit.MeterPerSecondSquared"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.FromMicrometersPerSecondSquared(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Acceleration"/> from <see cref="F:UnitsNet.Units.AccelerationUnit.MicrometerPerSecondSquared"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.FromMillimetersPerSecondSquared(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Acceleration"/> from <see cref="F:UnitsNet.Units.AccelerationUnit.MillimeterPerSecondSquared"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.FromMillistandardGravity(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Acceleration"/> from <see cref="F:UnitsNet.Units.AccelerationUnit.MillistandardGravity"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.FromNanometersPerSecondSquared(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Acceleration"/> from <see cref="F:UnitsNet.Units.AccelerationUnit.NanometerPerSecondSquared"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.FromStandardGravity(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Acceleration"/> from <see cref="F:UnitsNet.Units.AccelerationUnit.StandardGravity"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.From(UnitsNet.QuantityValue,UnitsNet.Units.AccelerationUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.AccelerationUnit" /> to <see cref="T:UnitsNet.Acceleration" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Acceleration unit value.</returns>
        </member>
        <member name="M:UnitsNet.Acceleration.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Acceleration.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Acceleration.TryParse(System.String,UnitsNet.Acceleration@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Acceleration.TryParse(System.String,System.IFormatProvider,UnitsNet.Acceleration@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Acceleration.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.TryParseUnit(System.String,UnitsNet.Units.AccelerationUnit@)">
            <inheritdoc cref="M:UnitsNet.Acceleration.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.AccelerationUnit@)"/>
        </member>
        <member name="M:UnitsNet.Acceleration.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.AccelerationUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Acceleration.op_UnaryNegation(UnitsNet.Acceleration)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Acceleration.op_Addition(UnitsNet.Acceleration,UnitsNet.Acceleration)">
            <summary>Get <see cref="T:UnitsNet.Acceleration"/> from adding two <see cref="T:UnitsNet.Acceleration"/>.</summary>
        </member>
        <member name="M:UnitsNet.Acceleration.op_Subtraction(UnitsNet.Acceleration,UnitsNet.Acceleration)">
            <summary>Get <see cref="T:UnitsNet.Acceleration"/> from subtracting two <see cref="T:UnitsNet.Acceleration"/>.</summary>
        </member>
        <member name="M:UnitsNet.Acceleration.op_Multiply(System.Double,UnitsNet.Acceleration)">
            <summary>Get <see cref="T:UnitsNet.Acceleration"/> from multiplying value and <see cref="T:UnitsNet.Acceleration"/>.</summary>
        </member>
        <member name="M:UnitsNet.Acceleration.op_Multiply(UnitsNet.Acceleration,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Acceleration"/> from multiplying value and <see cref="T:UnitsNet.Acceleration"/>.</summary>
        </member>
        <member name="M:UnitsNet.Acceleration.op_Division(UnitsNet.Acceleration,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Acceleration"/> from dividing <see cref="T:UnitsNet.Acceleration"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Acceleration.op_Division(UnitsNet.Acceleration,UnitsNet.Acceleration)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Acceleration"/> by <see cref="T:UnitsNet.Acceleration"/>.</summary>
        </member>
        <member name="M:UnitsNet.Acceleration.op_LessThanOrEqual(UnitsNet.Acceleration,UnitsNet.Acceleration)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Acceleration.op_GreaterThanOrEqual(UnitsNet.Acceleration,UnitsNet.Acceleration)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Acceleration.op_LessThan(UnitsNet.Acceleration,UnitsNet.Acceleration)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Acceleration.op_GreaterThan(UnitsNet.Acceleration,UnitsNet.Acceleration)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Acceleration.op_Equality(UnitsNet.Acceleration,UnitsNet.Acceleration)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Acceleration.Equals(UnitsNet.Acceleration,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Acceleration.op_Inequality(UnitsNet.Acceleration,UnitsNet.Acceleration)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Acceleration.Equals(UnitsNet.Acceleration,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Acceleration.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Acceleration.CompareTo(UnitsNet.Acceleration)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Acceleration.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Acceleration.Equals(UnitsNet.Acceleration,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Acceleration.Equals(UnitsNet.Acceleration)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Acceleration.Equals(UnitsNet.Acceleration,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Acceleration.Equals(UnitsNet.Acceleration,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Acceleration within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Acceleration.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Acceleration.</returns>
        </member>
        <member name="M:UnitsNet.Acceleration.As(UnitsNet.Units.AccelerationUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Acceleration.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Acceleration.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Acceleration.ToUnit(UnitsNet.Units.AccelerationUnit)">
            <summary>
                Converts this Acceleration to another Acceleration with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Acceleration with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Acceleration.ToUnit(UnitsNet.Units.AccelerationUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Acceleration to another Acceleration using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Acceleration with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Acceleration.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Acceleration.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Acceleration.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Acceleration.UnitsNet#IQuantity{UnitsNet#Units#AccelerationUnit}#ToUnit(UnitsNet.Units.AccelerationUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Acceleration.UnitsNet#IQuantity{UnitsNet#Units#AccelerationUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Acceleration.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Acceleration.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Acceleration.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Acceleration.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Acceleration.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Acceleration.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.AmountOfSubstance">
            <inheritdoc />
            <summary>
                Mole is the amount of substance containing Avagadro's Number (6.02 x 10 ^ 23) of real particles such as molecules,atoms, ions or radicals.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.AvogadroConstant">
            <summary>
                The Avogadro constant is the number of constituent particles, usually molecules, 
                atoms or ions that are contained in the amount of substance given by one mole. It is the proportionality factor that relates 
                the molar mass of a substance to the mass of a sample, is designated with the symbol NA or L[1], and has the value 
                6.02214076e23 mol−1 in the International System of Units (SI).
            </summary>
            <remarks>
                Pending revisions in the base set of SI units necessitated redefinitions of the concepts of chemical quantity. The Avogadro number,
                and its definition, was deprecated in favor of the Avogadro constant and its definition. Based on measurements made through the
                middle of 2017 which calculated a value for the Avogadro constant of NA = 6.022140758(62)×1023 mol−1, the redefinition of SI units
                is planned to take effect on 20 May 2019. The value of the constant will be fixed to exactly 6.02214076×1023 mol−1.
                See here: https://www.bipm.org/utils/common/pdf/CGPM-2018/26th-CGPM-Resolutions.pdf
            </remarks>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.NumberOfParticles">
            <summary>
            Calculates the number of particles (atoms or molecules) in this amount of substance using the <see cref="P:UnitsNet.AmountOfSubstance.AvogadroConstant"/>.
            </summary>
            <returns>The number of particles (atoms or molecules) in this amount of substance.</returns>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromMass(UnitsNet.Mass,UnitsNet.MolarMass)">
            <summary>Get <see cref="T:UnitsNet.AmountOfSubstance" /> from <see cref="T:UnitsNet.Mass" /> and a given <see cref="T:UnitsNet.MolarMass" />.</summary>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.op_Multiply(UnitsNet.AmountOfSubstance,UnitsNet.MolarMass)">
            <summary>Get <see cref="T:UnitsNet.Mass" /> from <see cref="T:UnitsNet.AmountOfSubstance" /> for a given <see cref="T:UnitsNet.MolarMass" />.</summary>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.op_Multiply(UnitsNet.MolarMass,UnitsNet.AmountOfSubstance)">
            <summary>Get <see cref="T:UnitsNet.Mass" /> from <see cref="T:UnitsNet.AmountOfSubstance" /> for a given <see cref="T:UnitsNet.MolarMass" />.</summary>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.op_Division(UnitsNet.AmountOfSubstance,UnitsNet.Volume)">
            <summary>Get <see cref="T:UnitsNet.Molarity" /> from <see cref="T:UnitsNet.AmountOfSubstance" /> divided by <see cref="T:UnitsNet.Volume" />.</summary>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.op_Division(UnitsNet.AmountOfSubstance,UnitsNet.Molarity)">
            <summary>Get <see cref="T:UnitsNet.Volume" /> from <see cref="T:UnitsNet.AmountOfSubstance" /> divided by <see cref="T:UnitsNet.Molarity" />.</summary>
        </member>
        <member name="F:UnitsNet.AmountOfSubstance._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.AmountOfSubstance._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.#ctor(System.Double,UnitsNet.Units.AmountOfSubstanceUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.AmountOfSubstance" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.AmountOfSubstance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.BaseUnit">
            <summary>
                The base unit of AmountOfSubstance, which is Mole. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.MaxValue">
            <summary>
            Represents the largest possible value of AmountOfSubstance
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.MinValue">
            <summary>
            Represents the smallest possible value of AmountOfSubstance
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.AmountOfSubstance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.Units">
            <summary>
                All units of measurement for the AmountOfSubstance quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Mole.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.Type">
            <summary>
                The <see cref="P:UnitsNet.AmountOfSubstance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.AmountOfSubstance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.Centimoles">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.Centimole"/>
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.CentipoundMoles">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.CentipoundMole"/>
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.Decimoles">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.Decimole"/>
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.DecipoundMoles">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.DecipoundMole"/>
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.Kilomoles">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.Kilomole"/>
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.KilopoundMoles">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.KilopoundMole"/>
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.Megamoles">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.Megamole"/>
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.Micromoles">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.Micromole"/>
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.MicropoundMoles">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.MicropoundMole"/>
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.Millimoles">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.Millimole"/>
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.MillipoundMoles">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.MillipoundMole"/>
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.Moles">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.Mole"/>
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.Nanomoles">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.Nanomole"/>
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.NanopoundMoles">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.NanopoundMole"/>
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.PoundMoles">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.PoundMole"/>
            </summary>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.GetAbbreviation(UnitsNet.Units.AmountOfSubstanceUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.GetAbbreviation(UnitsNet.Units.AmountOfSubstanceUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromCentimoles(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.AmountOfSubstance"/> from <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.Centimole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromCentipoundMoles(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.AmountOfSubstance"/> from <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.CentipoundMole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromDecimoles(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.AmountOfSubstance"/> from <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.Decimole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromDecipoundMoles(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.AmountOfSubstance"/> from <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.DecipoundMole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromKilomoles(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.AmountOfSubstance"/> from <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.Kilomole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromKilopoundMoles(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.AmountOfSubstance"/> from <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.KilopoundMole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromMegamoles(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.AmountOfSubstance"/> from <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.Megamole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromMicromoles(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.AmountOfSubstance"/> from <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.Micromole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromMicropoundMoles(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.AmountOfSubstance"/> from <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.MicropoundMole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromMillimoles(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.AmountOfSubstance"/> from <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.Millimole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromMillipoundMoles(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.AmountOfSubstance"/> from <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.MillipoundMole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromMoles(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.AmountOfSubstance"/> from <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.Mole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromNanomoles(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.AmountOfSubstance"/> from <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.Nanomole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromNanopoundMoles(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.AmountOfSubstance"/> from <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.NanopoundMole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromPoundMoles(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.AmountOfSubstance"/> from <see cref="F:UnitsNet.Units.AmountOfSubstanceUnit.PoundMole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.From(UnitsNet.QuantityValue,UnitsNet.Units.AmountOfSubstanceUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.AmountOfSubstanceUnit" /> to <see cref="T:UnitsNet.AmountOfSubstance" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>AmountOfSubstance unit value.</returns>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.TryParse(System.String,UnitsNet.AmountOfSubstance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.TryParse(System.String,System.IFormatProvider,UnitsNet.AmountOfSubstance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.TryParseUnit(System.String,UnitsNet.Units.AmountOfSubstanceUnit@)">
            <inheritdoc cref="M:UnitsNet.AmountOfSubstance.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.AmountOfSubstanceUnit@)"/>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.AmountOfSubstanceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.op_UnaryNegation(UnitsNet.AmountOfSubstance)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.op_Addition(UnitsNet.AmountOfSubstance,UnitsNet.AmountOfSubstance)">
            <summary>Get <see cref="T:UnitsNet.AmountOfSubstance"/> from adding two <see cref="T:UnitsNet.AmountOfSubstance"/>.</summary>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.op_Subtraction(UnitsNet.AmountOfSubstance,UnitsNet.AmountOfSubstance)">
            <summary>Get <see cref="T:UnitsNet.AmountOfSubstance"/> from subtracting two <see cref="T:UnitsNet.AmountOfSubstance"/>.</summary>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.op_Multiply(System.Double,UnitsNet.AmountOfSubstance)">
            <summary>Get <see cref="T:UnitsNet.AmountOfSubstance"/> from multiplying value and <see cref="T:UnitsNet.AmountOfSubstance"/>.</summary>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.op_Multiply(UnitsNet.AmountOfSubstance,System.Double)">
            <summary>Get <see cref="T:UnitsNet.AmountOfSubstance"/> from multiplying value and <see cref="T:UnitsNet.AmountOfSubstance"/>.</summary>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.op_Division(UnitsNet.AmountOfSubstance,System.Double)">
            <summary>Get <see cref="T:UnitsNet.AmountOfSubstance"/> from dividing <see cref="T:UnitsNet.AmountOfSubstance"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.op_Division(UnitsNet.AmountOfSubstance,UnitsNet.AmountOfSubstance)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.AmountOfSubstance"/> by <see cref="T:UnitsNet.AmountOfSubstance"/>.</summary>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.op_LessThanOrEqual(UnitsNet.AmountOfSubstance,UnitsNet.AmountOfSubstance)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.op_GreaterThanOrEqual(UnitsNet.AmountOfSubstance,UnitsNet.AmountOfSubstance)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.op_LessThan(UnitsNet.AmountOfSubstance,UnitsNet.AmountOfSubstance)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.op_GreaterThan(UnitsNet.AmountOfSubstance,UnitsNet.AmountOfSubstance)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.op_Equality(UnitsNet.AmountOfSubstance,UnitsNet.AmountOfSubstance)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.AmountOfSubstance.Equals(UnitsNet.AmountOfSubstance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.op_Inequality(UnitsNet.AmountOfSubstance,UnitsNet.AmountOfSubstance)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.AmountOfSubstance.Equals(UnitsNet.AmountOfSubstance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.CompareTo(UnitsNet.AmountOfSubstance)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.AmountOfSubstance.Equals(UnitsNet.AmountOfSubstance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.Equals(UnitsNet.AmountOfSubstance)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.AmountOfSubstance.Equals(UnitsNet.AmountOfSubstance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.Equals(UnitsNet.AmountOfSubstance,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another AmountOfSubstance within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current AmountOfSubstance.</returns>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.As(UnitsNet.Units.AmountOfSubstanceUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.ToUnit(UnitsNet.Units.AmountOfSubstanceUnit)">
            <summary>
                Converts this AmountOfSubstance to another AmountOfSubstance with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A AmountOfSubstance with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.ToUnit(UnitsNet.Units.AmountOfSubstanceUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this AmountOfSubstance to another AmountOfSubstance using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A AmountOfSubstance with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.UnitsNet#IQuantity{UnitsNet#Units#AmountOfSubstanceUnit}#ToUnit(UnitsNet.Units.AmountOfSubstanceUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.UnitsNet#IQuantity{UnitsNet#Units#AmountOfSubstanceUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.AmplitudeRatio">
            <inheritdoc />
            <summary>
                The strength of a signal expressed in decibels (dB) relative to one volt RMS.
            </summary>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.#ctor(UnitsNet.ElectricPotential)">
            <summary>
                Initializes a new instance of the <see cref="T:UnitsNet.AmplitudeRatio" /> struct from the specified electric potential
                referenced to one volt RMS. This assumes both the specified electric potential and the one volt reference have the
                same
                resistance.
            </summary>
            <param name="voltage">The electric potential referenced to one volt.</param>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.ToElectricPotential">
            <summary>
                Gets an <see cref="T:UnitsNet.ElectricPotential" /> from this <see cref="T:UnitsNet.AmplitudeRatio" />.
            </summary>
            <remarks>
                Provides a nicer syntax for converting an amplitude ratio back to a voltage.
                <example>
                    <c>var voltage = voltageRatio.ToElectricPotential();</c>
                </example>
            </remarks>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.ToPowerRatio(UnitsNet.ElectricResistance)">
            <summary>
                Converts this <see cref="T:UnitsNet.AmplitudeRatio" /> to a <see cref="T:UnitsNet.PowerRatio" />.
            </summary>
            <param name="impedance">The input impedance of the load. This is usually 50, 75 or 600 ohms.</param>
            <remarks>http://www.maximintegrated.com/en/app-notes/index.mvp/id/808</remarks>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.FromElectricPotential(UnitsNet.ElectricPotential)">
            <summary>
                Gets an <see cref="T:UnitsNet.AmplitudeRatio" /> in decibels (dB) relative to 1 volt RMS from an
                <see cref="T:UnitsNet.ElectricPotential" />.
            </summary>
            <param name="voltage">The voltage (electric potential) relative to one volt RMS.</param>
        </member>
        <member name="F:UnitsNet.AmplitudeRatio._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.AmplitudeRatio._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.#ctor(System.Double,UnitsNet.Units.AmplitudeRatioUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.AmplitudeRatio" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.AmplitudeRatio.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.BaseUnit">
            <summary>
                The base unit of AmplitudeRatio, which is DecibelVolt. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.MaxValue">
            <summary>
            Represents the largest possible value of AmplitudeRatio
            </summary>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.MinValue">
            <summary>
            Represents the smallest possible value of AmplitudeRatio
            </summary>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.AmplitudeRatio.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.Units">
            <summary>
                All units of measurement for the AmplitudeRatio quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit DecibelVolt.
            </summary>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.Type">
            <summary>
                The <see cref="P:UnitsNet.AmplitudeRatio.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.AmplitudeRatio.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.DecibelMicrovolts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AmplitudeRatioUnit.DecibelMicrovolt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.DecibelMillivolts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AmplitudeRatioUnit.DecibelMillivolt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.DecibelsUnloaded">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AmplitudeRatioUnit.DecibelUnloaded"/>
            </summary>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.DecibelVolts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AmplitudeRatioUnit.DecibelVolt"/>
            </summary>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.GetAbbreviation(UnitsNet.Units.AmplitudeRatioUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.GetAbbreviation(UnitsNet.Units.AmplitudeRatioUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.FromDecibelMicrovolts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.AmplitudeRatio"/> from <see cref="F:UnitsNet.Units.AmplitudeRatioUnit.DecibelMicrovolt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.FromDecibelMillivolts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.AmplitudeRatio"/> from <see cref="F:UnitsNet.Units.AmplitudeRatioUnit.DecibelMillivolt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.FromDecibelsUnloaded(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.AmplitudeRatio"/> from <see cref="F:UnitsNet.Units.AmplitudeRatioUnit.DecibelUnloaded"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.FromDecibelVolts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.AmplitudeRatio"/> from <see cref="F:UnitsNet.Units.AmplitudeRatioUnit.DecibelVolt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.From(UnitsNet.QuantityValue,UnitsNet.Units.AmplitudeRatioUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.AmplitudeRatioUnit" /> to <see cref="T:UnitsNet.AmplitudeRatio" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>AmplitudeRatio unit value.</returns>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.TryParse(System.String,UnitsNet.AmplitudeRatio@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.TryParse(System.String,System.IFormatProvider,UnitsNet.AmplitudeRatio@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.TryParseUnit(System.String,UnitsNet.Units.AmplitudeRatioUnit@)">
            <inheritdoc cref="M:UnitsNet.AmplitudeRatio.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.AmplitudeRatioUnit@)"/>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.AmplitudeRatioUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.op_UnaryNegation(UnitsNet.AmplitudeRatio)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.op_Addition(UnitsNet.AmplitudeRatio,UnitsNet.AmplitudeRatio)">
            <summary>Get <see cref="T:UnitsNet.AmplitudeRatio"/> from logarithmic addition of two <see cref="T:UnitsNet.AmplitudeRatio"/>.</summary>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.op_Subtraction(UnitsNet.AmplitudeRatio,UnitsNet.AmplitudeRatio)">
            <summary>Get <see cref="T:UnitsNet.AmplitudeRatio"/> from logarithmic subtraction of two <see cref="T:UnitsNet.AmplitudeRatio"/>.</summary>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.op_Multiply(System.Double,UnitsNet.AmplitudeRatio)">
            <summary>Get <see cref="T:UnitsNet.AmplitudeRatio"/> from logarithmic multiplication of value and <see cref="T:UnitsNet.AmplitudeRatio"/>.</summary>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.op_Multiply(UnitsNet.AmplitudeRatio,System.Double)">
            <summary>Get <see cref="T:UnitsNet.AmplitudeRatio"/> from logarithmic multiplication of value and <see cref="T:UnitsNet.AmplitudeRatio"/>.</summary>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.op_Division(UnitsNet.AmplitudeRatio,System.Double)">
            <summary>Get <see cref="T:UnitsNet.AmplitudeRatio"/> from logarithmic division of <see cref="T:UnitsNet.AmplitudeRatio"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.op_Division(UnitsNet.AmplitudeRatio,UnitsNet.AmplitudeRatio)">
            <summary>Get ratio value from logarithmic division of <see cref="T:UnitsNet.AmplitudeRatio"/> by <see cref="T:UnitsNet.AmplitudeRatio"/>.</summary>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.op_LessThanOrEqual(UnitsNet.AmplitudeRatio,UnitsNet.AmplitudeRatio)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.op_GreaterThanOrEqual(UnitsNet.AmplitudeRatio,UnitsNet.AmplitudeRatio)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.op_LessThan(UnitsNet.AmplitudeRatio,UnitsNet.AmplitudeRatio)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.op_GreaterThan(UnitsNet.AmplitudeRatio,UnitsNet.AmplitudeRatio)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.op_Equality(UnitsNet.AmplitudeRatio,UnitsNet.AmplitudeRatio)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.AmplitudeRatio.Equals(UnitsNet.AmplitudeRatio,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.op_Inequality(UnitsNet.AmplitudeRatio,UnitsNet.AmplitudeRatio)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.AmplitudeRatio.Equals(UnitsNet.AmplitudeRatio,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.CompareTo(UnitsNet.AmplitudeRatio)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.AmplitudeRatio.Equals(UnitsNet.AmplitudeRatio,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.Equals(UnitsNet.AmplitudeRatio)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.AmplitudeRatio.Equals(UnitsNet.AmplitudeRatio,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.Equals(UnitsNet.AmplitudeRatio,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another AmplitudeRatio within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current AmplitudeRatio.</returns>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.As(UnitsNet.Units.AmplitudeRatioUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.ToUnit(UnitsNet.Units.AmplitudeRatioUnit)">
            <summary>
                Converts this AmplitudeRatio to another AmplitudeRatio with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A AmplitudeRatio with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.ToUnit(UnitsNet.Units.AmplitudeRatioUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this AmplitudeRatio to another AmplitudeRatio using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A AmplitudeRatio with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.UnitsNet#IQuantity{UnitsNet#Units#AmplitudeRatioUnit}#ToUnit(UnitsNet.Units.AmplitudeRatioUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.UnitsNet#IQuantity{UnitsNet#Units#AmplitudeRatioUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Angle">
            <inheritdoc />
            <summary>
                In geometry, an angle is the figure formed by two rays, called the sides of the angle, sharing a common endpoint, called the vertex of the angle.
            </summary>
        </member>
        <member name="M:UnitsNet.Angle.op_Division(UnitsNet.Angle,System.TimeSpan)">
            <summary>Get <see cref="T:UnitsNet.RotationalSpeed"/> from <see cref="T:UnitsNet.Angle"/> delta over time delta.</summary>
        </member>
        <member name="M:UnitsNet.Angle.op_Division(UnitsNet.Angle,UnitsNet.Duration)">
            <inheritdoc cref="M:UnitsNet.Angle.op_Division(UnitsNet.Angle,System.TimeSpan)" />
        </member>
        <member name="F:UnitsNet.Angle._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Angle._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Angle.#ctor(System.Double,UnitsNet.Units.AngleUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Angle.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Angle" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Angle.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Angle.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.BaseUnit">
            <summary>
                The base unit of Angle, which is Degree. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.MaxValue">
            <summary>
            Represents the largest possible value of Angle
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.MinValue">
            <summary>
            Represents the smallest possible value of Angle
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Angle.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Units">
            <summary>
                All units of measurement for the Angle quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Degree.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Angle.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Angle.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Angle.Type">
            <summary>
                The <see cref="P:UnitsNet.Angle.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Angle.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Arcminutes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AngleUnit.Arcminute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Arcseconds">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AngleUnit.Arcsecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Centiradians">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AngleUnit.Centiradian"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Deciradians">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AngleUnit.Deciradian"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Degrees">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AngleUnit.Degree"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Gradians">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AngleUnit.Gradian"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Microdegrees">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AngleUnit.Microdegree"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Microradians">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AngleUnit.Microradian"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Millidegrees">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AngleUnit.Millidegree"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Milliradians">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AngleUnit.Milliradian"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Nanodegrees">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AngleUnit.Nanodegree"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Nanoradians">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AngleUnit.Nanoradian"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.NatoMils">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AngleUnit.NatoMil"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Radians">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AngleUnit.Radian"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Revolutions">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AngleUnit.Revolution"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Tilt">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AngleUnit.Tilt"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Angle.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Angle.GetAbbreviation(UnitsNet.Units.AngleUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Angle.GetAbbreviation(UnitsNet.Units.AngleUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Angle.FromArcminutes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Angle"/> from <see cref="F:UnitsNet.Units.AngleUnit.Arcminute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.FromArcseconds(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Angle"/> from <see cref="F:UnitsNet.Units.AngleUnit.Arcsecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.FromCentiradians(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Angle"/> from <see cref="F:UnitsNet.Units.AngleUnit.Centiradian"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.FromDeciradians(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Angle"/> from <see cref="F:UnitsNet.Units.AngleUnit.Deciradian"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.FromDegrees(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Angle"/> from <see cref="F:UnitsNet.Units.AngleUnit.Degree"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.FromGradians(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Angle"/> from <see cref="F:UnitsNet.Units.AngleUnit.Gradian"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.FromMicrodegrees(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Angle"/> from <see cref="F:UnitsNet.Units.AngleUnit.Microdegree"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.FromMicroradians(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Angle"/> from <see cref="F:UnitsNet.Units.AngleUnit.Microradian"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.FromMillidegrees(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Angle"/> from <see cref="F:UnitsNet.Units.AngleUnit.Millidegree"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.FromMilliradians(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Angle"/> from <see cref="F:UnitsNet.Units.AngleUnit.Milliradian"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.FromNanodegrees(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Angle"/> from <see cref="F:UnitsNet.Units.AngleUnit.Nanodegree"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.FromNanoradians(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Angle"/> from <see cref="F:UnitsNet.Units.AngleUnit.Nanoradian"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.FromNatoMils(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Angle"/> from <see cref="F:UnitsNet.Units.AngleUnit.NatoMil"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.FromRadians(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Angle"/> from <see cref="F:UnitsNet.Units.AngleUnit.Radian"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.FromRevolutions(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Angle"/> from <see cref="F:UnitsNet.Units.AngleUnit.Revolution"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.FromTilt(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Angle"/> from <see cref="F:UnitsNet.Units.AngleUnit.Tilt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.From(UnitsNet.QuantityValue,UnitsNet.Units.AngleUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.AngleUnit" /> to <see cref="T:UnitsNet.Angle" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Angle unit value.</returns>
        </member>
        <member name="M:UnitsNet.Angle.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Angle.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Angle.TryParse(System.String,UnitsNet.Angle@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Angle.TryParse(System.String,System.IFormatProvider,UnitsNet.Angle@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Angle.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Angle.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Angle.TryParseUnit(System.String,UnitsNet.Units.AngleUnit@)">
            <inheritdoc cref="M:UnitsNet.Angle.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.AngleUnit@)"/>
        </member>
        <member name="M:UnitsNet.Angle.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.AngleUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Angle.op_UnaryNegation(UnitsNet.Angle)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Angle.op_Addition(UnitsNet.Angle,UnitsNet.Angle)">
            <summary>Get <see cref="T:UnitsNet.Angle"/> from adding two <see cref="T:UnitsNet.Angle"/>.</summary>
        </member>
        <member name="M:UnitsNet.Angle.op_Subtraction(UnitsNet.Angle,UnitsNet.Angle)">
            <summary>Get <see cref="T:UnitsNet.Angle"/> from subtracting two <see cref="T:UnitsNet.Angle"/>.</summary>
        </member>
        <member name="M:UnitsNet.Angle.op_Multiply(System.Double,UnitsNet.Angle)">
            <summary>Get <see cref="T:UnitsNet.Angle"/> from multiplying value and <see cref="T:UnitsNet.Angle"/>.</summary>
        </member>
        <member name="M:UnitsNet.Angle.op_Multiply(UnitsNet.Angle,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Angle"/> from multiplying value and <see cref="T:UnitsNet.Angle"/>.</summary>
        </member>
        <member name="M:UnitsNet.Angle.op_Division(UnitsNet.Angle,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Angle"/> from dividing <see cref="T:UnitsNet.Angle"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Angle.op_Division(UnitsNet.Angle,UnitsNet.Angle)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Angle"/> by <see cref="T:UnitsNet.Angle"/>.</summary>
        </member>
        <member name="M:UnitsNet.Angle.op_LessThanOrEqual(UnitsNet.Angle,UnitsNet.Angle)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Angle.op_GreaterThanOrEqual(UnitsNet.Angle,UnitsNet.Angle)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Angle.op_LessThan(UnitsNet.Angle,UnitsNet.Angle)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Angle.op_GreaterThan(UnitsNet.Angle,UnitsNet.Angle)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Angle.op_Equality(UnitsNet.Angle,UnitsNet.Angle)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Angle.Equals(UnitsNet.Angle,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Angle.op_Inequality(UnitsNet.Angle,UnitsNet.Angle)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Angle.Equals(UnitsNet.Angle,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Angle.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Angle.CompareTo(UnitsNet.Angle)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Angle.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Angle.Equals(UnitsNet.Angle,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Angle.Equals(UnitsNet.Angle)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Angle.Equals(UnitsNet.Angle,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Angle.Equals(UnitsNet.Angle,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Angle within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Angle.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Angle.</returns>
        </member>
        <member name="M:UnitsNet.Angle.As(UnitsNet.Units.AngleUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Angle.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Angle.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Angle.ToUnit(UnitsNet.Units.AngleUnit)">
            <summary>
                Converts this Angle to another Angle with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Angle with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Angle.ToUnit(UnitsNet.Units.AngleUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Angle to another Angle using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Angle with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Angle.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Angle.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Angle.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Angle.UnitsNet#IQuantity{UnitsNet#Units#AngleUnit}#ToUnit(UnitsNet.Units.AngleUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Angle.UnitsNet#IQuantity{UnitsNet#Units#AngleUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Angle.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Angle.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Angle.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Angle.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Angle.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Angle.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Area">
            <inheritdoc />
            <summary>
                Area is a quantity that expresses the extent of a two-dimensional surface or shape, or planar lamina, in the plane. Area can be understood as the amount of material with a given thickness that would be necessary to fashion a model of the shape, or the amount of paint necessary to cover the surface with a single coat.[1] It is the two-dimensional analog of the length of a curve (a one-dimensional concept) or the volume of a solid (a three-dimensional concept).
            </summary>
        </member>
        <member name="M:UnitsNet.Area.FromCircleDiameter(UnitsNet.Length)">
            <summary>Get circle area from a diameter.</summary>
        </member>
        <member name="M:UnitsNet.Area.FromCircleRadius(UnitsNet.Length)">
            <summary>Get circle area from a radius.</summary>
        </member>
        <member name="M:UnitsNet.Area.Inverse">
            <summary>
            Calculates the inverse of this quantity.
            </summary>
            <returns>The corresponding inverse quantity, <see cref="T:UnitsNet.ReciprocalArea"/>.</returns>
        </member>
        <member name="M:UnitsNet.Area.op_Division(UnitsNet.Area,UnitsNet.Length)">
            <summary>Get <see cref="T:UnitsNet.Length"/> from <see cref="T:UnitsNet.Area"/> divided by <see cref="T:UnitsNet.Length"/>.</summary>
        </member>
        <member name="M:UnitsNet.Area.op_Multiply(UnitsNet.Area,UnitsNet.MassFlux)">
            <summary>Get <see cref="T:UnitsNet.MassFlow"/> from <see cref="T:UnitsNet.Area"/> times <see cref="T:UnitsNet.MassFlux"/>.</summary>
        </member>
        <member name="M:UnitsNet.Area.op_Multiply(UnitsNet.Area,UnitsNet.Speed)">
            <summary>Get <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="T:UnitsNet.Area"/> times <see cref="T:UnitsNet.Speed"/>.</summary>
        </member>
        <member name="M:UnitsNet.Area.op_Multiply(UnitsNet.Area,UnitsNet.Density)">
            <summary>Get <see cref="T:UnitsNet.LinearDensity"/> from <see cref="T:UnitsNet.Area"/> times <see cref="T:UnitsNet.Density"/>.</summary>
        </member>
        <member name="M:UnitsNet.Area.op_Multiply(UnitsNet.Area,UnitsNet.ReciprocalArea)">
            <summary>Get <see cref="T:UnitsNet.Ratio"/> from <see cref="T:UnitsNet.Area"/> times <see cref="T:UnitsNet.ReciprocalArea"/>.</summary>
        </member>
        <member name="F:UnitsNet.Area._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Area._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Area.#ctor(System.Double,UnitsNet.Units.AreaUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Area.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Area.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Area" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Area.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Area.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Area.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Area.BaseUnit">
            <summary>
                The base unit of Area, which is SquareMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Area.MaxValue">
            <summary>
            Represents the largest possible value of Area
            </summary>
        </member>
        <member name="P:UnitsNet.Area.MinValue">
            <summary>
            Represents the smallest possible value of Area
            </summary>
        </member>
        <member name="P:UnitsNet.Area.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Area.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Area.Units">
            <summary>
                All units of measurement for the Area quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Area.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit SquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Area.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Area.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Area.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Area.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Area.Type">
            <summary>
                The <see cref="P:UnitsNet.Area.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Area.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Area.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Area.Acres">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AreaUnit.Acre"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Area.Hectares">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AreaUnit.Hectare"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Area.SquareCentimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AreaUnit.SquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Area.SquareDecimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AreaUnit.SquareDecimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Area.SquareFeet">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AreaUnit.SquareFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Area.SquareInches">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AreaUnit.SquareInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Area.SquareKilometers">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AreaUnit.SquareKilometer"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Area.SquareMeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AreaUnit.SquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Area.SquareMicrometers">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AreaUnit.SquareMicrometer"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Area.SquareMiles">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AreaUnit.SquareMile"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Area.SquareMillimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AreaUnit.SquareMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Area.SquareNauticalMiles">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AreaUnit.SquareNauticalMile"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Area.SquareYards">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AreaUnit.SquareYard"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Area.UsSurveySquareFeet">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AreaUnit.UsSurveySquareFoot"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Area.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Area.GetAbbreviation(UnitsNet.Units.AreaUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Area.GetAbbreviation(UnitsNet.Units.AreaUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Area.FromAcres(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Area"/> from <see cref="F:UnitsNet.Units.AreaUnit.Acre"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Area.FromHectares(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Area"/> from <see cref="F:UnitsNet.Units.AreaUnit.Hectare"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Area.FromSquareCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Area"/> from <see cref="F:UnitsNet.Units.AreaUnit.SquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Area.FromSquareDecimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Area"/> from <see cref="F:UnitsNet.Units.AreaUnit.SquareDecimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Area.FromSquareFeet(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Area"/> from <see cref="F:UnitsNet.Units.AreaUnit.SquareFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Area.FromSquareInches(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Area"/> from <see cref="F:UnitsNet.Units.AreaUnit.SquareInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Area.FromSquareKilometers(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Area"/> from <see cref="F:UnitsNet.Units.AreaUnit.SquareKilometer"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Area.FromSquareMeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Area"/> from <see cref="F:UnitsNet.Units.AreaUnit.SquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Area.FromSquareMicrometers(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Area"/> from <see cref="F:UnitsNet.Units.AreaUnit.SquareMicrometer"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Area.FromSquareMiles(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Area"/> from <see cref="F:UnitsNet.Units.AreaUnit.SquareMile"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Area.FromSquareMillimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Area"/> from <see cref="F:UnitsNet.Units.AreaUnit.SquareMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Area.FromSquareNauticalMiles(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Area"/> from <see cref="F:UnitsNet.Units.AreaUnit.SquareNauticalMile"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Area.FromSquareYards(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Area"/> from <see cref="F:UnitsNet.Units.AreaUnit.SquareYard"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Area.FromUsSurveySquareFeet(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Area"/> from <see cref="F:UnitsNet.Units.AreaUnit.UsSurveySquareFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Area.From(UnitsNet.QuantityValue,UnitsNet.Units.AreaUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.AreaUnit" /> to <see cref="T:UnitsNet.Area" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Area unit value.</returns>
        </member>
        <member name="M:UnitsNet.Area.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Area.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Area.TryParse(System.String,UnitsNet.Area@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Area.TryParse(System.String,System.IFormatProvider,UnitsNet.Area@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Area.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Area.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Area.TryParseUnit(System.String,UnitsNet.Units.AreaUnit@)">
            <inheritdoc cref="M:UnitsNet.Area.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.AreaUnit@)"/>
        </member>
        <member name="M:UnitsNet.Area.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.AreaUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Area.op_UnaryNegation(UnitsNet.Area)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Area.op_Addition(UnitsNet.Area,UnitsNet.Area)">
            <summary>Get <see cref="T:UnitsNet.Area"/> from adding two <see cref="T:UnitsNet.Area"/>.</summary>
        </member>
        <member name="M:UnitsNet.Area.op_Subtraction(UnitsNet.Area,UnitsNet.Area)">
            <summary>Get <see cref="T:UnitsNet.Area"/> from subtracting two <see cref="T:UnitsNet.Area"/>.</summary>
        </member>
        <member name="M:UnitsNet.Area.op_Multiply(System.Double,UnitsNet.Area)">
            <summary>Get <see cref="T:UnitsNet.Area"/> from multiplying value and <see cref="T:UnitsNet.Area"/>.</summary>
        </member>
        <member name="M:UnitsNet.Area.op_Multiply(UnitsNet.Area,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Area"/> from multiplying value and <see cref="T:UnitsNet.Area"/>.</summary>
        </member>
        <member name="M:UnitsNet.Area.op_Division(UnitsNet.Area,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Area"/> from dividing <see cref="T:UnitsNet.Area"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Area.op_Division(UnitsNet.Area,UnitsNet.Area)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Area"/> by <see cref="T:UnitsNet.Area"/>.</summary>
        </member>
        <member name="M:UnitsNet.Area.op_LessThanOrEqual(UnitsNet.Area,UnitsNet.Area)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Area.op_GreaterThanOrEqual(UnitsNet.Area,UnitsNet.Area)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Area.op_LessThan(UnitsNet.Area,UnitsNet.Area)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Area.op_GreaterThan(UnitsNet.Area,UnitsNet.Area)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Area.op_Equality(UnitsNet.Area,UnitsNet.Area)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Area.Equals(UnitsNet.Area,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Area.op_Inequality(UnitsNet.Area,UnitsNet.Area)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Area.Equals(UnitsNet.Area,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Area.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Area.CompareTo(UnitsNet.Area)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Area.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Area.Equals(UnitsNet.Area,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Area.Equals(UnitsNet.Area)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Area.Equals(UnitsNet.Area,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Area.Equals(UnitsNet.Area,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Area within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Area.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Area.</returns>
        </member>
        <member name="M:UnitsNet.Area.As(UnitsNet.Units.AreaUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Area.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Area.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Area.ToUnit(UnitsNet.Units.AreaUnit)">
            <summary>
                Converts this Area to another Area with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Area with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Area.ToUnit(UnitsNet.Units.AreaUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Area to another Area using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Area with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Area.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Area.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Area.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Area.UnitsNet#IQuantity{UnitsNet#Units#AreaUnit}#ToUnit(UnitsNet.Units.AreaUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Area.UnitsNet#IQuantity{UnitsNet#Units#AreaUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Area.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Area.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Area.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Area.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Area.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Area.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.AreaMomentOfInertia">
            <inheritdoc />
            <summary>
                A geometric property of an area that reflects how its points are distributed with regard to an axis.
            </summary>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.op_Division(UnitsNet.AreaMomentOfInertia,UnitsNet.Length)">
            <summary>Get <see cref="T:UnitsNet.Volume"/> from <see cref="T:UnitsNet.AreaMomentOfInertia"/> divided by <see cref="T:UnitsNet.Length"/>.</summary>
        </member>
        <member name="F:UnitsNet.AreaMomentOfInertia._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.AreaMomentOfInertia._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.#ctor(System.Double,UnitsNet.Units.AreaMomentOfInertiaUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.AreaMomentOfInertia" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.AreaMomentOfInertia.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.BaseUnit">
            <summary>
                The base unit of AreaMomentOfInertia, which is MeterToTheFourth. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.MaxValue">
            <summary>
            Represents the largest possible value of AreaMomentOfInertia
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.MinValue">
            <summary>
            Represents the smallest possible value of AreaMomentOfInertia
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.AreaMomentOfInertia.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.Units">
            <summary>
                All units of measurement for the AreaMomentOfInertia quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit MeterToTheFourth.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.Type">
            <summary>
                The <see cref="P:UnitsNet.AreaMomentOfInertia.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.AreaMomentOfInertia.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.CentimetersToTheFourth">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AreaMomentOfInertiaUnit.CentimeterToTheFourth"/>
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.DecimetersToTheFourth">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AreaMomentOfInertiaUnit.DecimeterToTheFourth"/>
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.FeetToTheFourth">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AreaMomentOfInertiaUnit.FootToTheFourth"/>
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.InchesToTheFourth">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AreaMomentOfInertiaUnit.InchToTheFourth"/>
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.MetersToTheFourth">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AreaMomentOfInertiaUnit.MeterToTheFourth"/>
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.MillimetersToTheFourth">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AreaMomentOfInertiaUnit.MillimeterToTheFourth"/>
            </summary>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.GetAbbreviation(UnitsNet.Units.AreaMomentOfInertiaUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.GetAbbreviation(UnitsNet.Units.AreaMomentOfInertiaUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.FromCentimetersToTheFourth(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.AreaMomentOfInertia"/> from <see cref="F:UnitsNet.Units.AreaMomentOfInertiaUnit.CentimeterToTheFourth"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.FromDecimetersToTheFourth(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.AreaMomentOfInertia"/> from <see cref="F:UnitsNet.Units.AreaMomentOfInertiaUnit.DecimeterToTheFourth"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.FromFeetToTheFourth(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.AreaMomentOfInertia"/> from <see cref="F:UnitsNet.Units.AreaMomentOfInertiaUnit.FootToTheFourth"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.FromInchesToTheFourth(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.AreaMomentOfInertia"/> from <see cref="F:UnitsNet.Units.AreaMomentOfInertiaUnit.InchToTheFourth"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.FromMetersToTheFourth(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.AreaMomentOfInertia"/> from <see cref="F:UnitsNet.Units.AreaMomentOfInertiaUnit.MeterToTheFourth"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.FromMillimetersToTheFourth(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.AreaMomentOfInertia"/> from <see cref="F:UnitsNet.Units.AreaMomentOfInertiaUnit.MillimeterToTheFourth"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.From(UnitsNet.QuantityValue,UnitsNet.Units.AreaMomentOfInertiaUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.AreaMomentOfInertiaUnit" /> to <see cref="T:UnitsNet.AreaMomentOfInertia" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>AreaMomentOfInertia unit value.</returns>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.TryParse(System.String,UnitsNet.AreaMomentOfInertia@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.TryParse(System.String,System.IFormatProvider,UnitsNet.AreaMomentOfInertia@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.TryParseUnit(System.String,UnitsNet.Units.AreaMomentOfInertiaUnit@)">
            <inheritdoc cref="M:UnitsNet.AreaMomentOfInertia.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.AreaMomentOfInertiaUnit@)"/>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.AreaMomentOfInertiaUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.op_UnaryNegation(UnitsNet.AreaMomentOfInertia)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.op_Addition(UnitsNet.AreaMomentOfInertia,UnitsNet.AreaMomentOfInertia)">
            <summary>Get <see cref="T:UnitsNet.AreaMomentOfInertia"/> from adding two <see cref="T:UnitsNet.AreaMomentOfInertia"/>.</summary>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.op_Subtraction(UnitsNet.AreaMomentOfInertia,UnitsNet.AreaMomentOfInertia)">
            <summary>Get <see cref="T:UnitsNet.AreaMomentOfInertia"/> from subtracting two <see cref="T:UnitsNet.AreaMomentOfInertia"/>.</summary>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.op_Multiply(System.Double,UnitsNet.AreaMomentOfInertia)">
            <summary>Get <see cref="T:UnitsNet.AreaMomentOfInertia"/> from multiplying value and <see cref="T:UnitsNet.AreaMomentOfInertia"/>.</summary>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.op_Multiply(UnitsNet.AreaMomentOfInertia,System.Double)">
            <summary>Get <see cref="T:UnitsNet.AreaMomentOfInertia"/> from multiplying value and <see cref="T:UnitsNet.AreaMomentOfInertia"/>.</summary>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.op_Division(UnitsNet.AreaMomentOfInertia,System.Double)">
            <summary>Get <see cref="T:UnitsNet.AreaMomentOfInertia"/> from dividing <see cref="T:UnitsNet.AreaMomentOfInertia"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.op_Division(UnitsNet.AreaMomentOfInertia,UnitsNet.AreaMomentOfInertia)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.AreaMomentOfInertia"/> by <see cref="T:UnitsNet.AreaMomentOfInertia"/>.</summary>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.op_LessThanOrEqual(UnitsNet.AreaMomentOfInertia,UnitsNet.AreaMomentOfInertia)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.op_GreaterThanOrEqual(UnitsNet.AreaMomentOfInertia,UnitsNet.AreaMomentOfInertia)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.op_LessThan(UnitsNet.AreaMomentOfInertia,UnitsNet.AreaMomentOfInertia)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.op_GreaterThan(UnitsNet.AreaMomentOfInertia,UnitsNet.AreaMomentOfInertia)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.op_Equality(UnitsNet.AreaMomentOfInertia,UnitsNet.AreaMomentOfInertia)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.AreaMomentOfInertia.Equals(UnitsNet.AreaMomentOfInertia,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.op_Inequality(UnitsNet.AreaMomentOfInertia,UnitsNet.AreaMomentOfInertia)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.AreaMomentOfInertia.Equals(UnitsNet.AreaMomentOfInertia,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.CompareTo(UnitsNet.AreaMomentOfInertia)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.AreaMomentOfInertia.Equals(UnitsNet.AreaMomentOfInertia,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.Equals(UnitsNet.AreaMomentOfInertia)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.AreaMomentOfInertia.Equals(UnitsNet.AreaMomentOfInertia,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.Equals(UnitsNet.AreaMomentOfInertia,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another AreaMomentOfInertia within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current AreaMomentOfInertia.</returns>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.As(UnitsNet.Units.AreaMomentOfInertiaUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.ToUnit(UnitsNet.Units.AreaMomentOfInertiaUnit)">
            <summary>
                Converts this AreaMomentOfInertia to another AreaMomentOfInertia with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A AreaMomentOfInertia with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.ToUnit(UnitsNet.Units.AreaMomentOfInertiaUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this AreaMomentOfInertia to another AreaMomentOfInertia using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A AreaMomentOfInertia with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.UnitsNet#IQuantity{UnitsNet#Units#AreaMomentOfInertiaUnit}#ToUnit(UnitsNet.Units.AreaMomentOfInertiaUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.UnitsNet#IQuantity{UnitsNet#Units#AreaMomentOfInertiaUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.BrakeSpecificFuelConsumption">
            <inheritdoc />
            <summary>
                Brake specific fuel consumption (BSFC) is a measure of the fuel efficiency of any prime mover that burns fuel and produces rotational, or shaft, power. It is typically used for comparing the efficiency of internal combustion engines with a shaft output.
            </summary>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.op_Multiply(UnitsNet.BrakeSpecificFuelConsumption,UnitsNet.Power)">
            <summary>Get <see cref="T:UnitsNet.MassFlow"/> from <see cref="T:UnitsNet.BrakeSpecificFuelConsumption"/> times <see cref="T:UnitsNet.Power"/>.</summary>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.op_Division(System.Double,UnitsNet.BrakeSpecificFuelConsumption)">
            <summary>Get <see cref="T:UnitsNet.SpecificEnergy"/> from <paramref name="value"/> divided by <see cref="T:UnitsNet.BrakeSpecificFuelConsumption"/>.</summary>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.op_Multiply(UnitsNet.BrakeSpecificFuelConsumption,UnitsNet.SpecificEnergy)">
            <summary>Get constant from <see cref="T:UnitsNet.BrakeSpecificFuelConsumption"/> times <see cref="T:UnitsNet.SpecificEnergy"/>.</summary>
        </member>
        <member name="F:UnitsNet.BrakeSpecificFuelConsumption._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.BrakeSpecificFuelConsumption._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.#ctor(System.Double,UnitsNet.Units.BrakeSpecificFuelConsumptionUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.BrakeSpecificFuelConsumption" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.BrakeSpecificFuelConsumption.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.BaseUnit">
            <summary>
                The base unit of BrakeSpecificFuelConsumption, which is KilogramPerJoule. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.MaxValue">
            <summary>
            Represents the largest possible value of BrakeSpecificFuelConsumption
            </summary>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.MinValue">
            <summary>
            Represents the smallest possible value of BrakeSpecificFuelConsumption
            </summary>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.BrakeSpecificFuelConsumption.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.Units">
            <summary>
                All units of measurement for the BrakeSpecificFuelConsumption quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit KilogramPerJoule.
            </summary>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.Type">
            <summary>
                The <see cref="P:UnitsNet.BrakeSpecificFuelConsumption.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.BrakeSpecificFuelConsumption.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.GramsPerKiloWattHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BrakeSpecificFuelConsumptionUnit.GramPerKiloWattHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.KilogramsPerJoule">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BrakeSpecificFuelConsumptionUnit.KilogramPerJoule"/>
            </summary>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.PoundsPerMechanicalHorsepowerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BrakeSpecificFuelConsumptionUnit.PoundPerMechanicalHorsepowerHour"/>
            </summary>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.GetAbbreviation(UnitsNet.Units.BrakeSpecificFuelConsumptionUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.GetAbbreviation(UnitsNet.Units.BrakeSpecificFuelConsumptionUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.FromGramsPerKiloWattHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BrakeSpecificFuelConsumption"/> from <see cref="F:UnitsNet.Units.BrakeSpecificFuelConsumptionUnit.GramPerKiloWattHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.FromKilogramsPerJoule(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BrakeSpecificFuelConsumption"/> from <see cref="F:UnitsNet.Units.BrakeSpecificFuelConsumptionUnit.KilogramPerJoule"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.FromPoundsPerMechanicalHorsepowerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BrakeSpecificFuelConsumption"/> from <see cref="F:UnitsNet.Units.BrakeSpecificFuelConsumptionUnit.PoundPerMechanicalHorsepowerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.From(UnitsNet.QuantityValue,UnitsNet.Units.BrakeSpecificFuelConsumptionUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.BrakeSpecificFuelConsumptionUnit" /> to <see cref="T:UnitsNet.BrakeSpecificFuelConsumption" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>BrakeSpecificFuelConsumption unit value.</returns>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.TryParse(System.String,UnitsNet.BrakeSpecificFuelConsumption@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.TryParse(System.String,System.IFormatProvider,UnitsNet.BrakeSpecificFuelConsumption@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.TryParseUnit(System.String,UnitsNet.Units.BrakeSpecificFuelConsumptionUnit@)">
            <inheritdoc cref="M:UnitsNet.BrakeSpecificFuelConsumption.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.BrakeSpecificFuelConsumptionUnit@)"/>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.BrakeSpecificFuelConsumptionUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.op_UnaryNegation(UnitsNet.BrakeSpecificFuelConsumption)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.op_Addition(UnitsNet.BrakeSpecificFuelConsumption,UnitsNet.BrakeSpecificFuelConsumption)">
            <summary>Get <see cref="T:UnitsNet.BrakeSpecificFuelConsumption"/> from adding two <see cref="T:UnitsNet.BrakeSpecificFuelConsumption"/>.</summary>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.op_Subtraction(UnitsNet.BrakeSpecificFuelConsumption,UnitsNet.BrakeSpecificFuelConsumption)">
            <summary>Get <see cref="T:UnitsNet.BrakeSpecificFuelConsumption"/> from subtracting two <see cref="T:UnitsNet.BrakeSpecificFuelConsumption"/>.</summary>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.op_Multiply(System.Double,UnitsNet.BrakeSpecificFuelConsumption)">
            <summary>Get <see cref="T:UnitsNet.BrakeSpecificFuelConsumption"/> from multiplying value and <see cref="T:UnitsNet.BrakeSpecificFuelConsumption"/>.</summary>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.op_Multiply(UnitsNet.BrakeSpecificFuelConsumption,System.Double)">
            <summary>Get <see cref="T:UnitsNet.BrakeSpecificFuelConsumption"/> from multiplying value and <see cref="T:UnitsNet.BrakeSpecificFuelConsumption"/>.</summary>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.op_Division(UnitsNet.BrakeSpecificFuelConsumption,System.Double)">
            <summary>Get <see cref="T:UnitsNet.BrakeSpecificFuelConsumption"/> from dividing <see cref="T:UnitsNet.BrakeSpecificFuelConsumption"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.op_Division(UnitsNet.BrakeSpecificFuelConsumption,UnitsNet.BrakeSpecificFuelConsumption)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.BrakeSpecificFuelConsumption"/> by <see cref="T:UnitsNet.BrakeSpecificFuelConsumption"/>.</summary>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.op_LessThanOrEqual(UnitsNet.BrakeSpecificFuelConsumption,UnitsNet.BrakeSpecificFuelConsumption)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.op_GreaterThanOrEqual(UnitsNet.BrakeSpecificFuelConsumption,UnitsNet.BrakeSpecificFuelConsumption)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.op_LessThan(UnitsNet.BrakeSpecificFuelConsumption,UnitsNet.BrakeSpecificFuelConsumption)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.op_GreaterThan(UnitsNet.BrakeSpecificFuelConsumption,UnitsNet.BrakeSpecificFuelConsumption)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.op_Equality(UnitsNet.BrakeSpecificFuelConsumption,UnitsNet.BrakeSpecificFuelConsumption)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.BrakeSpecificFuelConsumption.Equals(UnitsNet.BrakeSpecificFuelConsumption,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.op_Inequality(UnitsNet.BrakeSpecificFuelConsumption,UnitsNet.BrakeSpecificFuelConsumption)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.BrakeSpecificFuelConsumption.Equals(UnitsNet.BrakeSpecificFuelConsumption,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.CompareTo(UnitsNet.BrakeSpecificFuelConsumption)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.BrakeSpecificFuelConsumption.Equals(UnitsNet.BrakeSpecificFuelConsumption,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.Equals(UnitsNet.BrakeSpecificFuelConsumption)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.BrakeSpecificFuelConsumption.Equals(UnitsNet.BrakeSpecificFuelConsumption,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.Equals(UnitsNet.BrakeSpecificFuelConsumption,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another BrakeSpecificFuelConsumption within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current BrakeSpecificFuelConsumption.</returns>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.As(UnitsNet.Units.BrakeSpecificFuelConsumptionUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.ToUnit(UnitsNet.Units.BrakeSpecificFuelConsumptionUnit)">
            <summary>
                Converts this BrakeSpecificFuelConsumption to another BrakeSpecificFuelConsumption with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A BrakeSpecificFuelConsumption with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.ToUnit(UnitsNet.Units.BrakeSpecificFuelConsumptionUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this BrakeSpecificFuelConsumption to another BrakeSpecificFuelConsumption using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A BrakeSpecificFuelConsumption with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.UnitsNet#IQuantity{UnitsNet#Units#BrakeSpecificFuelConsumptionUnit}#ToUnit(UnitsNet.Units.BrakeSpecificFuelConsumptionUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.UnitsNet#IQuantity{UnitsNet#Units#BrakeSpecificFuelConsumptionUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Density">
            <inheritdoc />
            <summary>
                The density, or more precisely, the volumetric mass density, of a substance is its mass per unit volume.
            </summary>
            <remarks>
                http://en.wikipedia.org/wiki/Density
            </remarks>
        </member>
        <member name="M:UnitsNet.Density.ToMolarity(UnitsNet.Mass)">
            <summary>
                Gets <see cref="T:UnitsNet.Molarity" /> from this <see cref="T:UnitsNet.Density" />.
            </summary>
            <param name="molecularWeight"></param>
            <seealso cref="M:UnitsNet.MassConcentration.ToMolarity(UnitsNet.MolarMass)"/>
        </member>
        <member name="M:UnitsNet.Density.FromMolarity(UnitsNet.Molarity,UnitsNet.Mass)">
            <summary>
                Get <see cref="T:UnitsNet.Density" /> from <see cref="T:UnitsNet.Molarity" />.
            </summary>
            <seealso cref="M:UnitsNet.MassConcentration.FromMolarity(UnitsNet.Molarity,UnitsNet.MolarMass)"/>
        </member>
        <member name="M:UnitsNet.Density.op_Multiply(UnitsNet.Density,UnitsNet.Volume)">
            <summary>Get <see cref="T:UnitsNet.Mass"/> from <see cref="T:UnitsNet.Density"/> times <see cref="T:UnitsNet.Volume"/>.</summary>
        </member>
        <member name="M:UnitsNet.Density.op_Multiply(UnitsNet.Volume,UnitsNet.Density)">
            <summary>Get <see cref="T:UnitsNet.Mass"/> from <see cref="T:UnitsNet.Volume"/> times <see cref="T:UnitsNet.Density"/>.</summary>
        </member>
        <member name="M:UnitsNet.Density.op_Multiply(UnitsNet.Density,UnitsNet.KinematicViscosity)">
            <summary>Get <see cref="T:UnitsNet.DynamicViscosity"/> from <see cref="T:UnitsNet.Density"/> times <see cref="T:UnitsNet.KinematicViscosity"/>.</summary>
        </member>
        <member name="M:UnitsNet.Density.op_Multiply(UnitsNet.Density,UnitsNet.Speed)">
            <summary>Get <see cref="T:UnitsNet.MassFlux"/> <see cref="T:UnitsNet.Density"/> times <see cref="T:UnitsNet.Speed"/>.</summary>
        </member>
        <member name="M:UnitsNet.Density.op_Multiply(UnitsNet.Density,UnitsNet.Acceleration)">
            <summary>Get <see cref="T:UnitsNet.SpecificWeight"/> from <see cref="T:UnitsNet.Density"/> times <see cref="T:UnitsNet.Acceleration"/>.</summary>
        </member>
        <member name="M:UnitsNet.Density.op_Division(UnitsNet.Density,UnitsNet.Mass)">
            <summary>Get <see cref="T:UnitsNet.Molarity"/> from <see cref="T:UnitsNet.Density"/> divided by <see cref="T:UnitsNet.Mass"/>.</summary>
            <seealso cref="M:UnitsNet.MassConcentration.op_Division(UnitsNet.MassConcentration,UnitsNet.MolarMass)"/>
        </member>
        <member name="M:UnitsNet.Density.op_Multiply(UnitsNet.Density,UnitsNet.Area)">
            <summary>Get <see cref="T:UnitsNet.LinearDensity"/> from <see cref="T:UnitsNet.Density"/> times <see cref="T:UnitsNet.Area"/>.</summary>
        </member>
        <member name="F:UnitsNet.Density._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Density._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Density.#ctor(System.Double,UnitsNet.Units.DensityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Density.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Density" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Density.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Density.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.BaseUnit">
            <summary>
                The base unit of Density, which is KilogramPerCubicMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.MaxValue">
            <summary>
            Represents the largest possible value of Density
            </summary>
        </member>
        <member name="P:UnitsNet.Density.MinValue">
            <summary>
            Represents the smallest possible value of Density
            </summary>
        </member>
        <member name="P:UnitsNet.Density.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Density.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.Units">
            <summary>
                All units of measurement for the Density quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit KilogramPerCubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Density.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Density.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Density.Type">
            <summary>
                The <see cref="P:UnitsNet.Density.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Density.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.CentigramsPerDeciLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.CentigramPerDeciliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.CentigramsPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.CentigramPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.CentigramsPerMilliliter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.CentigramPerMilliliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.DecigramsPerDeciLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.DecigramPerDeciliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.DecigramsPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.DecigramPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.DecigramsPerMilliliter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.DecigramPerMilliliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.GramsPerCubicCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.GramPerCubicCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.GramsPerCubicFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.GramPerCubicFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.GramsPerCubicInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.GramPerCubicInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.GramsPerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.GramPerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.GramsPerCubicMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.GramPerCubicMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.GramsPerDeciLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.GramPerDeciliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.GramsPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.GramPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.GramsPerMilliliter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.GramPerMilliliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.KilogramsPerCubicCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.KilogramPerCubicCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.KilogramsPerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.KilogramPerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.KilogramsPerCubicMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.KilogramPerCubicMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.KilogramsPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.KilogramPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.KilopoundsPerCubicFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.KilopoundPerCubicFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.KilopoundsPerCubicInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.KilopoundPerCubicInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.MicrogramsPerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.MicrogramPerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.MicrogramsPerDeciLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.MicrogramPerDeciliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.MicrogramsPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.MicrogramPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.MicrogramsPerMilliliter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.MicrogramPerMilliliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.MilligramsPerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.MilligramPerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.MilligramsPerDeciLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.MilligramPerDeciliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.MilligramsPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.MilligramPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.MilligramsPerMilliliter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.MilligramPerMilliliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.NanogramsPerDeciLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.NanogramPerDeciliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.NanogramsPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.NanogramPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.NanogramsPerMilliliter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.NanogramPerMilliliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.PicogramsPerDeciLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.PicogramPerDeciliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.PicogramsPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.PicogramPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.PicogramsPerMilliliter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.PicogramPerMilliliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.PoundsPerCubicCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.PoundPerCubicCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.PoundsPerCubicFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.PoundPerCubicFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.PoundsPerCubicInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.PoundPerCubicInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.PoundsPerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.PoundPerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.PoundsPerCubicMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.PoundPerCubicMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.PoundsPerImperialGallon">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.PoundPerImperialGallon"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.PoundsPerUSGallon">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.PoundPerUSGallon"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.SlugsPerCubicCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.SlugPerCubicCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.SlugsPerCubicFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.SlugPerCubicFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.SlugsPerCubicInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.SlugPerCubicInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.SlugsPerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.SlugPerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.SlugsPerCubicMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.SlugPerCubicMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.TonnesPerCubicCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.TonnePerCubicCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.TonnesPerCubicFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.TonnePerCubicFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.TonnesPerCubicInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.TonnePerCubicInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.TonnesPerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.TonnePerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Density.TonnesPerCubicMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DensityUnit.TonnePerCubicMillimeter"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Density.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Density.GetAbbreviation(UnitsNet.Units.DensityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Density.GetAbbreviation(UnitsNet.Units.DensityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Density.FromCentigramsPerDeciLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.CentigramPerDeciliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromCentigramsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.CentigramPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromCentigramsPerMilliliter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.CentigramPerMilliliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromDecigramsPerDeciLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.DecigramPerDeciliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromDecigramsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.DecigramPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromDecigramsPerMilliliter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.DecigramPerMilliliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromGramsPerCubicCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.GramPerCubicCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromGramsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.GramPerCubicFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromGramsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.GramPerCubicInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromGramsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.GramPerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromGramsPerCubicMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.GramPerCubicMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromGramsPerDeciLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.GramPerDeciliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromGramsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.GramPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromGramsPerMilliliter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.GramPerMilliliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromKilogramsPerCubicCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.KilogramPerCubicCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromKilogramsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.KilogramPerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromKilogramsPerCubicMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.KilogramPerCubicMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromKilogramsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.KilogramPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromKilopoundsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.KilopoundPerCubicFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromKilopoundsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.KilopoundPerCubicInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromMicrogramsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.MicrogramPerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromMicrogramsPerDeciLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.MicrogramPerDeciliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromMicrogramsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.MicrogramPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromMicrogramsPerMilliliter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.MicrogramPerMilliliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromMilligramsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.MilligramPerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromMilligramsPerDeciLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.MilligramPerDeciliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromMilligramsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.MilligramPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromMilligramsPerMilliliter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.MilligramPerMilliliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromNanogramsPerDeciLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.NanogramPerDeciliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromNanogramsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.NanogramPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromNanogramsPerMilliliter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.NanogramPerMilliliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromPicogramsPerDeciLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.PicogramPerDeciliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromPicogramsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.PicogramPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromPicogramsPerMilliliter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.PicogramPerMilliliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromPoundsPerCubicCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.PoundPerCubicCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromPoundsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.PoundPerCubicFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromPoundsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.PoundPerCubicInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromPoundsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.PoundPerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromPoundsPerCubicMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.PoundPerCubicMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromPoundsPerImperialGallon(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.PoundPerImperialGallon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromPoundsPerUSGallon(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.PoundPerUSGallon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromSlugsPerCubicCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.SlugPerCubicCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromSlugsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.SlugPerCubicFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromSlugsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.SlugPerCubicInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromSlugsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.SlugPerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromSlugsPerCubicMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.SlugPerCubicMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromTonnesPerCubicCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.TonnePerCubicCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromTonnesPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.TonnePerCubicFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromTonnesPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.TonnePerCubicInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromTonnesPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.TonnePerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromTonnesPerCubicMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Density"/> from <see cref="F:UnitsNet.Units.DensityUnit.TonnePerCubicMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.From(UnitsNet.QuantityValue,UnitsNet.Units.DensityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.DensityUnit" /> to <see cref="T:UnitsNet.Density" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Density unit value.</returns>
        </member>
        <member name="M:UnitsNet.Density.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Density.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Density.TryParse(System.String,UnitsNet.Density@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Density.TryParse(System.String,System.IFormatProvider,UnitsNet.Density@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Density.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Density.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Density.TryParseUnit(System.String,UnitsNet.Units.DensityUnit@)">
            <inheritdoc cref="M:UnitsNet.Density.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.DensityUnit@)"/>
        </member>
        <member name="M:UnitsNet.Density.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.DensityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Density.op_UnaryNegation(UnitsNet.Density)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Density.op_Addition(UnitsNet.Density,UnitsNet.Density)">
            <summary>Get <see cref="T:UnitsNet.Density"/> from adding two <see cref="T:UnitsNet.Density"/>.</summary>
        </member>
        <member name="M:UnitsNet.Density.op_Subtraction(UnitsNet.Density,UnitsNet.Density)">
            <summary>Get <see cref="T:UnitsNet.Density"/> from subtracting two <see cref="T:UnitsNet.Density"/>.</summary>
        </member>
        <member name="M:UnitsNet.Density.op_Multiply(System.Double,UnitsNet.Density)">
            <summary>Get <see cref="T:UnitsNet.Density"/> from multiplying value and <see cref="T:UnitsNet.Density"/>.</summary>
        </member>
        <member name="M:UnitsNet.Density.op_Multiply(UnitsNet.Density,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Density"/> from multiplying value and <see cref="T:UnitsNet.Density"/>.</summary>
        </member>
        <member name="M:UnitsNet.Density.op_Division(UnitsNet.Density,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Density"/> from dividing <see cref="T:UnitsNet.Density"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Density.op_Division(UnitsNet.Density,UnitsNet.Density)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Density"/> by <see cref="T:UnitsNet.Density"/>.</summary>
        </member>
        <member name="M:UnitsNet.Density.op_LessThanOrEqual(UnitsNet.Density,UnitsNet.Density)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Density.op_GreaterThanOrEqual(UnitsNet.Density,UnitsNet.Density)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Density.op_LessThan(UnitsNet.Density,UnitsNet.Density)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Density.op_GreaterThan(UnitsNet.Density,UnitsNet.Density)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Density.op_Equality(UnitsNet.Density,UnitsNet.Density)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Density.Equals(UnitsNet.Density,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Density.op_Inequality(UnitsNet.Density,UnitsNet.Density)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Density.Equals(UnitsNet.Density,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Density.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Density.CompareTo(UnitsNet.Density)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Density.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Density.Equals(UnitsNet.Density,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Density.Equals(UnitsNet.Density)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Density.Equals(UnitsNet.Density,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Density.Equals(UnitsNet.Density,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Density within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Density.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Density.</returns>
        </member>
        <member name="M:UnitsNet.Density.As(UnitsNet.Units.DensityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Density.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Density.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Density.ToUnit(UnitsNet.Units.DensityUnit)">
            <summary>
                Converts this Density to another Density with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Density with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Density.ToUnit(UnitsNet.Units.DensityUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Density to another Density using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Density with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Density.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Density.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Density.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Density.UnitsNet#IQuantity{UnitsNet#Units#DensityUnit}#ToUnit(UnitsNet.Units.DensityUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Density.UnitsNet#IQuantity{UnitsNet#Units#DensityUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Density.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Density.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Density.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Density.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Density.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Density.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Duration">
            <inheritdoc />
            <summary>
                Time is a dimension in which events can be ordered from the past through the present into the future, and also the measure of durations of events and the intervals between them.
            </summary>
        </member>
        <member name="M:UnitsNet.Duration.ToTimeSpan">
            <summary>
                Convert a Duration to a TimeSpan.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws if the TimeSpan can't represent the Duration exactly </exception>
            <returns>The TimeSpan with the same time as the duration</returns>
        </member>
        <member name="M:UnitsNet.Duration.op_Addition(System.DateTime,UnitsNet.Duration)">
            <summary>Get <see cref="T:System.DateTime"/> from <see cref="T:System.DateTime"/> plus <see cref="T:UnitsNet.Duration"/>.</summary>
        </member>
        <member name="M:UnitsNet.Duration.op_Subtraction(System.DateTime,UnitsNet.Duration)">
            <summary>Get <see cref="T:System.DateTime"/> from <see cref="T:System.DateTime"/> minus <see cref="T:UnitsNet.Duration"/>.</summary>
        </member>
        <member name="M:UnitsNet.Duration.op_Explicit(UnitsNet.Duration)~System.TimeSpan">
            <summary>Explicitly cast <see cref="T:UnitsNet.Duration"/> to <see cref="T:System.TimeSpan"/>.</summary>
        </member>
        <member name="M:UnitsNet.Duration.op_Explicit(System.TimeSpan)~UnitsNet.Duration">
            <summary>Explicitly cast <see cref="T:System.TimeSpan"/> to <see cref="T:UnitsNet.Duration"/>.</summary>
        </member>
        <member name="M:UnitsNet.Duration.op_LessThan(UnitsNet.Duration,System.TimeSpan)">
            <summary>True if <see cref="T:UnitsNet.Duration"/> is less than <see cref="T:System.TimeSpan"/>.</summary>
        </member>
        <member name="M:UnitsNet.Duration.op_GreaterThan(UnitsNet.Duration,System.TimeSpan)">
            <summary>True if <see cref="T:UnitsNet.Duration"/> is greater than <see cref="T:System.TimeSpan"/>.</summary>
        </member>
        <member name="M:UnitsNet.Duration.op_LessThanOrEqual(UnitsNet.Duration,System.TimeSpan)">
            <summary>True if <see cref="T:UnitsNet.Duration"/> is less than or equal to <see cref="T:System.TimeSpan"/>.</summary>
        </member>
        <member name="M:UnitsNet.Duration.op_GreaterThanOrEqual(UnitsNet.Duration,System.TimeSpan)">
            <summary>True if <see cref="T:UnitsNet.Duration"/> is greater than or equal to <see cref="T:System.TimeSpan"/>.</summary>
        </member>
        <member name="M:UnitsNet.Duration.op_LessThan(System.TimeSpan,UnitsNet.Duration)">
            <summary>True if <see cref="T:System.TimeSpan"/> is less than <see cref="T:UnitsNet.Duration"/>.</summary>
        </member>
        <member name="M:UnitsNet.Duration.op_GreaterThan(System.TimeSpan,UnitsNet.Duration)">
            <summary>True if <see cref="T:System.TimeSpan"/> is greater than <see cref="T:UnitsNet.Duration"/>.</summary>
        </member>
        <member name="M:UnitsNet.Duration.op_LessThanOrEqual(System.TimeSpan,UnitsNet.Duration)">
            <summary>True if <see cref="T:System.TimeSpan"/> is less than or equal to <see cref="T:UnitsNet.Duration"/>.</summary>
        </member>
        <member name="M:UnitsNet.Duration.op_GreaterThanOrEqual(System.TimeSpan,UnitsNet.Duration)">
            <summary>True if <see cref="T:System.TimeSpan"/> is greater than or equal to <see cref="T:UnitsNet.Duration"/>.</summary>
        </member>
        <member name="M:UnitsNet.Duration.op_Multiply(UnitsNet.Duration,UnitsNet.VolumeFlow)">
            <summary>Get <see cref="T:UnitsNet.Volume"/> from <see cref="T:UnitsNet.Duration"/> multiplied by <see cref="T:UnitsNet.VolumeFlow"/>.</summary>
        </member>
        <member name="M:UnitsNet.Duration.op_Multiply(UnitsNet.Duration,UnitsNet.ElectricCurrent)">
            <summary>Get <see cref="T:UnitsNet.ElectricCharge"/> from <see cref="T:UnitsNet.Duration"/> multiplied by <see cref="T:UnitsNet.ElectricCurrent"/>.</summary>
        </member>
        <member name="M:UnitsNet.Duration.op_Multiply(UnitsNet.Duration,UnitsNet.Acceleration)">
            <summary>Get <see cref="T:UnitsNet.Speed"/> from <see cref="T:UnitsNet.Duration"/> multiplied by <see cref="T:UnitsNet.Acceleration"/>.</summary>
        </member>
        <member name="M:UnitsNet.Duration.op_Multiply(UnitsNet.Duration,UnitsNet.ForceChangeRate)">
            <summary>Get <see cref="T:UnitsNet.Force"/> from <see cref="T:UnitsNet.Duration"/> multiplied by <see cref="T:UnitsNet.ForceChangeRate"/>.</summary>
        </member>
        <member name="F:UnitsNet.Duration._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Duration._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Duration.#ctor(System.Double,UnitsNet.Units.DurationUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Duration.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Duration" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Duration.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Duration.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.BaseUnit">
            <summary>
                The base unit of Duration, which is Second. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.MaxValue">
            <summary>
            Represents the largest possible value of Duration
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.MinValue">
            <summary>
            Represents the smallest possible value of Duration
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Duration.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Units">
            <summary>
                All units of measurement for the Duration quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Second.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Duration.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Duration.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Duration.Type">
            <summary>
                The <see cref="P:UnitsNet.Duration.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Duration.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Days">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DurationUnit.Day"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Hours">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DurationUnit.Hour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.JulianYears">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DurationUnit.JulianYear"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Microseconds">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DurationUnit.Microsecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Milliseconds">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DurationUnit.Millisecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Minutes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DurationUnit.Minute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Months30">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DurationUnit.Month30"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Nanoseconds">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DurationUnit.Nanosecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Seconds">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DurationUnit.Second"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Weeks">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DurationUnit.Week"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Years365">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DurationUnit.Year365"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Duration.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Duration.GetAbbreviation(UnitsNet.Units.DurationUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Duration.GetAbbreviation(UnitsNet.Units.DurationUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Duration.FromDays(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Duration"/> from <see cref="F:UnitsNet.Units.DurationUnit.Day"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromHours(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Duration"/> from <see cref="F:UnitsNet.Units.DurationUnit.Hour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromJulianYears(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Duration"/> from <see cref="F:UnitsNet.Units.DurationUnit.JulianYear"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromMicroseconds(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Duration"/> from <see cref="F:UnitsNet.Units.DurationUnit.Microsecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromMilliseconds(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Duration"/> from <see cref="F:UnitsNet.Units.DurationUnit.Millisecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromMinutes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Duration"/> from <see cref="F:UnitsNet.Units.DurationUnit.Minute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromMonths30(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Duration"/> from <see cref="F:UnitsNet.Units.DurationUnit.Month30"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromNanoseconds(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Duration"/> from <see cref="F:UnitsNet.Units.DurationUnit.Nanosecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromSeconds(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Duration"/> from <see cref="F:UnitsNet.Units.DurationUnit.Second"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromWeeks(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Duration"/> from <see cref="F:UnitsNet.Units.DurationUnit.Week"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromYears365(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Duration"/> from <see cref="F:UnitsNet.Units.DurationUnit.Year365"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.From(UnitsNet.QuantityValue,UnitsNet.Units.DurationUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.DurationUnit" /> to <see cref="T:UnitsNet.Duration" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Duration unit value.</returns>
        </member>
        <member name="M:UnitsNet.Duration.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Duration.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Duration.TryParse(System.String,UnitsNet.Duration@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Duration.TryParse(System.String,System.IFormatProvider,UnitsNet.Duration@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Duration.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Duration.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Duration.TryParseUnit(System.String,UnitsNet.Units.DurationUnit@)">
            <inheritdoc cref="M:UnitsNet.Duration.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.DurationUnit@)"/>
        </member>
        <member name="M:UnitsNet.Duration.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.DurationUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Duration.op_UnaryNegation(UnitsNet.Duration)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Duration.op_Addition(UnitsNet.Duration,UnitsNet.Duration)">
            <summary>Get <see cref="T:UnitsNet.Duration"/> from adding two <see cref="T:UnitsNet.Duration"/>.</summary>
        </member>
        <member name="M:UnitsNet.Duration.op_Subtraction(UnitsNet.Duration,UnitsNet.Duration)">
            <summary>Get <see cref="T:UnitsNet.Duration"/> from subtracting two <see cref="T:UnitsNet.Duration"/>.</summary>
        </member>
        <member name="M:UnitsNet.Duration.op_Multiply(System.Double,UnitsNet.Duration)">
            <summary>Get <see cref="T:UnitsNet.Duration"/> from multiplying value and <see cref="T:UnitsNet.Duration"/>.</summary>
        </member>
        <member name="M:UnitsNet.Duration.op_Multiply(UnitsNet.Duration,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Duration"/> from multiplying value and <see cref="T:UnitsNet.Duration"/>.</summary>
        </member>
        <member name="M:UnitsNet.Duration.op_Division(UnitsNet.Duration,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Duration"/> from dividing <see cref="T:UnitsNet.Duration"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Duration.op_Division(UnitsNet.Duration,UnitsNet.Duration)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Duration"/> by <see cref="T:UnitsNet.Duration"/>.</summary>
        </member>
        <member name="M:UnitsNet.Duration.op_LessThanOrEqual(UnitsNet.Duration,UnitsNet.Duration)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Duration.op_GreaterThanOrEqual(UnitsNet.Duration,UnitsNet.Duration)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Duration.op_LessThan(UnitsNet.Duration,UnitsNet.Duration)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Duration.op_GreaterThan(UnitsNet.Duration,UnitsNet.Duration)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Duration.op_Equality(UnitsNet.Duration,UnitsNet.Duration)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Duration.Equals(UnitsNet.Duration,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Duration.op_Inequality(UnitsNet.Duration,UnitsNet.Duration)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Duration.Equals(UnitsNet.Duration,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Duration.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Duration.CompareTo(UnitsNet.Duration)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Duration.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Duration.Equals(UnitsNet.Duration,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Duration.Equals(UnitsNet.Duration)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Duration.Equals(UnitsNet.Duration,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Duration.Equals(UnitsNet.Duration,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Duration within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Duration.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Duration.</returns>
        </member>
        <member name="M:UnitsNet.Duration.As(UnitsNet.Units.DurationUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Duration.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Duration.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Duration.ToUnit(UnitsNet.Units.DurationUnit)">
            <summary>
                Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Duration with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Duration.ToUnit(UnitsNet.Units.DurationUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Duration to another Duration using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Duration with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Duration.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Duration.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Duration.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Duration.UnitsNet#IQuantity{UnitsNet#Units#DurationUnit}#ToUnit(UnitsNet.Units.DurationUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Duration.UnitsNet#IQuantity{UnitsNet#Units#DurationUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Duration.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Duration.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Duration.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Duration.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Duration.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Duration.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.DynamicViscosity">
            <inheritdoc />
            <summary>
                The dynamic (shear) viscosity of a fluid expresses its resistance to shearing flows, where adjacent layers move parallel to each other with different speeds
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Viscosity#Dynamic_.28shear.29_viscosity
            </remarks>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.op_Division(UnitsNet.DynamicViscosity,UnitsNet.Density)">
            <summary>Get <see cref="T:UnitsNet.KinematicViscosity"/> from <see cref="T:UnitsNet.DynamicViscosity"/> divided by <see cref="T:UnitsNet.Density"/>.</summary>
        </member>
        <member name="F:UnitsNet.DynamicViscosity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.DynamicViscosity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.#ctor(System.Double,UnitsNet.Units.DynamicViscosityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.DynamicViscosity" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.DynamicViscosity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.BaseUnit">
            <summary>
                The base unit of DynamicViscosity, which is NewtonSecondPerMeterSquared. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.MaxValue">
            <summary>
            Represents the largest possible value of DynamicViscosity
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.MinValue">
            <summary>
            Represents the smallest possible value of DynamicViscosity
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.DynamicViscosity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.Units">
            <summary>
                All units of measurement for the DynamicViscosity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit NewtonSecondPerMeterSquared.
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.DynamicViscosity.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.DynamicViscosity.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.Type">
            <summary>
                The <see cref="P:UnitsNet.DynamicViscosity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.DynamicViscosity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.Centipoise">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DynamicViscosityUnit.Centipoise"/>
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.MicropascalSeconds">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DynamicViscosityUnit.MicropascalSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.MillipascalSeconds">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DynamicViscosityUnit.MillipascalSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.NewtonSecondsPerMeterSquared">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DynamicViscosityUnit.NewtonSecondPerMeterSquared"/>
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.PascalSeconds">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DynamicViscosityUnit.PascalSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.Poise">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DynamicViscosityUnit.Poise"/>
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.PoundsForceSecondPerSquareFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DynamicViscosityUnit.PoundForceSecondPerSquareFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.PoundsForceSecondPerSquareInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DynamicViscosityUnit.PoundForceSecondPerSquareInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.PoundsPerFootSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DynamicViscosityUnit.PoundPerFootSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.Reyns">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DynamicViscosityUnit.Reyn"/>
            </summary>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.GetAbbreviation(UnitsNet.Units.DynamicViscosityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.GetAbbreviation(UnitsNet.Units.DynamicViscosityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.FromCentipoise(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.DynamicViscosity"/> from <see cref="F:UnitsNet.Units.DynamicViscosityUnit.Centipoise"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.FromMicropascalSeconds(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.DynamicViscosity"/> from <see cref="F:UnitsNet.Units.DynamicViscosityUnit.MicropascalSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.FromMillipascalSeconds(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.DynamicViscosity"/> from <see cref="F:UnitsNet.Units.DynamicViscosityUnit.MillipascalSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.FromNewtonSecondsPerMeterSquared(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.DynamicViscosity"/> from <see cref="F:UnitsNet.Units.DynamicViscosityUnit.NewtonSecondPerMeterSquared"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.FromPascalSeconds(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.DynamicViscosity"/> from <see cref="F:UnitsNet.Units.DynamicViscosityUnit.PascalSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.FromPoise(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.DynamicViscosity"/> from <see cref="F:UnitsNet.Units.DynamicViscosityUnit.Poise"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.FromPoundsForceSecondPerSquareFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.DynamicViscosity"/> from <see cref="F:UnitsNet.Units.DynamicViscosityUnit.PoundForceSecondPerSquareFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.FromPoundsForceSecondPerSquareInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.DynamicViscosity"/> from <see cref="F:UnitsNet.Units.DynamicViscosityUnit.PoundForceSecondPerSquareInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.FromPoundsPerFootSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.DynamicViscosity"/> from <see cref="F:UnitsNet.Units.DynamicViscosityUnit.PoundPerFootSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.FromReyns(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.DynamicViscosity"/> from <see cref="F:UnitsNet.Units.DynamicViscosityUnit.Reyn"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.From(UnitsNet.QuantityValue,UnitsNet.Units.DynamicViscosityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.DynamicViscosityUnit" /> to <see cref="T:UnitsNet.DynamicViscosity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>DynamicViscosity unit value.</returns>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.TryParse(System.String,UnitsNet.DynamicViscosity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.TryParse(System.String,System.IFormatProvider,UnitsNet.DynamicViscosity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.TryParseUnit(System.String,UnitsNet.Units.DynamicViscosityUnit@)">
            <inheritdoc cref="M:UnitsNet.DynamicViscosity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.DynamicViscosityUnit@)"/>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.DynamicViscosityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.op_UnaryNegation(UnitsNet.DynamicViscosity)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.op_Addition(UnitsNet.DynamicViscosity,UnitsNet.DynamicViscosity)">
            <summary>Get <see cref="T:UnitsNet.DynamicViscosity"/> from adding two <see cref="T:UnitsNet.DynamicViscosity"/>.</summary>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.op_Subtraction(UnitsNet.DynamicViscosity,UnitsNet.DynamicViscosity)">
            <summary>Get <see cref="T:UnitsNet.DynamicViscosity"/> from subtracting two <see cref="T:UnitsNet.DynamicViscosity"/>.</summary>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.op_Multiply(System.Double,UnitsNet.DynamicViscosity)">
            <summary>Get <see cref="T:UnitsNet.DynamicViscosity"/> from multiplying value and <see cref="T:UnitsNet.DynamicViscosity"/>.</summary>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.op_Multiply(UnitsNet.DynamicViscosity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.DynamicViscosity"/> from multiplying value and <see cref="T:UnitsNet.DynamicViscosity"/>.</summary>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.op_Division(UnitsNet.DynamicViscosity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.DynamicViscosity"/> from dividing <see cref="T:UnitsNet.DynamicViscosity"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.op_Division(UnitsNet.DynamicViscosity,UnitsNet.DynamicViscosity)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.DynamicViscosity"/> by <see cref="T:UnitsNet.DynamicViscosity"/>.</summary>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.op_LessThanOrEqual(UnitsNet.DynamicViscosity,UnitsNet.DynamicViscosity)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.op_GreaterThanOrEqual(UnitsNet.DynamicViscosity,UnitsNet.DynamicViscosity)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.op_LessThan(UnitsNet.DynamicViscosity,UnitsNet.DynamicViscosity)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.op_GreaterThan(UnitsNet.DynamicViscosity,UnitsNet.DynamicViscosity)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.op_Equality(UnitsNet.DynamicViscosity,UnitsNet.DynamicViscosity)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.DynamicViscosity.Equals(UnitsNet.DynamicViscosity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.op_Inequality(UnitsNet.DynamicViscosity,UnitsNet.DynamicViscosity)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.DynamicViscosity.Equals(UnitsNet.DynamicViscosity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.DynamicViscosity.CompareTo(UnitsNet.DynamicViscosity)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.DynamicViscosity.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.DynamicViscosity.Equals(UnitsNet.DynamicViscosity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.Equals(UnitsNet.DynamicViscosity)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.DynamicViscosity.Equals(UnitsNet.DynamicViscosity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.Equals(UnitsNet.DynamicViscosity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another DynamicViscosity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current DynamicViscosity.</returns>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.As(UnitsNet.Units.DynamicViscosityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.DynamicViscosity.ToUnit(UnitsNet.Units.DynamicViscosityUnit)">
            <summary>
                Converts this DynamicViscosity to another DynamicViscosity with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A DynamicViscosity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.ToUnit(UnitsNet.Units.DynamicViscosityUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this DynamicViscosity to another DynamicViscosity using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A DynamicViscosity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.DynamicViscosity.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.DynamicViscosity.UnitsNet#IQuantity{UnitsNet#Units#DynamicViscosityUnit}#ToUnit(UnitsNet.Units.DynamicViscosityUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.DynamicViscosity.UnitsNet#IQuantity{UnitsNet#Units#DynamicViscosityUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.DynamicViscosity.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.ElectricCharge">
            <inheritdoc />
            <summary>
                Electric charge is the physical property of matter that causes it to experience a force when placed in an electromagnetic field.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Electric_charge
            </remarks>
        </member>
        <member name="M:UnitsNet.ElectricCharge.op_Division(UnitsNet.ElectricCharge,UnitsNet.Duration)">
            <summary>Get <see cref="T:UnitsNet.ElectricCurrent"/> from <see cref="T:UnitsNet.ElectricCharge"/> divided by <see cref="T:UnitsNet.Duration"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCharge.op_Division(UnitsNet.ElectricCharge,UnitsNet.ElectricCurrent)">
            <summary>Get <see cref="T:UnitsNet.Duration"/> from <see cref="T:UnitsNet.ElectricCharge"/> divided by <see cref="T:UnitsNet.ElectricCurrent"/>.</summary>
        </member>
        <member name="F:UnitsNet.ElectricCharge._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricCharge._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricCharge.#ctor(System.Double,UnitsNet.Units.ElectricChargeUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCharge.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.ElectricCharge.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.ElectricCharge" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCharge.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricCharge.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricCharge.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCharge.BaseUnit">
            <summary>
                The base unit of ElectricCharge, which is Coulomb. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCharge.MaxValue">
            <summary>
            Represents the largest possible value of ElectricCharge
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCharge.MinValue">
            <summary>
            Represents the smallest possible value of ElectricCharge
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCharge.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricCharge.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCharge.Units">
            <summary>
                All units of measurement for the ElectricCharge quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCharge.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Coulomb.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCharge.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCharge.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricCharge.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricCharge.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricCharge.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricCharge.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCharge.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricCharge.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCharge.AmpereHours">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricChargeUnit.AmpereHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCharge.Coulombs">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricChargeUnit.Coulomb"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCharge.KiloampereHours">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricChargeUnit.KiloampereHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCharge.MegaampereHours">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricChargeUnit.MegaampereHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCharge.MilliampereHours">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricChargeUnit.MilliampereHour"/>
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricCharge.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.ElectricCharge.GetAbbreviation(UnitsNet.Units.ElectricChargeUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCharge.GetAbbreviation(UnitsNet.Units.ElectricChargeUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricCharge.FromAmpereHours(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricCharge"/> from <see cref="F:UnitsNet.Units.ElectricChargeUnit.AmpereHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCharge.FromCoulombs(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricCharge"/> from <see cref="F:UnitsNet.Units.ElectricChargeUnit.Coulomb"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCharge.FromKiloampereHours(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricCharge"/> from <see cref="F:UnitsNet.Units.ElectricChargeUnit.KiloampereHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCharge.FromMegaampereHours(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricCharge"/> from <see cref="F:UnitsNet.Units.ElectricChargeUnit.MegaampereHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCharge.FromMilliampereHours(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricCharge"/> from <see cref="F:UnitsNet.Units.ElectricChargeUnit.MilliampereHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCharge.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricChargeUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricChargeUnit" /> to <see cref="T:UnitsNet.ElectricCharge" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricCharge unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCharge.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricCharge.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricCharge.TryParse(System.String,UnitsNet.ElectricCharge@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricCharge.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricCharge@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricCharge.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCharge.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCharge.TryParseUnit(System.String,UnitsNet.Units.ElectricChargeUnit@)">
            <inheritdoc cref="M:UnitsNet.ElectricCharge.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricChargeUnit@)"/>
        </member>
        <member name="M:UnitsNet.ElectricCharge.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricChargeUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricCharge.op_UnaryNegation(UnitsNet.ElectricCharge)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCharge.op_Addition(UnitsNet.ElectricCharge,UnitsNet.ElectricCharge)">
            <summary>Get <see cref="T:UnitsNet.ElectricCharge"/> from adding two <see cref="T:UnitsNet.ElectricCharge"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCharge.op_Subtraction(UnitsNet.ElectricCharge,UnitsNet.ElectricCharge)">
            <summary>Get <see cref="T:UnitsNet.ElectricCharge"/> from subtracting two <see cref="T:UnitsNet.ElectricCharge"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCharge.op_Multiply(System.Double,UnitsNet.ElectricCharge)">
            <summary>Get <see cref="T:UnitsNet.ElectricCharge"/> from multiplying value and <see cref="T:UnitsNet.ElectricCharge"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCharge.op_Multiply(UnitsNet.ElectricCharge,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricCharge"/> from multiplying value and <see cref="T:UnitsNet.ElectricCharge"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCharge.op_Division(UnitsNet.ElectricCharge,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricCharge"/> from dividing <see cref="T:UnitsNet.ElectricCharge"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCharge.op_Division(UnitsNet.ElectricCharge,UnitsNet.ElectricCharge)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.ElectricCharge"/> by <see cref="T:UnitsNet.ElectricCharge"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCharge.op_LessThanOrEqual(UnitsNet.ElectricCharge,UnitsNet.ElectricCharge)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCharge.op_GreaterThanOrEqual(UnitsNet.ElectricCharge,UnitsNet.ElectricCharge)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCharge.op_LessThan(UnitsNet.ElectricCharge,UnitsNet.ElectricCharge)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCharge.op_GreaterThan(UnitsNet.ElectricCharge,UnitsNet.ElectricCharge)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCharge.op_Equality(UnitsNet.ElectricCharge,UnitsNet.ElectricCharge)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricCharge.Equals(UnitsNet.ElectricCharge,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricCharge.op_Inequality(UnitsNet.ElectricCharge,UnitsNet.ElectricCharge)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricCharge.Equals(UnitsNet.ElectricCharge,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricCharge.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCharge.CompareTo(UnitsNet.ElectricCharge)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCharge.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricCharge.Equals(UnitsNet.ElectricCharge,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricCharge.Equals(UnitsNet.ElectricCharge)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricCharge.Equals(UnitsNet.ElectricCharge,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricCharge.Equals(UnitsNet.ElectricCharge,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricCharge within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCharge.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricCharge.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCharge.As(UnitsNet.Units.ElectricChargeUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCharge.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricCharge.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCharge.ToUnit(UnitsNet.Units.ElectricChargeUnit)">
            <summary>
                Converts this ElectricCharge to another ElectricCharge with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A ElectricCharge with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCharge.ToUnit(UnitsNet.Units.ElectricChargeUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this ElectricCharge to another ElectricCharge using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A ElectricCharge with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCharge.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCharge.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricCharge.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCharge.UnitsNet#IQuantity{UnitsNet#Units#ElectricChargeUnit}#ToUnit(UnitsNet.Units.ElectricChargeUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCharge.UnitsNet#IQuantity{UnitsNet#Units#ElectricChargeUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCharge.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCharge.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricCharge.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricCharge.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricCharge.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCharge.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.ElectricConductivity">
            <inheritdoc />
            <summary>
                Electrical conductivity or specific conductance is the reciprocal of electrical resistivity, and measures a material's ability to conduct an electric current.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Electrical_resistivity_and_conductivity
            </remarks>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.Inverse">
            <summary>
            Calculates the inverse or <see cref="T:UnitsNet.ElectricResistivity"/> of this unit.
            </summary>
            <returns>The inverse or <see cref="T:UnitsNet.ElectricResistivity"/> of this unit.</returns>
        </member>
        <member name="F:UnitsNet.ElectricConductivity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricConductivity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.#ctor(System.Double,UnitsNet.Units.ElectricConductivityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.ElectricConductivity.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.ElectricConductivity" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductivity.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricConductivity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricConductivity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductivity.BaseUnit">
            <summary>
                The base unit of ElectricConductivity, which is SiemensPerMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductivity.MaxValue">
            <summary>
            Represents the largest possible value of ElectricConductivity
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductivity.MinValue">
            <summary>
            Represents the smallest possible value of ElectricConductivity
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductivity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricConductivity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductivity.Units">
            <summary>
                All units of measurement for the ElectricConductivity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductivity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit SiemensPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductivity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductivity.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricConductivity.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricConductivity.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricConductivity.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricConductivity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductivity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricConductivity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductivity.SiemensPerFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricConductivityUnit.SiemensPerFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductivity.SiemensPerInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricConductivityUnit.SiemensPerInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductivity.SiemensPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricConductivityUnit.SiemensPerMeter"/>
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.GetAbbreviation(UnitsNet.Units.ElectricConductivityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.GetAbbreviation(UnitsNet.Units.ElectricConductivityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.FromSiemensPerFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricConductivity"/> from <see cref="F:UnitsNet.Units.ElectricConductivityUnit.SiemensPerFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.FromSiemensPerInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricConductivity"/> from <see cref="F:UnitsNet.Units.ElectricConductivityUnit.SiemensPerInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.FromSiemensPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricConductivity"/> from <see cref="F:UnitsNet.Units.ElectricConductivityUnit.SiemensPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricConductivityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricConductivityUnit" /> to <see cref="T:UnitsNet.ElectricConductivity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricConductivity unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.TryParse(System.String,UnitsNet.ElectricConductivity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricConductivity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.TryParseUnit(System.String,UnitsNet.Units.ElectricConductivityUnit@)">
            <inheritdoc cref="M:UnitsNet.ElectricConductivity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricConductivityUnit@)"/>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricConductivityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.op_UnaryNegation(UnitsNet.ElectricConductivity)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.op_Addition(UnitsNet.ElectricConductivity,UnitsNet.ElectricConductivity)">
            <summary>Get <see cref="T:UnitsNet.ElectricConductivity"/> from adding two <see cref="T:UnitsNet.ElectricConductivity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.op_Subtraction(UnitsNet.ElectricConductivity,UnitsNet.ElectricConductivity)">
            <summary>Get <see cref="T:UnitsNet.ElectricConductivity"/> from subtracting two <see cref="T:UnitsNet.ElectricConductivity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.op_Multiply(System.Double,UnitsNet.ElectricConductivity)">
            <summary>Get <see cref="T:UnitsNet.ElectricConductivity"/> from multiplying value and <see cref="T:UnitsNet.ElectricConductivity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.op_Multiply(UnitsNet.ElectricConductivity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricConductivity"/> from multiplying value and <see cref="T:UnitsNet.ElectricConductivity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.op_Division(UnitsNet.ElectricConductivity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricConductivity"/> from dividing <see cref="T:UnitsNet.ElectricConductivity"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.op_Division(UnitsNet.ElectricConductivity,UnitsNet.ElectricConductivity)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.ElectricConductivity"/> by <see cref="T:UnitsNet.ElectricConductivity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.op_LessThanOrEqual(UnitsNet.ElectricConductivity,UnitsNet.ElectricConductivity)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.op_GreaterThanOrEqual(UnitsNet.ElectricConductivity,UnitsNet.ElectricConductivity)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.op_LessThan(UnitsNet.ElectricConductivity,UnitsNet.ElectricConductivity)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.op_GreaterThan(UnitsNet.ElectricConductivity,UnitsNet.ElectricConductivity)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.op_Equality(UnitsNet.ElectricConductivity,UnitsNet.ElectricConductivity)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricConductivity.Equals(UnitsNet.ElectricConductivity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.op_Inequality(UnitsNet.ElectricConductivity,UnitsNet.ElectricConductivity)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricConductivity.Equals(UnitsNet.ElectricConductivity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricConductivity.CompareTo(UnitsNet.ElectricConductivity)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricConductivity.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricConductivity.Equals(UnitsNet.ElectricConductivity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.Equals(UnitsNet.ElectricConductivity)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricConductivity.Equals(UnitsNet.ElectricConductivity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.Equals(UnitsNet.ElectricConductivity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricConductivity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricConductivity.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.As(UnitsNet.Units.ElectricConductivityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricConductivity.ToUnit(UnitsNet.Units.ElectricConductivityUnit)">
            <summary>
                Converts this ElectricConductivity to another ElectricConductivity with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A ElectricConductivity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.ToUnit(UnitsNet.Units.ElectricConductivityUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this ElectricConductivity to another ElectricConductivity using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A ElectricConductivity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricConductivity.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricConductivity.UnitsNet#IQuantity{UnitsNet#Units#ElectricConductivityUnit}#ToUnit(UnitsNet.Units.ElectricConductivityUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricConductivity.UnitsNet#IQuantity{UnitsNet#Units#ElectricConductivityUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricConductivity.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.ElectricCurrent">
            <inheritdoc />
            <summary>
                An electric current is a flow of electric charge. In electric circuits this charge is often carried by moving electrons in a wire. It can also be carried by ions in an electrolyte, or by both ions and electrons such as in a plasma.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.op_Multiply(UnitsNet.ElectricCurrent,UnitsNet.ElectricResistance)">
            <summary>Get <see cref="T:UnitsNet.ElectricPotential"/> from <see cref="T:UnitsNet.ElectricResistance"/> multiplied by <see cref="T:UnitsNet.ElectricCurrent"/>.</summary>
            <remarks>Ohm's law implementation</remarks>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.op_Multiply(UnitsNet.ElectricCurrent,UnitsNet.ElectricPotential)">
            <summary>Calculate <see cref="T:UnitsNet.Power"/> from <see cref="T:UnitsNet.ElectricPotential"/> multiplied by <see cref="T:UnitsNet.ElectricCurrent"/>.</summary>
            <remarks>Electric power is defined as P = U * I.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.op_Multiply(UnitsNet.ElectricCurrent,UnitsNet.Duration)">
            <summary>Calculate <see cref="T:UnitsNet.ElectricCharge"/> from <see cref="T:UnitsNet.ElectricCurrent"/> multiplied by <see cref="T:UnitsNet.Duration"/>.</summary>
        </member>
        <member name="F:UnitsNet.ElectricCurrent._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricCurrent._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.#ctor(System.Double,UnitsNet.Units.ElectricCurrentUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.ElectricCurrent" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricCurrent.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.BaseUnit">
            <summary>
                The base unit of ElectricCurrent, which is Ampere. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.MaxValue">
            <summary>
            Represents the largest possible value of ElectricCurrent
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.MinValue">
            <summary>
            Represents the smallest possible value of ElectricCurrent
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricCurrent.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Units">
            <summary>
                All units of measurement for the ElectricCurrent quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Ampere.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricCurrent.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricCurrent.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricCurrent.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricCurrent.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Amperes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricCurrentUnit.Ampere"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Centiamperes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricCurrentUnit.Centiampere"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Kiloamperes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricCurrentUnit.Kiloampere"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Megaamperes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricCurrentUnit.Megaampere"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Microamperes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricCurrentUnit.Microampere"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Milliamperes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricCurrentUnit.Milliampere"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Nanoamperes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricCurrentUnit.Nanoampere"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Picoamperes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricCurrentUnit.Picoampere"/>
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.GetAbbreviation(UnitsNet.Units.ElectricCurrentUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.GetAbbreviation(UnitsNet.Units.ElectricCurrentUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.FromAmperes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricCurrent"/> from <see cref="F:UnitsNet.Units.ElectricCurrentUnit.Ampere"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.FromCentiamperes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricCurrent"/> from <see cref="F:UnitsNet.Units.ElectricCurrentUnit.Centiampere"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.FromKiloamperes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricCurrent"/> from <see cref="F:UnitsNet.Units.ElectricCurrentUnit.Kiloampere"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.FromMegaamperes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricCurrent"/> from <see cref="F:UnitsNet.Units.ElectricCurrentUnit.Megaampere"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.FromMicroamperes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricCurrent"/> from <see cref="F:UnitsNet.Units.ElectricCurrentUnit.Microampere"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.FromMilliamperes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricCurrent"/> from <see cref="F:UnitsNet.Units.ElectricCurrentUnit.Milliampere"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.FromNanoamperes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricCurrent"/> from <see cref="F:UnitsNet.Units.ElectricCurrentUnit.Nanoampere"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.FromPicoamperes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricCurrent"/> from <see cref="F:UnitsNet.Units.ElectricCurrentUnit.Picoampere"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricCurrentUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricCurrentUnit" /> to <see cref="T:UnitsNet.ElectricCurrent" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricCurrent unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.TryParse(System.String,UnitsNet.ElectricCurrent@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricCurrent@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.TryParseUnit(System.String,UnitsNet.Units.ElectricCurrentUnit@)">
            <inheritdoc cref="M:UnitsNet.ElectricCurrent.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricCurrentUnit@)"/>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricCurrentUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.op_UnaryNegation(UnitsNet.ElectricCurrent)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.op_Addition(UnitsNet.ElectricCurrent,UnitsNet.ElectricCurrent)">
            <summary>Get <see cref="T:UnitsNet.ElectricCurrent"/> from adding two <see cref="T:UnitsNet.ElectricCurrent"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.op_Subtraction(UnitsNet.ElectricCurrent,UnitsNet.ElectricCurrent)">
            <summary>Get <see cref="T:UnitsNet.ElectricCurrent"/> from subtracting two <see cref="T:UnitsNet.ElectricCurrent"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.op_Multiply(System.Double,UnitsNet.ElectricCurrent)">
            <summary>Get <see cref="T:UnitsNet.ElectricCurrent"/> from multiplying value and <see cref="T:UnitsNet.ElectricCurrent"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.op_Multiply(UnitsNet.ElectricCurrent,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricCurrent"/> from multiplying value and <see cref="T:UnitsNet.ElectricCurrent"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.op_Division(UnitsNet.ElectricCurrent,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricCurrent"/> from dividing <see cref="T:UnitsNet.ElectricCurrent"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.op_Division(UnitsNet.ElectricCurrent,UnitsNet.ElectricCurrent)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.ElectricCurrent"/> by <see cref="T:UnitsNet.ElectricCurrent"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.op_LessThanOrEqual(UnitsNet.ElectricCurrent,UnitsNet.ElectricCurrent)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.op_GreaterThanOrEqual(UnitsNet.ElectricCurrent,UnitsNet.ElectricCurrent)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.op_LessThan(UnitsNet.ElectricCurrent,UnitsNet.ElectricCurrent)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.op_GreaterThan(UnitsNet.ElectricCurrent,UnitsNet.ElectricCurrent)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.op_Equality(UnitsNet.ElectricCurrent,UnitsNet.ElectricCurrent)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricCurrent.Equals(UnitsNet.ElectricCurrent,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.op_Inequality(UnitsNet.ElectricCurrent,UnitsNet.ElectricCurrent)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricCurrent.Equals(UnitsNet.ElectricCurrent,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCurrent.CompareTo(UnitsNet.ElectricCurrent)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCurrent.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricCurrent.Equals(UnitsNet.ElectricCurrent,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.Equals(UnitsNet.ElectricCurrent)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricCurrent.Equals(UnitsNet.ElectricCurrent,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.Equals(UnitsNet.ElectricCurrent,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricCurrent within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricCurrent.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.As(UnitsNet.Units.ElectricCurrentUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCurrent.ToUnit(UnitsNet.Units.ElectricCurrentUnit)">
            <summary>
                Converts this ElectricCurrent to another ElectricCurrent with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A ElectricCurrent with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.ToUnit(UnitsNet.Units.ElectricCurrentUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this ElectricCurrent to another ElectricCurrent using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A ElectricCurrent with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCurrent.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCurrent.UnitsNet#IQuantity{UnitsNet#Units#ElectricCurrentUnit}#ToUnit(UnitsNet.Units.ElectricCurrentUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCurrent.UnitsNet#IQuantity{UnitsNet#Units#ElectricCurrentUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCurrent.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.ElectricPotential">
            <inheritdoc />
            <summary>
                In classical electromagnetism, the electric potential (a scalar quantity denoted by Φ, ΦE or V and also called the electric field potential or the electrostatic potential) at a point is the amount of electric potential energy that a unitary point charge would have when located at that point.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricPotential.ToAmplitudeRatio">
            <summary>
                Gets an <see cref="T:UnitsNet.AmplitudeRatio" /> in decibels (dB) relative to 1 volt RMS from this <see cref="T:UnitsNet.ElectricPotential" />.
            </summary>
            <remarks>
                Provides a nicer syntax for converting a voltage to an amplitude ratio (relative to 1 volt RMS).
                <example>
                    <c>var voltageRatio = voltage.ToAmplitudeRatio();</c>
                </example>
            </remarks>
        </member>
        <member name="M:UnitsNet.ElectricPotential.op_Division(UnitsNet.ElectricPotential,UnitsNet.ElectricCurrent)">
            <summary>Get <see cref="T:UnitsNet.ElectricResistance"/> from <see cref="T:UnitsNet.ElectricPotential"/> divided by <see cref="T:UnitsNet.ElectricCurrent"/>.</summary>
            <remarks>Ohm's law implementation</remarks>
        </member>
        <member name="M:UnitsNet.ElectricPotential.op_Division(UnitsNet.ElectricPotential,UnitsNet.ElectricResistance)">
            <summary>Get <see cref="T:UnitsNet.ElectricCurrent"/> from <see cref="T:UnitsNet.ElectricPotential"/> divided by <see cref="T:UnitsNet.ElectricResistance"/>.</summary>
            <remarks>Ohm's law implementation</remarks>
        </member>
        <member name="M:UnitsNet.ElectricPotential.op_Multiply(UnitsNet.ElectricPotential,UnitsNet.ElectricCurrent)">
            <summary>Calculate <see cref="T:UnitsNet.Power"/> from <see cref="T:UnitsNet.ElectricPotential"/> multiplied by <see cref="T:UnitsNet.ElectricCurrent"/>.</summary>
            <remarks>Electric power is defined as P = U * I.</remarks>
        </member>
        <member name="F:UnitsNet.ElectricPotential._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricPotential._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricPotential.#ctor(System.Double,UnitsNet.Units.ElectricPotentialUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotential.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.ElectricPotential.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.ElectricPotential" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotential.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricPotential.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricPotential.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotential.BaseUnit">
            <summary>
                The base unit of ElectricPotential, which is Volt. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotential.MaxValue">
            <summary>
            Represents the largest possible value of ElectricPotential
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotential.MinValue">
            <summary>
            Represents the smallest possible value of ElectricPotential
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotential.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricPotential.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotential.Units">
            <summary>
                All units of measurement for the ElectricPotential quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotential.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Volt.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotential.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotential.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricPotential.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricPotential.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricPotential.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricPotential.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotential.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricPotential.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotential.Kilovolts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialUnit.Kilovolt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotential.Megavolts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialUnit.Megavolt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotential.Microvolts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialUnit.Microvolt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotential.Millivolts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialUnit.Millivolt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotential.Volts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialUnit.Volt"/>
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricPotential.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotential.GetAbbreviation(UnitsNet.Units.ElectricPotentialUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotential.GetAbbreviation(UnitsNet.Units.ElectricPotentialUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotential.FromKilovolts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotential"/> from <see cref="F:UnitsNet.Units.ElectricPotentialUnit.Kilovolt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotential.FromMegavolts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotential"/> from <see cref="F:UnitsNet.Units.ElectricPotentialUnit.Megavolt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotential.FromMicrovolts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotential"/> from <see cref="F:UnitsNet.Units.ElectricPotentialUnit.Microvolt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotential.FromMillivolts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotential"/> from <see cref="F:UnitsNet.Units.ElectricPotentialUnit.Millivolt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotential.FromVolts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotential"/> from <see cref="F:UnitsNet.Units.ElectricPotentialUnit.Volt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotential.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricPotentialUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricPotentialUnit" /> to <see cref="T:UnitsNet.ElectricPotential" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricPotential unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotential.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricPotential.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotential.TryParse(System.String,UnitsNet.ElectricPotential@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricPotential.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricPotential@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotential.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotential.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotential.TryParseUnit(System.String,UnitsNet.Units.ElectricPotentialUnit@)">
            <inheritdoc cref="M:UnitsNet.ElectricPotential.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricPotentialUnit@)"/>
        </member>
        <member name="M:UnitsNet.ElectricPotential.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricPotentialUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotential.op_UnaryNegation(UnitsNet.ElectricPotential)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotential.op_Addition(UnitsNet.ElectricPotential,UnitsNet.ElectricPotential)">
            <summary>Get <see cref="T:UnitsNet.ElectricPotential"/> from adding two <see cref="T:UnitsNet.ElectricPotential"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotential.op_Subtraction(UnitsNet.ElectricPotential,UnitsNet.ElectricPotential)">
            <summary>Get <see cref="T:UnitsNet.ElectricPotential"/> from subtracting two <see cref="T:UnitsNet.ElectricPotential"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotential.op_Multiply(System.Double,UnitsNet.ElectricPotential)">
            <summary>Get <see cref="T:UnitsNet.ElectricPotential"/> from multiplying value and <see cref="T:UnitsNet.ElectricPotential"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotential.op_Multiply(UnitsNet.ElectricPotential,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricPotential"/> from multiplying value and <see cref="T:UnitsNet.ElectricPotential"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotential.op_Division(UnitsNet.ElectricPotential,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricPotential"/> from dividing <see cref="T:UnitsNet.ElectricPotential"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotential.op_Division(UnitsNet.ElectricPotential,UnitsNet.ElectricPotential)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.ElectricPotential"/> by <see cref="T:UnitsNet.ElectricPotential"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotential.op_LessThanOrEqual(UnitsNet.ElectricPotential,UnitsNet.ElectricPotential)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotential.op_GreaterThanOrEqual(UnitsNet.ElectricPotential,UnitsNet.ElectricPotential)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotential.op_LessThan(UnitsNet.ElectricPotential,UnitsNet.ElectricPotential)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotential.op_GreaterThan(UnitsNet.ElectricPotential,UnitsNet.ElectricPotential)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotential.op_Equality(UnitsNet.ElectricPotential,UnitsNet.ElectricPotential)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricPotential.Equals(UnitsNet.ElectricPotential,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricPotential.op_Inequality(UnitsNet.ElectricPotential,UnitsNet.ElectricPotential)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricPotential.Equals(UnitsNet.ElectricPotential,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricPotential.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricPotential.CompareTo(UnitsNet.ElectricPotential)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricPotential.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricPotential.Equals(UnitsNet.ElectricPotential,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricPotential.Equals(UnitsNet.ElectricPotential)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricPotential.Equals(UnitsNet.ElectricPotential,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricPotential.Equals(UnitsNet.ElectricPotential,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricPotential within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotential.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricPotential.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotential.As(UnitsNet.Units.ElectricPotentialUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotential.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricPotential.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricPotential.ToUnit(UnitsNet.Units.ElectricPotentialUnit)">
            <summary>
                Converts this ElectricPotential to another ElectricPotential with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A ElectricPotential with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotential.ToUnit(UnitsNet.Units.ElectricPotentialUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this ElectricPotential to another ElectricPotential using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A ElectricPotential with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotential.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricPotential.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricPotential.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricPotential.UnitsNet#IQuantity{UnitsNet#Units#ElectricPotentialUnit}#ToUnit(UnitsNet.Units.ElectricPotentialUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricPotential.UnitsNet#IQuantity{UnitsNet#Units#ElectricPotentialUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricPotential.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotential.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotential.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotential.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotential.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotential.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.ElectricResistance">
            <inheritdoc />
            <summary>
                The electrical resistance of an electrical conductor is the opposition to the passage of an electric current through that conductor.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricResistance.op_Multiply(UnitsNet.ElectricResistance,UnitsNet.ElectricCurrent)">
            <summary>Get <see cref="T:UnitsNet.ElectricPotential"/> from <see cref="T:UnitsNet.ElectricResistance"/> multiplied by <see cref="T:UnitsNet.ElectricCurrent"/>.</summary>
            <remarks>Ohm's law implementation</remarks>
        </member>
        <member name="F:UnitsNet.ElectricResistance._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricResistance._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricResistance.#ctor(System.Double,UnitsNet.Units.ElectricResistanceUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistance.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.ElectricResistance.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.ElectricResistance" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricResistance.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricResistance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.BaseUnit">
            <summary>
                The base unit of ElectricResistance, which is Ohm. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.MaxValue">
            <summary>
            Represents the largest possible value of ElectricResistance
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.MinValue">
            <summary>
            Represents the smallest possible value of ElectricResistance
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricResistance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.Units">
            <summary>
                All units of measurement for the ElectricResistance quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Ohm.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricResistance.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricResistance.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricResistance.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricResistance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricResistance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.Gigaohms">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricResistanceUnit.Gigaohm"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.Kiloohms">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricResistanceUnit.Kiloohm"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.Megaohms">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricResistanceUnit.Megaohm"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.Microohms">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricResistanceUnit.Microohm"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.Milliohms">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricResistanceUnit.Milliohm"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.Ohms">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricResistanceUnit.Ohm"/>
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricResistance.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.ElectricResistance.GetAbbreviation(UnitsNet.Units.ElectricResistanceUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistance.GetAbbreviation(UnitsNet.Units.ElectricResistanceUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricResistance.FromGigaohms(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricResistance"/> from <see cref="F:UnitsNet.Units.ElectricResistanceUnit.Gigaohm"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistance.FromKiloohms(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricResistance"/> from <see cref="F:UnitsNet.Units.ElectricResistanceUnit.Kiloohm"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistance.FromMegaohms(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricResistance"/> from <see cref="F:UnitsNet.Units.ElectricResistanceUnit.Megaohm"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistance.FromMicroohms(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricResistance"/> from <see cref="F:UnitsNet.Units.ElectricResistanceUnit.Microohm"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistance.FromMilliohms(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricResistance"/> from <see cref="F:UnitsNet.Units.ElectricResistanceUnit.Milliohm"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistance.FromOhms(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricResistance"/> from <see cref="F:UnitsNet.Units.ElectricResistanceUnit.Ohm"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistance.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricResistanceUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricResistanceUnit" /> to <see cref="T:UnitsNet.ElectricResistance" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricResistance unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistance.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricResistance.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricResistance.TryParse(System.String,UnitsNet.ElectricResistance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricResistance.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricResistance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricResistance.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistance.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistance.TryParseUnit(System.String,UnitsNet.Units.ElectricResistanceUnit@)">
            <inheritdoc cref="M:UnitsNet.ElectricResistance.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricResistanceUnit@)"/>
        </member>
        <member name="M:UnitsNet.ElectricResistance.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricResistanceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricResistance.op_UnaryNegation(UnitsNet.ElectricResistance)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricResistance.op_Addition(UnitsNet.ElectricResistance,UnitsNet.ElectricResistance)">
            <summary>Get <see cref="T:UnitsNet.ElectricResistance"/> from adding two <see cref="T:UnitsNet.ElectricResistance"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricResistance.op_Subtraction(UnitsNet.ElectricResistance,UnitsNet.ElectricResistance)">
            <summary>Get <see cref="T:UnitsNet.ElectricResistance"/> from subtracting two <see cref="T:UnitsNet.ElectricResistance"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricResistance.op_Multiply(System.Double,UnitsNet.ElectricResistance)">
            <summary>Get <see cref="T:UnitsNet.ElectricResistance"/> from multiplying value and <see cref="T:UnitsNet.ElectricResistance"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricResistance.op_Multiply(UnitsNet.ElectricResistance,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricResistance"/> from multiplying value and <see cref="T:UnitsNet.ElectricResistance"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricResistance.op_Division(UnitsNet.ElectricResistance,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricResistance"/> from dividing <see cref="T:UnitsNet.ElectricResistance"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricResistance.op_Division(UnitsNet.ElectricResistance,UnitsNet.ElectricResistance)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.ElectricResistance"/> by <see cref="T:UnitsNet.ElectricResistance"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricResistance.op_LessThanOrEqual(UnitsNet.ElectricResistance,UnitsNet.ElectricResistance)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricResistance.op_GreaterThanOrEqual(UnitsNet.ElectricResistance,UnitsNet.ElectricResistance)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricResistance.op_LessThan(UnitsNet.ElectricResistance,UnitsNet.ElectricResistance)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricResistance.op_GreaterThan(UnitsNet.ElectricResistance,UnitsNet.ElectricResistance)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricResistance.op_Equality(UnitsNet.ElectricResistance,UnitsNet.ElectricResistance)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricResistance.Equals(UnitsNet.ElectricResistance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricResistance.op_Inequality(UnitsNet.ElectricResistance,UnitsNet.ElectricResistance)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricResistance.Equals(UnitsNet.ElectricResistance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricResistance.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricResistance.CompareTo(UnitsNet.ElectricResistance)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricResistance.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricResistance.Equals(UnitsNet.ElectricResistance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricResistance.Equals(UnitsNet.ElectricResistance)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricResistance.Equals(UnitsNet.ElectricResistance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricResistance.Equals(UnitsNet.ElectricResistance,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricResistance within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistance.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricResistance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistance.As(UnitsNet.Units.ElectricResistanceUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistance.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricResistance.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricResistance.ToUnit(UnitsNet.Units.ElectricResistanceUnit)">
            <summary>
                Converts this ElectricResistance to another ElectricResistance with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A ElectricResistance with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistance.ToUnit(UnitsNet.Units.ElectricResistanceUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this ElectricResistance to another ElectricResistance using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A ElectricResistance with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistance.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricResistance.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricResistance.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricResistance.UnitsNet#IQuantity{UnitsNet#Units#ElectricResistanceUnit}#ToUnit(UnitsNet.Units.ElectricResistanceUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricResistance.UnitsNet#IQuantity{UnitsNet#Units#ElectricResistanceUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricResistance.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistance.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricResistance.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricResistance.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricResistance.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistance.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.ElectricResistivity">
            <inheritdoc />
            <summary>
                Electrical resistivity (also known as resistivity, specific electrical resistance, or volume resistivity) is a fundamental property that quantifies how strongly a given material opposes the flow of electric current.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Electrical_resistivity_and_conductivity
            </remarks>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.Inverse">
            <summary>
            Calculates the inverse or <see cref="T:UnitsNet.ElectricConductivity"/> of this unit.
            </summary>
            <returns>The inverse or <see cref="T:UnitsNet.ElectricConductivity"/> of this unit.</returns>
        </member>
        <member name="F:UnitsNet.ElectricResistivity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricResistivity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.#ctor(System.Double,UnitsNet.Units.ElectricResistivityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.ElectricResistivity" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricResistivity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.BaseUnit">
            <summary>
                The base unit of ElectricResistivity, which is OhmMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.MaxValue">
            <summary>
            Represents the largest possible value of ElectricResistivity
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.MinValue">
            <summary>
            Represents the smallest possible value of ElectricResistivity
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricResistivity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.Units">
            <summary>
                All units of measurement for the ElectricResistivity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit OhmMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricResistivity.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricResistivity.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricResistivity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricResistivity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.KiloohmsCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricResistivityUnit.KiloohmCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.KiloohmMeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricResistivityUnit.KiloohmMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.MegaohmsCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricResistivityUnit.MegaohmCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.MegaohmMeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricResistivityUnit.MegaohmMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.MicroohmsCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricResistivityUnit.MicroohmCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.MicroohmMeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricResistivityUnit.MicroohmMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.MilliohmsCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricResistivityUnit.MilliohmCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.MilliohmMeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricResistivityUnit.MilliohmMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.NanoohmsCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricResistivityUnit.NanoohmCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.NanoohmMeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricResistivityUnit.NanoohmMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.OhmsCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricResistivityUnit.OhmCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.OhmMeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricResistivityUnit.OhmMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.PicoohmsCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricResistivityUnit.PicoohmCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.PicoohmMeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricResistivityUnit.PicoohmMeter"/>
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.GetAbbreviation(UnitsNet.Units.ElectricResistivityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.GetAbbreviation(UnitsNet.Units.ElectricResistivityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.FromKiloohmsCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricResistivity"/> from <see cref="F:UnitsNet.Units.ElectricResistivityUnit.KiloohmCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.FromKiloohmMeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricResistivity"/> from <see cref="F:UnitsNet.Units.ElectricResistivityUnit.KiloohmMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.FromMegaohmsCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricResistivity"/> from <see cref="F:UnitsNet.Units.ElectricResistivityUnit.MegaohmCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.FromMegaohmMeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricResistivity"/> from <see cref="F:UnitsNet.Units.ElectricResistivityUnit.MegaohmMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.FromMicroohmsCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricResistivity"/> from <see cref="F:UnitsNet.Units.ElectricResistivityUnit.MicroohmCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.FromMicroohmMeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricResistivity"/> from <see cref="F:UnitsNet.Units.ElectricResistivityUnit.MicroohmMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.FromMilliohmsCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricResistivity"/> from <see cref="F:UnitsNet.Units.ElectricResistivityUnit.MilliohmCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.FromMilliohmMeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricResistivity"/> from <see cref="F:UnitsNet.Units.ElectricResistivityUnit.MilliohmMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.FromNanoohmsCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricResistivity"/> from <see cref="F:UnitsNet.Units.ElectricResistivityUnit.NanoohmCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.FromNanoohmMeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricResistivity"/> from <see cref="F:UnitsNet.Units.ElectricResistivityUnit.NanoohmMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.FromOhmsCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricResistivity"/> from <see cref="F:UnitsNet.Units.ElectricResistivityUnit.OhmCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.FromOhmMeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricResistivity"/> from <see cref="F:UnitsNet.Units.ElectricResistivityUnit.OhmMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.FromPicoohmsCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricResistivity"/> from <see cref="F:UnitsNet.Units.ElectricResistivityUnit.PicoohmCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.FromPicoohmMeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricResistivity"/> from <see cref="F:UnitsNet.Units.ElectricResistivityUnit.PicoohmMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricResistivityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricResistivityUnit" /> to <see cref="T:UnitsNet.ElectricResistivity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricResistivity unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.TryParse(System.String,UnitsNet.ElectricResistivity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricResistivity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.TryParseUnit(System.String,UnitsNet.Units.ElectricResistivityUnit@)">
            <inheritdoc cref="M:UnitsNet.ElectricResistivity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricResistivityUnit@)"/>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricResistivityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.op_UnaryNegation(UnitsNet.ElectricResistivity)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.op_Addition(UnitsNet.ElectricResistivity,UnitsNet.ElectricResistivity)">
            <summary>Get <see cref="T:UnitsNet.ElectricResistivity"/> from adding two <see cref="T:UnitsNet.ElectricResistivity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.op_Subtraction(UnitsNet.ElectricResistivity,UnitsNet.ElectricResistivity)">
            <summary>Get <see cref="T:UnitsNet.ElectricResistivity"/> from subtracting two <see cref="T:UnitsNet.ElectricResistivity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.op_Multiply(System.Double,UnitsNet.ElectricResistivity)">
            <summary>Get <see cref="T:UnitsNet.ElectricResistivity"/> from multiplying value and <see cref="T:UnitsNet.ElectricResistivity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.op_Multiply(UnitsNet.ElectricResistivity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricResistivity"/> from multiplying value and <see cref="T:UnitsNet.ElectricResistivity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.op_Division(UnitsNet.ElectricResistivity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricResistivity"/> from dividing <see cref="T:UnitsNet.ElectricResistivity"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.op_Division(UnitsNet.ElectricResistivity,UnitsNet.ElectricResistivity)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.ElectricResistivity"/> by <see cref="T:UnitsNet.ElectricResistivity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.op_LessThanOrEqual(UnitsNet.ElectricResistivity,UnitsNet.ElectricResistivity)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.op_GreaterThanOrEqual(UnitsNet.ElectricResistivity,UnitsNet.ElectricResistivity)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.op_LessThan(UnitsNet.ElectricResistivity,UnitsNet.ElectricResistivity)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.op_GreaterThan(UnitsNet.ElectricResistivity,UnitsNet.ElectricResistivity)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.op_Equality(UnitsNet.ElectricResistivity,UnitsNet.ElectricResistivity)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricResistivity.Equals(UnitsNet.ElectricResistivity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.op_Inequality(UnitsNet.ElectricResistivity,UnitsNet.ElectricResistivity)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricResistivity.Equals(UnitsNet.ElectricResistivity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricResistivity.CompareTo(UnitsNet.ElectricResistivity)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricResistivity.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricResistivity.Equals(UnitsNet.ElectricResistivity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.Equals(UnitsNet.ElectricResistivity)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricResistivity.Equals(UnitsNet.ElectricResistivity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.Equals(UnitsNet.ElectricResistivity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricResistivity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricResistivity.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.As(UnitsNet.Units.ElectricResistivityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricResistivity.ToUnit(UnitsNet.Units.ElectricResistivityUnit)">
            <summary>
                Converts this ElectricResistivity to another ElectricResistivity with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A ElectricResistivity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.ToUnit(UnitsNet.Units.ElectricResistivityUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this ElectricResistivity to another ElectricResistivity using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A ElectricResistivity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricResistivity.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricResistivity.UnitsNet#IQuantity{UnitsNet#Units#ElectricResistivityUnit}#ToUnit(UnitsNet.Units.ElectricResistivityUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricResistivity.UnitsNet#IQuantity{UnitsNet#Units#ElectricResistivityUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricResistivity.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Energy">
            <inheritdoc />
            <summary>
                The joule, symbol J, is a derived unit of energy, work, or amount of heat in the International System of Units. It is equal to the energy transferred (or work done) when applying a force of one newton through a distance of one metre (1 newton metre or N·m), or in passing an electric current of one ampere through a resistance of one ohm for one second. Many other units of energy are included. Please do not confuse this definition of the calorie with the one colloquially used by the food industry, the large calorie, which is equivalent to 1 kcal. Thermochemical definition of the calorie is used. For BTU, the IT definition is used.
            </summary>
        </member>
        <member name="M:UnitsNet.Energy.op_Division(UnitsNet.Energy,System.TimeSpan)">
            <summary>Get <see cref="T:UnitsNet.Power"/> from <see cref="T:UnitsNet.Energy"/> divided by <see cref="T:System.TimeSpan"/>.</summary>
        </member>
        <member name="M:UnitsNet.Energy.op_Division(UnitsNet.Energy,UnitsNet.Duration)">
            <summary>Get <see cref="T:UnitsNet.Power"/> from <see cref="T:UnitsNet.Energy"/> divided by <see cref="T:UnitsNet.Duration"/>.</summary>
        </member>
        <member name="F:UnitsNet.Energy._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Energy._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Energy.#ctor(System.Double,UnitsNet.Units.EnergyUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Energy.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Energy" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Energy.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Energy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.BaseUnit">
            <summary>
                The base unit of Energy, which is Joule. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.MaxValue">
            <summary>
            Represents the largest possible value of Energy
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.MinValue">
            <summary>
            Represents the smallest possible value of Energy
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Energy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.Units">
            <summary>
                All units of measurement for the Energy quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Joule.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Energy.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Energy.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Energy.Type">
            <summary>
                The <see cref="P:UnitsNet.Energy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Energy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.BritishThermalUnits">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.BritishThermalUnit"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.Calories">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.Calorie"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.DecathermsEc">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.DecathermEc"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.DecathermsImperial">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.DecathermImperial"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.DecathermsUs">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.DecathermUs"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.ElectronVolts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.ElectronVolt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.Ergs">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.Erg"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.FootPounds">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.FootPound"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.GigabritishThermalUnits">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.GigabritishThermalUnit"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.GigaelectronVolts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.GigaelectronVolt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.Gigajoules">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.Gigajoule"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.GigawattDays">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.GigawattDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.GigawattHours">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.GigawattHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.HorsepowerHours">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.HorsepowerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.Joules">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.Joule"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.KilobritishThermalUnits">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.KilobritishThermalUnit"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.Kilocalories">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.Kilocalorie"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.KiloelectronVolts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.KiloelectronVolt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.Kilojoules">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.Kilojoule"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.KilowattDays">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.KilowattDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.KilowattHours">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.KilowattHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.MegabritishThermalUnits">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.MegabritishThermalUnit"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.Megacalories">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.Megacalorie"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.MegaelectronVolts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.MegaelectronVolt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.Megajoules">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.Megajoule"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.MegawattDays">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.MegawattDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.MegawattHours">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.MegawattHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.Millijoules">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.Millijoule"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.TeraelectronVolts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.TeraelectronVolt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.TerawattDays">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.TerawattDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.TerawattHours">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.TerawattHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.ThermsEc">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.ThermEc"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.ThermsImperial">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.ThermImperial"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.ThermsUs">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.ThermUs"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.WattDays">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.WattDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.WattHours">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EnergyUnit.WattHour"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Energy.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Energy.GetAbbreviation(UnitsNet.Units.EnergyUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Energy.GetAbbreviation(UnitsNet.Units.EnergyUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Energy.FromBritishThermalUnits(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.BritishThermalUnit"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromCalories(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.Calorie"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromDecathermsEc(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.DecathermEc"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromDecathermsImperial(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.DecathermImperial"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromDecathermsUs(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.DecathermUs"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromElectronVolts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.ElectronVolt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromErgs(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.Erg"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromFootPounds(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.FootPound"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromGigabritishThermalUnits(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.GigabritishThermalUnit"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromGigaelectronVolts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.GigaelectronVolt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromGigajoules(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.Gigajoule"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromGigawattDays(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.GigawattDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromGigawattHours(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.GigawattHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromHorsepowerHours(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.HorsepowerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromJoules(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.Joule"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromKilobritishThermalUnits(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.KilobritishThermalUnit"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromKilocalories(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.Kilocalorie"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromKiloelectronVolts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.KiloelectronVolt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromKilojoules(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.Kilojoule"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromKilowattDays(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.KilowattDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromKilowattHours(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.KilowattHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromMegabritishThermalUnits(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.MegabritishThermalUnit"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromMegacalories(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.Megacalorie"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromMegaelectronVolts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.MegaelectronVolt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromMegajoules(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.Megajoule"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromMegawattDays(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.MegawattDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromMegawattHours(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.MegawattHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromMillijoules(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.Millijoule"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromTeraelectronVolts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.TeraelectronVolt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromTerawattDays(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.TerawattDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromTerawattHours(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.TerawattHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromThermsEc(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.ThermEc"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromThermsImperial(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.ThermImperial"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromThermsUs(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.ThermUs"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromWattDays(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.WattDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromWattHours(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Energy"/> from <see cref="F:UnitsNet.Units.EnergyUnit.WattHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.From(UnitsNet.QuantityValue,UnitsNet.Units.EnergyUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.EnergyUnit" /> to <see cref="T:UnitsNet.Energy" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Energy unit value.</returns>
        </member>
        <member name="M:UnitsNet.Energy.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Energy.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Energy.TryParse(System.String,UnitsNet.Energy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Energy.TryParse(System.String,System.IFormatProvider,UnitsNet.Energy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Energy.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Energy.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Energy.TryParseUnit(System.String,UnitsNet.Units.EnergyUnit@)">
            <inheritdoc cref="M:UnitsNet.Energy.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.EnergyUnit@)"/>
        </member>
        <member name="M:UnitsNet.Energy.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.EnergyUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Energy.op_UnaryNegation(UnitsNet.Energy)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Energy.op_Addition(UnitsNet.Energy,UnitsNet.Energy)">
            <summary>Get <see cref="T:UnitsNet.Energy"/> from adding two <see cref="T:UnitsNet.Energy"/>.</summary>
        </member>
        <member name="M:UnitsNet.Energy.op_Subtraction(UnitsNet.Energy,UnitsNet.Energy)">
            <summary>Get <see cref="T:UnitsNet.Energy"/> from subtracting two <see cref="T:UnitsNet.Energy"/>.</summary>
        </member>
        <member name="M:UnitsNet.Energy.op_Multiply(System.Double,UnitsNet.Energy)">
            <summary>Get <see cref="T:UnitsNet.Energy"/> from multiplying value and <see cref="T:UnitsNet.Energy"/>.</summary>
        </member>
        <member name="M:UnitsNet.Energy.op_Multiply(UnitsNet.Energy,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Energy"/> from multiplying value and <see cref="T:UnitsNet.Energy"/>.</summary>
        </member>
        <member name="M:UnitsNet.Energy.op_Division(UnitsNet.Energy,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Energy"/> from dividing <see cref="T:UnitsNet.Energy"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Energy.op_Division(UnitsNet.Energy,UnitsNet.Energy)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Energy"/> by <see cref="T:UnitsNet.Energy"/>.</summary>
        </member>
        <member name="M:UnitsNet.Energy.op_LessThanOrEqual(UnitsNet.Energy,UnitsNet.Energy)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Energy.op_GreaterThanOrEqual(UnitsNet.Energy,UnitsNet.Energy)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Energy.op_LessThan(UnitsNet.Energy,UnitsNet.Energy)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Energy.op_GreaterThan(UnitsNet.Energy,UnitsNet.Energy)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Energy.op_Equality(UnitsNet.Energy,UnitsNet.Energy)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Energy.Equals(UnitsNet.Energy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Energy.op_Inequality(UnitsNet.Energy,UnitsNet.Energy)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Energy.Equals(UnitsNet.Energy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Energy.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Energy.CompareTo(UnitsNet.Energy)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Energy.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Energy.Equals(UnitsNet.Energy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Energy.Equals(UnitsNet.Energy)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Energy.Equals(UnitsNet.Energy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Energy.Equals(UnitsNet.Energy,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Energy within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Energy.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Energy.</returns>
        </member>
        <member name="M:UnitsNet.Energy.As(UnitsNet.Units.EnergyUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Energy.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Energy.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Energy.ToUnit(UnitsNet.Units.EnergyUnit)">
            <summary>
                Converts this Energy to another Energy with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Energy with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Energy.ToUnit(UnitsNet.Units.EnergyUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Energy to another Energy using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Energy with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Energy.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Energy.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Energy.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Energy.UnitsNet#IQuantity{UnitsNet#Units#EnergyUnit}#ToUnit(UnitsNet.Units.EnergyUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Energy.UnitsNet#IQuantity{UnitsNet#Units#EnergyUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Energy.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Energy.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Energy.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Energy.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Energy.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Energy.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Force">
            <inheritdoc />
            <summary>
                In physics, a force is any influence that causes an object to undergo a certain change, either concerning its movement, direction, or geometrical construction. In other words, a force can cause an object with mass to change its velocity (which includes to begin moving from a state of rest), i.e., to accelerate, or a flexible object to deform, or both. Force can also be described by intuitive concepts such as a push or a pull. A force has both magnitude and direction, making it a vector quantity. It is measured in the SI unit of newtons and represented by the symbol F.
            </summary>
        </member>
        <member name="M:UnitsNet.Force.FromPressureByArea(UnitsNet.Pressure,UnitsNet.Area)">
            <summary>Get <see cref="T:UnitsNet.Force"/> from <see cref="T:UnitsNet.Pressure"/> divided by <see cref="T:UnitsNet.Area"/>.</summary>
        </member>
        <member name="M:UnitsNet.Force.FromMassByAcceleration(UnitsNet.Mass,UnitsNet.Acceleration)">
            <summary>Get <see cref="T:UnitsNet.Force"/> from <see cref="T:UnitsNet.Mass"/> times <see cref="T:UnitsNet.Acceleration"/>.</summary>
        </member>
        <member name="M:UnitsNet.Force.op_Multiply(UnitsNet.Force,UnitsNet.Speed)">
            <summary>Get <see cref="T:UnitsNet.Power"/> from <see cref="T:UnitsNet.Force"/> times <see cref="T:UnitsNet.Speed"/>.</summary>
        </member>
        <member name="M:UnitsNet.Force.op_Multiply(UnitsNet.Speed,UnitsNet.Force)">
            <summary>Get <see cref="T:UnitsNet.Power"/> from <see cref="T:UnitsNet.Speed"/> times <see cref="T:UnitsNet.Force"/>.</summary>
        </member>
        <member name="M:UnitsNet.Force.op_Multiply(UnitsNet.Force,UnitsNet.ReciprocalLength)">
            <summary>Get <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="T:UnitsNet.Force"/> times <see cref="T:UnitsNet.ReciprocalLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.Force.op_Multiply(UnitsNet.Force,UnitsNet.ReciprocalArea)">
            <summary>Get <see cref="T:UnitsNet.Pressure"/> from <see cref="T:UnitsNet.Force"/> times <see cref="T:UnitsNet.ReciprocalArea"/>.</summary>
        </member>
        <member name="M:UnitsNet.Force.op_Division(UnitsNet.Force,UnitsNet.Mass)">
            <summary>Get <see cref="T:UnitsNet.Acceleration"/> from <see cref="T:UnitsNet.Force"/> divided by <see cref="T:UnitsNet.Mass"/>.</summary>
        </member>
        <member name="M:UnitsNet.Force.op_Division(UnitsNet.Force,UnitsNet.Acceleration)">
            <summary>Get <see cref="T:UnitsNet.Mass"/> from <see cref="T:UnitsNet.Force"/> divided by <see cref="T:UnitsNet.Acceleration"/>.</summary>
        </member>
        <member name="M:UnitsNet.Force.op_Division(UnitsNet.Force,UnitsNet.Area)">
            <summary>Get <see cref="T:UnitsNet.Pressure"/> from <see cref="T:UnitsNet.Force"/> divided by <see cref="T:UnitsNet.Area"/>.</summary>
        </member>
        <member name="M:UnitsNet.Force.op_Division(UnitsNet.Force,UnitsNet.Length)">
            <summary>Get <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="T:UnitsNet.Force"/> divided by <see cref="T:UnitsNet.Length"/>.</summary>
        </member>
        <member name="M:UnitsNet.Force.op_Division(UnitsNet.Force,UnitsNet.ForceChangeRate)">
            <summary>Get <see cref="T:UnitsNet.Duration"/> from <see cref="T:UnitsNet.Force"/> divided by <see cref="T:UnitsNet.ForceChangeRate"/>.</summary>
        </member>
        <member name="F:UnitsNet.Force._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Force._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Force.#ctor(System.Double,UnitsNet.Units.ForceUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Force.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Force.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Force" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Force.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Force.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Force.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Force.BaseUnit">
            <summary>
                The base unit of Force, which is Newton. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Force.MaxValue">
            <summary>
            Represents the largest possible value of Force
            </summary>
        </member>
        <member name="P:UnitsNet.Force.MinValue">
            <summary>
            Represents the smallest possible value of Force
            </summary>
        </member>
        <member name="P:UnitsNet.Force.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Force.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Force.Units">
            <summary>
                All units of measurement for the Force quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Force.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Newton.
            </summary>
        </member>
        <member name="P:UnitsNet.Force.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Force.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Force.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Force.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Force.Type">
            <summary>
                The <see cref="P:UnitsNet.Force.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Force.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Force.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Force.Decanewtons">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceUnit.Decanewton"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Force.Dyne">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceUnit.Dyn"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Force.KilogramsForce">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceUnit.KilogramForce"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Force.Kilonewtons">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceUnit.Kilonewton"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Force.KiloPonds">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceUnit.KiloPond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Force.KilopoundsForce">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceUnit.KilopoundForce"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Force.Meganewtons">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceUnit.Meganewton"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Force.Micronewtons">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceUnit.Micronewton"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Force.Millinewtons">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceUnit.Millinewton"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Force.Newtons">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceUnit.Newton"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Force.OunceForce">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceUnit.OunceForce"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Force.Poundals">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceUnit.Poundal"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Force.PoundsForce">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceUnit.PoundForce"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Force.ShortTonsForce">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceUnit.ShortTonForce"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Force.TonnesForce">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceUnit.TonneForce"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Force.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Force.GetAbbreviation(UnitsNet.Units.ForceUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Force.GetAbbreviation(UnitsNet.Units.ForceUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Force.FromDecanewtons(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Force"/> from <see cref="F:UnitsNet.Units.ForceUnit.Decanewton"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Force.FromDyne(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Force"/> from <see cref="F:UnitsNet.Units.ForceUnit.Dyn"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Force.FromKilogramsForce(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Force"/> from <see cref="F:UnitsNet.Units.ForceUnit.KilogramForce"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Force.FromKilonewtons(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Force"/> from <see cref="F:UnitsNet.Units.ForceUnit.Kilonewton"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Force.FromKiloPonds(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Force"/> from <see cref="F:UnitsNet.Units.ForceUnit.KiloPond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Force.FromKilopoundsForce(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Force"/> from <see cref="F:UnitsNet.Units.ForceUnit.KilopoundForce"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Force.FromMeganewtons(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Force"/> from <see cref="F:UnitsNet.Units.ForceUnit.Meganewton"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Force.FromMicronewtons(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Force"/> from <see cref="F:UnitsNet.Units.ForceUnit.Micronewton"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Force.FromMillinewtons(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Force"/> from <see cref="F:UnitsNet.Units.ForceUnit.Millinewton"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Force.FromNewtons(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Force"/> from <see cref="F:UnitsNet.Units.ForceUnit.Newton"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Force.FromOunceForce(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Force"/> from <see cref="F:UnitsNet.Units.ForceUnit.OunceForce"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Force.FromPoundals(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Force"/> from <see cref="F:UnitsNet.Units.ForceUnit.Poundal"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Force.FromPoundsForce(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Force"/> from <see cref="F:UnitsNet.Units.ForceUnit.PoundForce"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Force.FromShortTonsForce(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Force"/> from <see cref="F:UnitsNet.Units.ForceUnit.ShortTonForce"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Force.FromTonnesForce(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Force"/> from <see cref="F:UnitsNet.Units.ForceUnit.TonneForce"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Force.From(UnitsNet.QuantityValue,UnitsNet.Units.ForceUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ForceUnit" /> to <see cref="T:UnitsNet.Force" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Force unit value.</returns>
        </member>
        <member name="M:UnitsNet.Force.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Force.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Force.TryParse(System.String,UnitsNet.Force@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Force.TryParse(System.String,System.IFormatProvider,UnitsNet.Force@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Force.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Force.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Force.TryParseUnit(System.String,UnitsNet.Units.ForceUnit@)">
            <inheritdoc cref="M:UnitsNet.Force.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ForceUnit@)"/>
        </member>
        <member name="M:UnitsNet.Force.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ForceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Force.op_UnaryNegation(UnitsNet.Force)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Force.op_Addition(UnitsNet.Force,UnitsNet.Force)">
            <summary>Get <see cref="T:UnitsNet.Force"/> from adding two <see cref="T:UnitsNet.Force"/>.</summary>
        </member>
        <member name="M:UnitsNet.Force.op_Subtraction(UnitsNet.Force,UnitsNet.Force)">
            <summary>Get <see cref="T:UnitsNet.Force"/> from subtracting two <see cref="T:UnitsNet.Force"/>.</summary>
        </member>
        <member name="M:UnitsNet.Force.op_Multiply(System.Double,UnitsNet.Force)">
            <summary>Get <see cref="T:UnitsNet.Force"/> from multiplying value and <see cref="T:UnitsNet.Force"/>.</summary>
        </member>
        <member name="M:UnitsNet.Force.op_Multiply(UnitsNet.Force,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Force"/> from multiplying value and <see cref="T:UnitsNet.Force"/>.</summary>
        </member>
        <member name="M:UnitsNet.Force.op_Division(UnitsNet.Force,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Force"/> from dividing <see cref="T:UnitsNet.Force"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Force.op_Division(UnitsNet.Force,UnitsNet.Force)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Force"/> by <see cref="T:UnitsNet.Force"/>.</summary>
        </member>
        <member name="M:UnitsNet.Force.op_LessThanOrEqual(UnitsNet.Force,UnitsNet.Force)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Force.op_GreaterThanOrEqual(UnitsNet.Force,UnitsNet.Force)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Force.op_LessThan(UnitsNet.Force,UnitsNet.Force)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Force.op_GreaterThan(UnitsNet.Force,UnitsNet.Force)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Force.op_Equality(UnitsNet.Force,UnitsNet.Force)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Force.Equals(UnitsNet.Force,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Force.op_Inequality(UnitsNet.Force,UnitsNet.Force)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Force.Equals(UnitsNet.Force,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Force.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Force.CompareTo(UnitsNet.Force)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Force.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Force.Equals(UnitsNet.Force,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Force.Equals(UnitsNet.Force)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Force.Equals(UnitsNet.Force,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Force.Equals(UnitsNet.Force,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Force within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Force.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Force.</returns>
        </member>
        <member name="M:UnitsNet.Force.As(UnitsNet.Units.ForceUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Force.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Force.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Force.ToUnit(UnitsNet.Units.ForceUnit)">
            <summary>
                Converts this Force to another Force with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Force with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Force.ToUnit(UnitsNet.Units.ForceUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Force to another Force using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Force with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Force.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Force.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Force.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Force.UnitsNet#IQuantity{UnitsNet#Units#ForceUnit}#ToUnit(UnitsNet.Units.ForceUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Force.UnitsNet#IQuantity{UnitsNet#Units#ForceUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Force.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Force.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Force.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Force.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Force.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Force.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.ForceChangeRate">
            <inheritdoc />
            <summary>
                Force change rate is the ratio of the force change to the time during which the change occurred (value of force changes per unit time).
            </summary>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.op_Multiply(UnitsNet.ForceChangeRate,UnitsNet.Duration)">
            <summary>Get <see cref="T:UnitsNet.Force"/> from <see cref="T:UnitsNet.ForcePerLength"/> multiplied by <see cref="T:UnitsNet.Length"/>.</summary>
        </member>
        <member name="F:UnitsNet.ForceChangeRate._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ForceChangeRate._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.#ctor(System.Double,UnitsNet.Units.ForceChangeRateUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.ForceChangeRate" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ForceChangeRate.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.BaseUnit">
            <summary>
                The base unit of ForceChangeRate, which is NewtonPerSecond. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.MaxValue">
            <summary>
            Represents the largest possible value of ForceChangeRate
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.MinValue">
            <summary>
            Represents the smallest possible value of ForceChangeRate
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ForceChangeRate.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.Units">
            <summary>
                All units of measurement for the ForceChangeRate quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit NewtonPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ForceChangeRate.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ForceChangeRate.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.Type">
            <summary>
                The <see cref="P:UnitsNet.ForceChangeRate.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ForceChangeRate.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.CentinewtonsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceChangeRateUnit.CentinewtonPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.DecanewtonsPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceChangeRateUnit.DecanewtonPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.DecanewtonsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceChangeRateUnit.DecanewtonPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.DecinewtonsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceChangeRateUnit.DecinewtonPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.KilonewtonsPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceChangeRateUnit.KilonewtonPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.KilonewtonsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceChangeRateUnit.KilonewtonPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.KilopoundsForcePerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceChangeRateUnit.KilopoundForcePerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.KilopoundsForcePerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceChangeRateUnit.KilopoundForcePerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.MicronewtonsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceChangeRateUnit.MicronewtonPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.MillinewtonsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceChangeRateUnit.MillinewtonPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.NanonewtonsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceChangeRateUnit.NanonewtonPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.NewtonsPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceChangeRateUnit.NewtonPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.NewtonsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceChangeRateUnit.NewtonPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.PoundsForcePerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceChangeRateUnit.PoundForcePerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.PoundsForcePerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForceChangeRateUnit.PoundForcePerSecond"/>
            </summary>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.GetAbbreviation(UnitsNet.Units.ForceChangeRateUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.GetAbbreviation(UnitsNet.Units.ForceChangeRateUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.FromCentinewtonsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForceChangeRate"/> from <see cref="F:UnitsNet.Units.ForceChangeRateUnit.CentinewtonPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.FromDecanewtonsPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForceChangeRate"/> from <see cref="F:UnitsNet.Units.ForceChangeRateUnit.DecanewtonPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.FromDecanewtonsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForceChangeRate"/> from <see cref="F:UnitsNet.Units.ForceChangeRateUnit.DecanewtonPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.FromDecinewtonsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForceChangeRate"/> from <see cref="F:UnitsNet.Units.ForceChangeRateUnit.DecinewtonPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.FromKilonewtonsPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForceChangeRate"/> from <see cref="F:UnitsNet.Units.ForceChangeRateUnit.KilonewtonPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.FromKilonewtonsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForceChangeRate"/> from <see cref="F:UnitsNet.Units.ForceChangeRateUnit.KilonewtonPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.FromKilopoundsForcePerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForceChangeRate"/> from <see cref="F:UnitsNet.Units.ForceChangeRateUnit.KilopoundForcePerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.FromKilopoundsForcePerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForceChangeRate"/> from <see cref="F:UnitsNet.Units.ForceChangeRateUnit.KilopoundForcePerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.FromMicronewtonsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForceChangeRate"/> from <see cref="F:UnitsNet.Units.ForceChangeRateUnit.MicronewtonPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.FromMillinewtonsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForceChangeRate"/> from <see cref="F:UnitsNet.Units.ForceChangeRateUnit.MillinewtonPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.FromNanonewtonsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForceChangeRate"/> from <see cref="F:UnitsNet.Units.ForceChangeRateUnit.NanonewtonPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.FromNewtonsPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForceChangeRate"/> from <see cref="F:UnitsNet.Units.ForceChangeRateUnit.NewtonPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.FromNewtonsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForceChangeRate"/> from <see cref="F:UnitsNet.Units.ForceChangeRateUnit.NewtonPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.FromPoundsForcePerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForceChangeRate"/> from <see cref="F:UnitsNet.Units.ForceChangeRateUnit.PoundForcePerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.FromPoundsForcePerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForceChangeRate"/> from <see cref="F:UnitsNet.Units.ForceChangeRateUnit.PoundForcePerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.From(UnitsNet.QuantityValue,UnitsNet.Units.ForceChangeRateUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ForceChangeRateUnit" /> to <see cref="T:UnitsNet.ForceChangeRate" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ForceChangeRate unit value.</returns>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.TryParse(System.String,UnitsNet.ForceChangeRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.TryParse(System.String,System.IFormatProvider,UnitsNet.ForceChangeRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.TryParseUnit(System.String,UnitsNet.Units.ForceChangeRateUnit@)">
            <inheritdoc cref="M:UnitsNet.ForceChangeRate.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ForceChangeRateUnit@)"/>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ForceChangeRateUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.op_UnaryNegation(UnitsNet.ForceChangeRate)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.op_Addition(UnitsNet.ForceChangeRate,UnitsNet.ForceChangeRate)">
            <summary>Get <see cref="T:UnitsNet.ForceChangeRate"/> from adding two <see cref="T:UnitsNet.ForceChangeRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.op_Subtraction(UnitsNet.ForceChangeRate,UnitsNet.ForceChangeRate)">
            <summary>Get <see cref="T:UnitsNet.ForceChangeRate"/> from subtracting two <see cref="T:UnitsNet.ForceChangeRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.op_Multiply(System.Double,UnitsNet.ForceChangeRate)">
            <summary>Get <see cref="T:UnitsNet.ForceChangeRate"/> from multiplying value and <see cref="T:UnitsNet.ForceChangeRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.op_Multiply(UnitsNet.ForceChangeRate,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ForceChangeRate"/> from multiplying value and <see cref="T:UnitsNet.ForceChangeRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.op_Division(UnitsNet.ForceChangeRate,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ForceChangeRate"/> from dividing <see cref="T:UnitsNet.ForceChangeRate"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.op_Division(UnitsNet.ForceChangeRate,UnitsNet.ForceChangeRate)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.ForceChangeRate"/> by <see cref="T:UnitsNet.ForceChangeRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.op_LessThanOrEqual(UnitsNet.ForceChangeRate,UnitsNet.ForceChangeRate)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.op_GreaterThanOrEqual(UnitsNet.ForceChangeRate,UnitsNet.ForceChangeRate)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.op_LessThan(UnitsNet.ForceChangeRate,UnitsNet.ForceChangeRate)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.op_GreaterThan(UnitsNet.ForceChangeRate,UnitsNet.ForceChangeRate)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.op_Equality(UnitsNet.ForceChangeRate,UnitsNet.ForceChangeRate)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ForceChangeRate.Equals(UnitsNet.ForceChangeRate,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.op_Inequality(UnitsNet.ForceChangeRate,UnitsNet.ForceChangeRate)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ForceChangeRate.Equals(UnitsNet.ForceChangeRate,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ForceChangeRate.CompareTo(UnitsNet.ForceChangeRate)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ForceChangeRate.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ForceChangeRate.Equals(UnitsNet.ForceChangeRate,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.Equals(UnitsNet.ForceChangeRate)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ForceChangeRate.Equals(UnitsNet.ForceChangeRate,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.Equals(UnitsNet.ForceChangeRate,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ForceChangeRate within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ForceChangeRate.</returns>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.As(UnitsNet.Units.ForceChangeRateUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ForceChangeRate.ToUnit(UnitsNet.Units.ForceChangeRateUnit)">
            <summary>
                Converts this ForceChangeRate to another ForceChangeRate with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A ForceChangeRate with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.ToUnit(UnitsNet.Units.ForceChangeRateUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this ForceChangeRate to another ForceChangeRate using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A ForceChangeRate with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ForceChangeRate.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ForceChangeRate.UnitsNet#IQuantity{UnitsNet#Units#ForceChangeRateUnit}#ToUnit(UnitsNet.Units.ForceChangeRateUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ForceChangeRate.UnitsNet#IQuantity{UnitsNet#Units#ForceChangeRateUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ForceChangeRate.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.ForcePerLength">
            <inheritdoc />
            <summary>
                The magnitude of force per unit length.
            </summary>
        </member>
        <member name="M:UnitsNet.ForcePerLength.op_Multiply(UnitsNet.ForcePerLength,UnitsNet.Length)">
            <summary>Get <see cref="T:UnitsNet.Force"/> from <see cref="T:UnitsNet.ForcePerLength"/> multiplied by <see cref="T:UnitsNet.Length"/>.</summary>
        </member>
        <member name="M:UnitsNet.ForcePerLength.op_Division(UnitsNet.Force,UnitsNet.ForcePerLength)">
            <summary>Get <see cref="T:UnitsNet.Length"/> from <see cref="T:UnitsNet.Force"/> divided by <see cref="T:UnitsNet.ForcePerLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.ForcePerLength.op_Division(UnitsNet.ForcePerLength,UnitsNet.Length)">
            <summary>Get <see cref="T:UnitsNet.Pressure"/> from <see cref="T:UnitsNet.ForcePerLength"/> divided by <see cref="T:UnitsNet.Length"/>.</summary>
        </member>
        <member name="M:UnitsNet.ForcePerLength.op_Multiply(UnitsNet.ForcePerLength,UnitsNet.Area)">
            <summary>Get <see cref="T:UnitsNet.Torque"/> from <see cref="T:UnitsNet.ForcePerLength"/> multiplied by <see cref="T:UnitsNet.Area"/>.</summary>
        </member>
        <member name="M:UnitsNet.ForcePerLength.op_Multiply(UnitsNet.ForcePerLength,UnitsNet.ReciprocalLength)">
            <summary>Get <see cref="T:UnitsNet.Pressure"/> from <see cref="T:UnitsNet.ForcePerLength"/> multiplied by <see cref="T:UnitsNet.ReciprocalLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.ForcePerLength.op_Division(UnitsNet.ForcePerLength,UnitsNet.ReciprocalLength)">
            <summary>Get <see cref="T:UnitsNet.Force"/> from <see cref="T:UnitsNet.ForcePerLength"/> divided by <see cref="T:UnitsNet.ReciprocalLength"/>.</summary>
        </member>
        <member name="F:UnitsNet.ForcePerLength._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ForcePerLength._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ForcePerLength.#ctor(System.Double,UnitsNet.Units.ForcePerLengthUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.ForcePerLength.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.ForcePerLength" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ForcePerLength.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ForcePerLength.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.BaseUnit">
            <summary>
                The base unit of ForcePerLength, which is NewtonPerMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.MaxValue">
            <summary>
            Represents the largest possible value of ForcePerLength
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.MinValue">
            <summary>
            Represents the smallest possible value of ForcePerLength
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ForcePerLength.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.Units">
            <summary>
                All units of measurement for the ForcePerLength quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit NewtonPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ForcePerLength.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ForcePerLength.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ForcePerLength.Type">
            <summary>
                The <see cref="P:UnitsNet.ForcePerLength.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ForcePerLength.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.CentinewtonsPerCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.CentinewtonPerCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.CentinewtonsPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.CentinewtonPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.CentinewtonsPerMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.CentinewtonPerMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.DecanewtonsPerCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.DecanewtonPerCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.DecanewtonsPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.DecanewtonPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.DecanewtonsPerMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.DecanewtonPerMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.DecinewtonsPerCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.DecinewtonPerCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.DecinewtonsPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.DecinewtonPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.DecinewtonsPerMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.DecinewtonPerMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.KilogramsForcePerCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.KilogramForcePerCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.KilogramsForcePerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.KilogramForcePerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.KilogramsForcePerMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.KilogramForcePerMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.KilonewtonsPerCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.KilonewtonPerCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.KilonewtonsPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.KilonewtonPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.KilonewtonsPerMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.KilonewtonPerMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.KilopoundsForcePerFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.KilopoundForcePerFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.KilopoundsForcePerInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.KilopoundForcePerInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.MeganewtonsPerCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.MeganewtonPerCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.MeganewtonsPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.MeganewtonPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.MeganewtonsPerMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.MeganewtonPerMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.MicronewtonsPerCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.MicronewtonPerCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.MicronewtonsPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.MicronewtonPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.MicronewtonsPerMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.MicronewtonPerMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.MillinewtonsPerCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.MillinewtonPerCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.MillinewtonsPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.MillinewtonPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.MillinewtonsPerMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.MillinewtonPerMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.NanonewtonsPerCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.NanonewtonPerCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.NanonewtonsPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.NanonewtonPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.NanonewtonsPerMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.NanonewtonPerMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.NewtonsPerCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.NewtonPerCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.NewtonsPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.NewtonPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.NewtonsPerMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.NewtonPerMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.PoundsForcePerFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.PoundForcePerFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.PoundsForcePerInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.PoundForcePerInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.PoundsForcePerYard">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.PoundForcePerYard"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.TonnesForcePerCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.TonneForcePerCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.TonnesForcePerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.TonneForcePerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.TonnesForcePerMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ForcePerLengthUnit.TonneForcePerMillimeter"/>
            </summary>
        </member>
        <member name="M:UnitsNet.ForcePerLength.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.ForcePerLength.GetAbbreviation(UnitsNet.Units.ForcePerLengthUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ForcePerLength.GetAbbreviation(UnitsNet.Units.ForcePerLengthUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromCentinewtonsPerCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.CentinewtonPerCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromCentinewtonsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.CentinewtonPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromCentinewtonsPerMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.CentinewtonPerMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromDecanewtonsPerCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.DecanewtonPerCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromDecanewtonsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.DecanewtonPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromDecanewtonsPerMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.DecanewtonPerMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromDecinewtonsPerCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.DecinewtonPerCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromDecinewtonsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.DecinewtonPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromDecinewtonsPerMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.DecinewtonPerMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromKilogramsForcePerCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.KilogramForcePerCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromKilogramsForcePerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.KilogramForcePerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromKilogramsForcePerMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.KilogramForcePerMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromKilonewtonsPerCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.KilonewtonPerCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromKilonewtonsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.KilonewtonPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromKilonewtonsPerMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.KilonewtonPerMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromKilopoundsForcePerFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.KilopoundForcePerFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromKilopoundsForcePerInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.KilopoundForcePerInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromMeganewtonsPerCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.MeganewtonPerCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromMeganewtonsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.MeganewtonPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromMeganewtonsPerMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.MeganewtonPerMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromMicronewtonsPerCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.MicronewtonPerCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromMicronewtonsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.MicronewtonPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromMicronewtonsPerMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.MicronewtonPerMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromMillinewtonsPerCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.MillinewtonPerCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromMillinewtonsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.MillinewtonPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromMillinewtonsPerMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.MillinewtonPerMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromNanonewtonsPerCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.NanonewtonPerCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromNanonewtonsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.NanonewtonPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromNanonewtonsPerMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.NanonewtonPerMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromNewtonsPerCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.NewtonPerCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromNewtonsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.NewtonPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromNewtonsPerMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.NewtonPerMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromPoundsForcePerFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.PoundForcePerFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromPoundsForcePerInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.PoundForcePerInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromPoundsForcePerYard(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.PoundForcePerYard"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromTonnesForcePerCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.TonneForcePerCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromTonnesForcePerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.TonneForcePerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromTonnesForcePerMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="F:UnitsNet.Units.ForcePerLengthUnit.TonneForcePerMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.From(UnitsNet.QuantityValue,UnitsNet.Units.ForcePerLengthUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ForcePerLengthUnit" /> to <see cref="T:UnitsNet.ForcePerLength" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ForcePerLength unit value.</returns>
        </member>
        <member name="M:UnitsNet.ForcePerLength.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ForcePerLength.TryParse(System.String,UnitsNet.ForcePerLength@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ForcePerLength.TryParse(System.String,System.IFormatProvider,UnitsNet.ForcePerLength@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ForcePerLength.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.TryParseUnit(System.String,UnitsNet.Units.ForcePerLengthUnit@)">
            <inheritdoc cref="M:UnitsNet.ForcePerLength.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ForcePerLengthUnit@)"/>
        </member>
        <member name="M:UnitsNet.ForcePerLength.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ForcePerLengthUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ForcePerLength.op_UnaryNegation(UnitsNet.ForcePerLength)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.ForcePerLength.op_Addition(UnitsNet.ForcePerLength,UnitsNet.ForcePerLength)">
            <summary>Get <see cref="T:UnitsNet.ForcePerLength"/> from adding two <see cref="T:UnitsNet.ForcePerLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.ForcePerLength.op_Subtraction(UnitsNet.ForcePerLength,UnitsNet.ForcePerLength)">
            <summary>Get <see cref="T:UnitsNet.ForcePerLength"/> from subtracting two <see cref="T:UnitsNet.ForcePerLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.ForcePerLength.op_Multiply(System.Double,UnitsNet.ForcePerLength)">
            <summary>Get <see cref="T:UnitsNet.ForcePerLength"/> from multiplying value and <see cref="T:UnitsNet.ForcePerLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.ForcePerLength.op_Multiply(UnitsNet.ForcePerLength,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ForcePerLength"/> from multiplying value and <see cref="T:UnitsNet.ForcePerLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.ForcePerLength.op_Division(UnitsNet.ForcePerLength,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ForcePerLength"/> from dividing <see cref="T:UnitsNet.ForcePerLength"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.ForcePerLength.op_Division(UnitsNet.ForcePerLength,UnitsNet.ForcePerLength)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.ForcePerLength"/> by <see cref="T:UnitsNet.ForcePerLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.ForcePerLength.op_LessThanOrEqual(UnitsNet.ForcePerLength,UnitsNet.ForcePerLength)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ForcePerLength.op_GreaterThanOrEqual(UnitsNet.ForcePerLength,UnitsNet.ForcePerLength)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ForcePerLength.op_LessThan(UnitsNet.ForcePerLength,UnitsNet.ForcePerLength)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.ForcePerLength.op_GreaterThan(UnitsNet.ForcePerLength,UnitsNet.ForcePerLength)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.ForcePerLength.op_Equality(UnitsNet.ForcePerLength,UnitsNet.ForcePerLength)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ForcePerLength.Equals(UnitsNet.ForcePerLength,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ForcePerLength.op_Inequality(UnitsNet.ForcePerLength,UnitsNet.ForcePerLength)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ForcePerLength.Equals(UnitsNet.ForcePerLength,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ForcePerLength.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ForcePerLength.CompareTo(UnitsNet.ForcePerLength)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ForcePerLength.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ForcePerLength.Equals(UnitsNet.ForcePerLength,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ForcePerLength.Equals(UnitsNet.ForcePerLength)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ForcePerLength.Equals(UnitsNet.ForcePerLength,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ForcePerLength.Equals(UnitsNet.ForcePerLength,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ForcePerLength within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ForcePerLength.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ForcePerLength.</returns>
        </member>
        <member name="M:UnitsNet.ForcePerLength.As(UnitsNet.Units.ForcePerLengthUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ForcePerLength.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ForcePerLength.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ForcePerLength.ToUnit(UnitsNet.Units.ForcePerLengthUnit)">
            <summary>
                Converts this ForcePerLength to another ForcePerLength with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A ForcePerLength with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ForcePerLength.ToUnit(UnitsNet.Units.ForcePerLengthUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this ForcePerLength to another ForcePerLength using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A ForcePerLength with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ForcePerLength.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ForcePerLength.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ForcePerLength.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ForcePerLength.UnitsNet#IQuantity{UnitsNet#Units#ForcePerLengthUnit}#ToUnit(UnitsNet.Units.ForcePerLengthUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ForcePerLength.UnitsNet#IQuantity{UnitsNet#Units#ForcePerLengthUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ForcePerLength.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ForcePerLength.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ForcePerLength.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ForcePerLength.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ForcePerLength.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.ForcePerLength.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.HeatFlux">
            <inheritdoc />
            <summary>
                Heat flux is the flow of energy per unit of area per unit of time
            </summary>
        </member>
        <member name="M:UnitsNet.HeatFlux.op_Multiply(UnitsNet.HeatFlux,UnitsNet.Area)">
            <summary>Get <see cref="T:UnitsNet.Power"/> from <see cref="T:UnitsNet.HeatFlux"/> times <see cref="T:UnitsNet.Area"/>.</summary>
        </member>
        <member name="F:UnitsNet.HeatFlux._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.HeatFlux._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.HeatFlux.#ctor(System.Double,UnitsNet.Units.HeatFluxUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.HeatFlux.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.HeatFlux" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.HeatFlux.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.HeatFlux.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.BaseUnit">
            <summary>
                The base unit of HeatFlux, which is WattPerSquareMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.MaxValue">
            <summary>
            Represents the largest possible value of HeatFlux
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.MinValue">
            <summary>
            Represents the smallest possible value of HeatFlux
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.HeatFlux.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.Units">
            <summary>
                All units of measurement for the HeatFlux quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit WattPerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.HeatFlux.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.HeatFlux.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.HeatFlux.Type">
            <summary>
                The <see cref="P:UnitsNet.HeatFlux.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.HeatFlux.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.BtusPerHourSquareFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.HeatFluxUnit.BtuPerHourSquareFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.BtusPerMinuteSquareFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.HeatFluxUnit.BtuPerMinuteSquareFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.BtusPerSecondSquareFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.HeatFluxUnit.BtuPerSecondSquareFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.BtusPerSecondSquareInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.HeatFluxUnit.BtuPerSecondSquareInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.CaloriesPerSecondSquareCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.HeatFluxUnit.CaloriePerSecondSquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.CentiwattsPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.HeatFluxUnit.CentiwattPerSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.DeciwattsPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.HeatFluxUnit.DeciwattPerSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.KilocaloriesPerHourSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.HeatFluxUnit.KilocaloriePerHourSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.KilocaloriesPerSecondSquareCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.HeatFluxUnit.KilocaloriePerSecondSquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.KilowattsPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.HeatFluxUnit.KilowattPerSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.MicrowattsPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.HeatFluxUnit.MicrowattPerSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.MilliwattsPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.HeatFluxUnit.MilliwattPerSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.NanowattsPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.HeatFluxUnit.NanowattPerSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.PoundsForcePerFootSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.HeatFluxUnit.PoundForcePerFootSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.PoundsPerSecondCubed">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.HeatFluxUnit.PoundPerSecondCubed"/>
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.WattsPerSquareFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.HeatFluxUnit.WattPerSquareFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.WattsPerSquareInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.HeatFluxUnit.WattPerSquareInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.WattsPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.HeatFluxUnit.WattPerSquareMeter"/>
            </summary>
        </member>
        <member name="M:UnitsNet.HeatFlux.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.HeatFlux.GetAbbreviation(UnitsNet.Units.HeatFluxUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.HeatFlux.GetAbbreviation(UnitsNet.Units.HeatFluxUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromBtusPerHourSquareFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.HeatFlux"/> from <see cref="F:UnitsNet.Units.HeatFluxUnit.BtuPerHourSquareFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromBtusPerMinuteSquareFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.HeatFlux"/> from <see cref="F:UnitsNet.Units.HeatFluxUnit.BtuPerMinuteSquareFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromBtusPerSecondSquareFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.HeatFlux"/> from <see cref="F:UnitsNet.Units.HeatFluxUnit.BtuPerSecondSquareFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromBtusPerSecondSquareInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.HeatFlux"/> from <see cref="F:UnitsNet.Units.HeatFluxUnit.BtuPerSecondSquareInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromCaloriesPerSecondSquareCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.HeatFlux"/> from <see cref="F:UnitsNet.Units.HeatFluxUnit.CaloriePerSecondSquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromCentiwattsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.HeatFlux"/> from <see cref="F:UnitsNet.Units.HeatFluxUnit.CentiwattPerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromDeciwattsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.HeatFlux"/> from <see cref="F:UnitsNet.Units.HeatFluxUnit.DeciwattPerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromKilocaloriesPerHourSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.HeatFlux"/> from <see cref="F:UnitsNet.Units.HeatFluxUnit.KilocaloriePerHourSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromKilocaloriesPerSecondSquareCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.HeatFlux"/> from <see cref="F:UnitsNet.Units.HeatFluxUnit.KilocaloriePerSecondSquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromKilowattsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.HeatFlux"/> from <see cref="F:UnitsNet.Units.HeatFluxUnit.KilowattPerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromMicrowattsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.HeatFlux"/> from <see cref="F:UnitsNet.Units.HeatFluxUnit.MicrowattPerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromMilliwattsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.HeatFlux"/> from <see cref="F:UnitsNet.Units.HeatFluxUnit.MilliwattPerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromNanowattsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.HeatFlux"/> from <see cref="F:UnitsNet.Units.HeatFluxUnit.NanowattPerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromPoundsForcePerFootSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.HeatFlux"/> from <see cref="F:UnitsNet.Units.HeatFluxUnit.PoundForcePerFootSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromPoundsPerSecondCubed(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.HeatFlux"/> from <see cref="F:UnitsNet.Units.HeatFluxUnit.PoundPerSecondCubed"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromWattsPerSquareFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.HeatFlux"/> from <see cref="F:UnitsNet.Units.HeatFluxUnit.WattPerSquareFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromWattsPerSquareInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.HeatFlux"/> from <see cref="F:UnitsNet.Units.HeatFluxUnit.WattPerSquareInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromWattsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.HeatFlux"/> from <see cref="F:UnitsNet.Units.HeatFluxUnit.WattPerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.From(UnitsNet.QuantityValue,UnitsNet.Units.HeatFluxUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.HeatFluxUnit" /> to <see cref="T:UnitsNet.HeatFlux" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>HeatFlux unit value.</returns>
        </member>
        <member name="M:UnitsNet.HeatFlux.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.HeatFlux.TryParse(System.String,UnitsNet.HeatFlux@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.HeatFlux.TryParse(System.String,System.IFormatProvider,UnitsNet.HeatFlux@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.HeatFlux.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.TryParseUnit(System.String,UnitsNet.Units.HeatFluxUnit@)">
            <inheritdoc cref="M:UnitsNet.HeatFlux.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.HeatFluxUnit@)"/>
        </member>
        <member name="M:UnitsNet.HeatFlux.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.HeatFluxUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.HeatFlux.op_UnaryNegation(UnitsNet.HeatFlux)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.HeatFlux.op_Addition(UnitsNet.HeatFlux,UnitsNet.HeatFlux)">
            <summary>Get <see cref="T:UnitsNet.HeatFlux"/> from adding two <see cref="T:UnitsNet.HeatFlux"/>.</summary>
        </member>
        <member name="M:UnitsNet.HeatFlux.op_Subtraction(UnitsNet.HeatFlux,UnitsNet.HeatFlux)">
            <summary>Get <see cref="T:UnitsNet.HeatFlux"/> from subtracting two <see cref="T:UnitsNet.HeatFlux"/>.</summary>
        </member>
        <member name="M:UnitsNet.HeatFlux.op_Multiply(System.Double,UnitsNet.HeatFlux)">
            <summary>Get <see cref="T:UnitsNet.HeatFlux"/> from multiplying value and <see cref="T:UnitsNet.HeatFlux"/>.</summary>
        </member>
        <member name="M:UnitsNet.HeatFlux.op_Multiply(UnitsNet.HeatFlux,System.Double)">
            <summary>Get <see cref="T:UnitsNet.HeatFlux"/> from multiplying value and <see cref="T:UnitsNet.HeatFlux"/>.</summary>
        </member>
        <member name="M:UnitsNet.HeatFlux.op_Division(UnitsNet.HeatFlux,System.Double)">
            <summary>Get <see cref="T:UnitsNet.HeatFlux"/> from dividing <see cref="T:UnitsNet.HeatFlux"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.HeatFlux.op_Division(UnitsNet.HeatFlux,UnitsNet.HeatFlux)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.HeatFlux"/> by <see cref="T:UnitsNet.HeatFlux"/>.</summary>
        </member>
        <member name="M:UnitsNet.HeatFlux.op_LessThanOrEqual(UnitsNet.HeatFlux,UnitsNet.HeatFlux)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.HeatFlux.op_GreaterThanOrEqual(UnitsNet.HeatFlux,UnitsNet.HeatFlux)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.HeatFlux.op_LessThan(UnitsNet.HeatFlux,UnitsNet.HeatFlux)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.HeatFlux.op_GreaterThan(UnitsNet.HeatFlux,UnitsNet.HeatFlux)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.HeatFlux.op_Equality(UnitsNet.HeatFlux,UnitsNet.HeatFlux)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.HeatFlux.Equals(UnitsNet.HeatFlux,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.HeatFlux.op_Inequality(UnitsNet.HeatFlux,UnitsNet.HeatFlux)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.HeatFlux.Equals(UnitsNet.HeatFlux,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.HeatFlux.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.HeatFlux.CompareTo(UnitsNet.HeatFlux)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.HeatFlux.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.HeatFlux.Equals(UnitsNet.HeatFlux,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.HeatFlux.Equals(UnitsNet.HeatFlux)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.HeatFlux.Equals(UnitsNet.HeatFlux,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.HeatFlux.Equals(UnitsNet.HeatFlux,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another HeatFlux within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.HeatFlux.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current HeatFlux.</returns>
        </member>
        <member name="M:UnitsNet.HeatFlux.As(UnitsNet.Units.HeatFluxUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.HeatFlux.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.HeatFlux.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.HeatFlux.ToUnit(UnitsNet.Units.HeatFluxUnit)">
            <summary>
                Converts this HeatFlux to another HeatFlux with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A HeatFlux with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.HeatFlux.ToUnit(UnitsNet.Units.HeatFluxUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this HeatFlux to another HeatFlux using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A HeatFlux with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.HeatFlux.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.HeatFlux.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.HeatFlux.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.HeatFlux.UnitsNet#IQuantity{UnitsNet#Units#HeatFluxUnit}#ToUnit(UnitsNet.Units.HeatFluxUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.HeatFlux.UnitsNet#IQuantity{UnitsNet#Units#HeatFluxUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.HeatFlux.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.HeatFlux.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.HeatFlux.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.HeatFlux.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.HeatFlux.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.HeatFlux.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.KinematicViscosity">
            <inheritdoc />
            <summary>
                The viscosity of a fluid is a measure of its resistance to gradual deformation by shear stress or tensile stress.
            </summary>
            <remarks>
                http://en.wikipedia.org/wiki/Viscosity
            </remarks>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.op_Division(UnitsNet.KinematicViscosity,UnitsNet.Length)">
            <summary>Get <see cref="T:UnitsNet.Speed"/> from <see cref="T:UnitsNet.KinematicViscosity"/> divided by <see cref="T:UnitsNet.Length"/>.</summary>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.op_Multiply(UnitsNet.KinematicViscosity,System.TimeSpan)">
            <summary>Get <see cref="T:UnitsNet.Area"/> from <see cref="T:UnitsNet.KinematicViscosity"/> times <see cref="T:System.TimeSpan"/>.</summary>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.op_Multiply(System.TimeSpan,UnitsNet.KinematicViscosity)">
            <summary>Get <see cref="T:UnitsNet.Area"/> from <see cref="T:System.TimeSpan"/> times <see cref="T:UnitsNet.KinematicViscosity"/>.</summary>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.op_Multiply(UnitsNet.KinematicViscosity,UnitsNet.Duration)">
            <summary>Get <see cref="T:UnitsNet.Area"/> from <see cref="T:UnitsNet.KinematicViscosity"/> times <see cref="T:UnitsNet.Duration"/>.</summary>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.op_Multiply(UnitsNet.Duration,UnitsNet.KinematicViscosity)">
            <summary>Get <see cref="T:UnitsNet.Area"/> from <see cref="T:UnitsNet.Duration"/> times <see cref="T:UnitsNet.KinematicViscosity"/>.</summary>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.op_Multiply(UnitsNet.KinematicViscosity,UnitsNet.Density)">
            <summary>Get <see cref="T:UnitsNet.DynamicViscosity"/> from <see cref="T:UnitsNet.KinematicViscosity"/> times <see cref="T:UnitsNet.Density"/>.</summary>
        </member>
        <member name="F:UnitsNet.KinematicViscosity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.KinematicViscosity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.#ctor(System.Double,UnitsNet.Units.KinematicViscosityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.KinematicViscosity" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.KinematicViscosity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.BaseUnit">
            <summary>
                The base unit of KinematicViscosity, which is SquareMeterPerSecond. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.MaxValue">
            <summary>
            Represents the largest possible value of KinematicViscosity
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.MinValue">
            <summary>
            Represents the smallest possible value of KinematicViscosity
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.KinematicViscosity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.Units">
            <summary>
                All units of measurement for the KinematicViscosity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit SquareMeterPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.KinematicViscosity.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.KinematicViscosity.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.Type">
            <summary>
                The <see cref="P:UnitsNet.KinematicViscosity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.KinematicViscosity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.Centistokes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.KinematicViscosityUnit.Centistokes"/>
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.Decistokes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.KinematicViscosityUnit.Decistokes"/>
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.Kilostokes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.KinematicViscosityUnit.Kilostokes"/>
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.Microstokes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.KinematicViscosityUnit.Microstokes"/>
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.Millistokes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.KinematicViscosityUnit.Millistokes"/>
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.Nanostokes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.KinematicViscosityUnit.Nanostokes"/>
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.SquareFeetPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.KinematicViscosityUnit.SquareFootPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.SquareMetersPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.KinematicViscosityUnit.SquareMeterPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.Stokes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.KinematicViscosityUnit.Stokes"/>
            </summary>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.GetAbbreviation(UnitsNet.Units.KinematicViscosityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.GetAbbreviation(UnitsNet.Units.KinematicViscosityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.FromCentistokes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.KinematicViscosity"/> from <see cref="F:UnitsNet.Units.KinematicViscosityUnit.Centistokes"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.FromDecistokes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.KinematicViscosity"/> from <see cref="F:UnitsNet.Units.KinematicViscosityUnit.Decistokes"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.FromKilostokes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.KinematicViscosity"/> from <see cref="F:UnitsNet.Units.KinematicViscosityUnit.Kilostokes"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.FromMicrostokes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.KinematicViscosity"/> from <see cref="F:UnitsNet.Units.KinematicViscosityUnit.Microstokes"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.FromMillistokes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.KinematicViscosity"/> from <see cref="F:UnitsNet.Units.KinematicViscosityUnit.Millistokes"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.FromNanostokes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.KinematicViscosity"/> from <see cref="F:UnitsNet.Units.KinematicViscosityUnit.Nanostokes"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.FromSquareFeetPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.KinematicViscosity"/> from <see cref="F:UnitsNet.Units.KinematicViscosityUnit.SquareFootPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.FromSquareMetersPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.KinematicViscosity"/> from <see cref="F:UnitsNet.Units.KinematicViscosityUnit.SquareMeterPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.FromStokes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.KinematicViscosity"/> from <see cref="F:UnitsNet.Units.KinematicViscosityUnit.Stokes"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.From(UnitsNet.QuantityValue,UnitsNet.Units.KinematicViscosityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.KinematicViscosityUnit" /> to <see cref="T:UnitsNet.KinematicViscosity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>KinematicViscosity unit value.</returns>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.TryParse(System.String,UnitsNet.KinematicViscosity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.TryParse(System.String,System.IFormatProvider,UnitsNet.KinematicViscosity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.TryParseUnit(System.String,UnitsNet.Units.KinematicViscosityUnit@)">
            <inheritdoc cref="M:UnitsNet.KinematicViscosity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.KinematicViscosityUnit@)"/>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.KinematicViscosityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.op_UnaryNegation(UnitsNet.KinematicViscosity)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.op_Addition(UnitsNet.KinematicViscosity,UnitsNet.KinematicViscosity)">
            <summary>Get <see cref="T:UnitsNet.KinematicViscosity"/> from adding two <see cref="T:UnitsNet.KinematicViscosity"/>.</summary>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.op_Subtraction(UnitsNet.KinematicViscosity,UnitsNet.KinematicViscosity)">
            <summary>Get <see cref="T:UnitsNet.KinematicViscosity"/> from subtracting two <see cref="T:UnitsNet.KinematicViscosity"/>.</summary>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.op_Multiply(System.Double,UnitsNet.KinematicViscosity)">
            <summary>Get <see cref="T:UnitsNet.KinematicViscosity"/> from multiplying value and <see cref="T:UnitsNet.KinematicViscosity"/>.</summary>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.op_Multiply(UnitsNet.KinematicViscosity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.KinematicViscosity"/> from multiplying value and <see cref="T:UnitsNet.KinematicViscosity"/>.</summary>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.op_Division(UnitsNet.KinematicViscosity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.KinematicViscosity"/> from dividing <see cref="T:UnitsNet.KinematicViscosity"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.op_Division(UnitsNet.KinematicViscosity,UnitsNet.KinematicViscosity)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.KinematicViscosity"/> by <see cref="T:UnitsNet.KinematicViscosity"/>.</summary>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.op_LessThanOrEqual(UnitsNet.KinematicViscosity,UnitsNet.KinematicViscosity)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.op_GreaterThanOrEqual(UnitsNet.KinematicViscosity,UnitsNet.KinematicViscosity)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.op_LessThan(UnitsNet.KinematicViscosity,UnitsNet.KinematicViscosity)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.op_GreaterThan(UnitsNet.KinematicViscosity,UnitsNet.KinematicViscosity)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.op_Equality(UnitsNet.KinematicViscosity,UnitsNet.KinematicViscosity)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.KinematicViscosity.Equals(UnitsNet.KinematicViscosity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.op_Inequality(UnitsNet.KinematicViscosity,UnitsNet.KinematicViscosity)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.KinematicViscosity.Equals(UnitsNet.KinematicViscosity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.KinematicViscosity.CompareTo(UnitsNet.KinematicViscosity)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.KinematicViscosity.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.KinematicViscosity.Equals(UnitsNet.KinematicViscosity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.Equals(UnitsNet.KinematicViscosity)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.KinematicViscosity.Equals(UnitsNet.KinematicViscosity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.Equals(UnitsNet.KinematicViscosity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another KinematicViscosity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current KinematicViscosity.</returns>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.As(UnitsNet.Units.KinematicViscosityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.KinematicViscosity.ToUnit(UnitsNet.Units.KinematicViscosityUnit)">
            <summary>
                Converts this KinematicViscosity to another KinematicViscosity with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A KinematicViscosity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.ToUnit(UnitsNet.Units.KinematicViscosityUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this KinematicViscosity to another KinematicViscosity using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A KinematicViscosity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.KinematicViscosity.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.KinematicViscosity.UnitsNet#IQuantity{UnitsNet#Units#KinematicViscosityUnit}#ToUnit(UnitsNet.Units.KinematicViscosityUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.KinematicViscosity.UnitsNet#IQuantity{UnitsNet#Units#KinematicViscosityUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.KinematicViscosity.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.LapseRate">
            <inheritdoc />
            <summary>
                Lapse rate is the rate at which Earth's atmospheric temperature decreases with an increase in altitude, or increases with the decrease in altitude.
            </summary>
        </member>
        <member name="M:UnitsNet.LapseRate.op_Division(UnitsNet.TemperatureDelta,UnitsNet.LapseRate)">
            <summary>Get <see cref="T:UnitsNet.Length"/> from <see cref="T:UnitsNet.TemperatureDelta"/> divided by <see cref="T:UnitsNet.LapseRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.LapseRate.op_Multiply(UnitsNet.Length,UnitsNet.LapseRate)">
            <summary>Get <see cref="T:UnitsNet.TemperatureDelta"/> from <see cref="T:UnitsNet.Length"/> times <see cref="T:UnitsNet.LapseRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.LapseRate.op_Multiply(UnitsNet.LapseRate,UnitsNet.Length)">
            <summary>Get <see cref="T:UnitsNet.TemperatureDelta"/> from <see cref="T:UnitsNet.LapseRate"/> times <see cref="T:UnitsNet.Length"/>.</summary>
        </member>
        <member name="F:UnitsNet.LapseRate._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.LapseRate._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.LapseRate.#ctor(System.Double,UnitsNet.Units.LapseRateUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LapseRate.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.LapseRate.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.LapseRate" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.LapseRate.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.LapseRate.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.LapseRate.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LapseRate.BaseUnit">
            <summary>
                The base unit of LapseRate, which is DegreeCelsiusPerKilometer. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.LapseRate.MaxValue">
            <summary>
            Represents the largest possible value of LapseRate
            </summary>
        </member>
        <member name="P:UnitsNet.LapseRate.MinValue">
            <summary>
            Represents the smallest possible value of LapseRate
            </summary>
        </member>
        <member name="P:UnitsNet.LapseRate.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.LapseRate.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LapseRate.Units">
            <summary>
                All units of measurement for the LapseRate quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LapseRate.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit DegreeCelsiusPerKilometer.
            </summary>
        </member>
        <member name="P:UnitsNet.LapseRate.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.LapseRate.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.LapseRate.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.LapseRate.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.LapseRate.Type">
            <summary>
                The <see cref="P:UnitsNet.LapseRate.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LapseRate.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.LapseRate.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LapseRate.DegreesCelciusPerKilometer">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LapseRateUnit.DegreeCelsiusPerKilometer"/>
            </summary>
        </member>
        <member name="M:UnitsNet.LapseRate.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.LapseRate.GetAbbreviation(UnitsNet.Units.LapseRateUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.LapseRate.GetAbbreviation(UnitsNet.Units.LapseRateUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LapseRate.FromDegreesCelciusPerKilometer(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LapseRate"/> from <see cref="F:UnitsNet.Units.LapseRateUnit.DegreeCelsiusPerKilometer"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LapseRate.From(UnitsNet.QuantityValue,UnitsNet.Units.LapseRateUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.LapseRateUnit" /> to <see cref="T:UnitsNet.LapseRate" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>LapseRate unit value.</returns>
        </member>
        <member name="M:UnitsNet.LapseRate.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.LapseRate.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LapseRate.TryParse(System.String,UnitsNet.LapseRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.LapseRate.TryParse(System.String,System.IFormatProvider,UnitsNet.LapseRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LapseRate.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.LapseRate.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.LapseRate.TryParseUnit(System.String,UnitsNet.Units.LapseRateUnit@)">
            <inheritdoc cref="M:UnitsNet.LapseRate.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.LapseRateUnit@)"/>
        </member>
        <member name="M:UnitsNet.LapseRate.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.LapseRateUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LapseRate.op_UnaryNegation(UnitsNet.LapseRate)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.LapseRate.op_Addition(UnitsNet.LapseRate,UnitsNet.LapseRate)">
            <summary>Get <see cref="T:UnitsNet.LapseRate"/> from adding two <see cref="T:UnitsNet.LapseRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.LapseRate.op_Subtraction(UnitsNet.LapseRate,UnitsNet.LapseRate)">
            <summary>Get <see cref="T:UnitsNet.LapseRate"/> from subtracting two <see cref="T:UnitsNet.LapseRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.LapseRate.op_Multiply(System.Double,UnitsNet.LapseRate)">
            <summary>Get <see cref="T:UnitsNet.LapseRate"/> from multiplying value and <see cref="T:UnitsNet.LapseRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.LapseRate.op_Multiply(UnitsNet.LapseRate,System.Double)">
            <summary>Get <see cref="T:UnitsNet.LapseRate"/> from multiplying value and <see cref="T:UnitsNet.LapseRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.LapseRate.op_Division(UnitsNet.LapseRate,System.Double)">
            <summary>Get <see cref="T:UnitsNet.LapseRate"/> from dividing <see cref="T:UnitsNet.LapseRate"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.LapseRate.op_Division(UnitsNet.LapseRate,UnitsNet.LapseRate)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.LapseRate"/> by <see cref="T:UnitsNet.LapseRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.LapseRate.op_LessThanOrEqual(UnitsNet.LapseRate,UnitsNet.LapseRate)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.LapseRate.op_GreaterThanOrEqual(UnitsNet.LapseRate,UnitsNet.LapseRate)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.LapseRate.op_LessThan(UnitsNet.LapseRate,UnitsNet.LapseRate)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.LapseRate.op_GreaterThan(UnitsNet.LapseRate,UnitsNet.LapseRate)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.LapseRate.op_Equality(UnitsNet.LapseRate,UnitsNet.LapseRate)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.LapseRate.Equals(UnitsNet.LapseRate,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.LapseRate.op_Inequality(UnitsNet.LapseRate,UnitsNet.LapseRate)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.LapseRate.Equals(UnitsNet.LapseRate,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.LapseRate.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LapseRate.CompareTo(UnitsNet.LapseRate)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LapseRate.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.LapseRate.Equals(UnitsNet.LapseRate,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.LapseRate.Equals(UnitsNet.LapseRate)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.LapseRate.Equals(UnitsNet.LapseRate,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.LapseRate.Equals(UnitsNet.LapseRate,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another LapseRate within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.LapseRate.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current LapseRate.</returns>
        </member>
        <member name="M:UnitsNet.LapseRate.As(UnitsNet.Units.LapseRateUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.LapseRate.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.LapseRate.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LapseRate.ToUnit(UnitsNet.Units.LapseRateUnit)">
            <summary>
                Converts this LapseRate to another LapseRate with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A LapseRate with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.LapseRate.ToUnit(UnitsNet.Units.LapseRateUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this LapseRate to another LapseRate using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A LapseRate with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.LapseRate.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LapseRate.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.LapseRate.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LapseRate.UnitsNet#IQuantity{UnitsNet#Units#LapseRateUnit}#ToUnit(UnitsNet.Units.LapseRateUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LapseRate.UnitsNet#IQuantity{UnitsNet#Units#LapseRateUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LapseRate.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.LapseRate.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LapseRate.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LapseRate.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LapseRate.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.LapseRate.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Length">
            <inheritdoc />
            <summary>
                Many different units of length have been used around the world. The main units in modern use are U.S. customary units in the United States and the Metric system elsewhere. British Imperial units are still used for some purposes in the United Kingdom and some other countries. The metric system is sub-divided into SI and non-SI units.
            </summary>
        </member>
        <member name="M:UnitsNet.Length.Inverse">
            <summary>
            Calculates the inverse of this unit.
            </summary>
            <returns>The inverse of this unit as <see cref="T:UnitsNet.ReciprocalLength"/>.</returns>
        </member>
        <member name="P:UnitsNet.Length.FeetInches">
            <summary>
                Converts the length to a customary feet/inches combination.
            </summary>
        </member>
        <member name="M:UnitsNet.Length.FromFeetInches(System.Double,System.Double)">
            <summary>
                Get length from combination of feet and inches.
            </summary>
        </member>
        <member name="M:UnitsNet.Length.ParseFeetInches(System.String,System.IFormatProvider)">
            <summary>
            Special parsing of feet/inches strings, commonly used.
            2 feet 4 inches is sometimes denoted as 2′−4″, 2′ 4″, 2′4″, 2 ft 4 in.
            The apostrophe can be ′ and '.
            The double prime can be ″ and ".
            https://en.wikipedia.org/wiki/Foot_(unit)
            </summary>
            <param name="str"></param>
            <param name="formatProvider">Optionally specify the culture format numbers and localize unit abbreviations. Defaults to thread's culture.</param>
            <returns>Parsed length.</returns>
        </member>
        <member name="M:UnitsNet.Length.TryParseFeetInches(System.String,UnitsNet.Length@,System.IFormatProvider)">
            <summary>
            Special parsing of feet/inches strings, commonly used.
            2 feet 4 inches is sometimes denoted as 2′−4″, 2′ 4″, 2′4″, 2 ft 4 in.
            The apostrophe can be ′ and '.
            The double prime can be ″ and ".
            https://en.wikipedia.org/wiki/Foot_(unit)
            </summary>
            <param name="str"></param>
            <param name="result">Parsed length.</param>
            <param name="formatProvider">Optionally specify the culture format numbers and localize unit abbreviations. Defaults to thread's culture.</param>
        </member>
        <member name="M:UnitsNet.Length.op_Division(UnitsNet.Length,System.TimeSpan)">
            <summary>Get <see cref="T:UnitsNet.Speed"/> from <see cref="T:UnitsNet.Length"/> divided by <see cref="T:System.TimeSpan"/>.</summary>
        </member>
        <member name="M:UnitsNet.Length.op_Division(UnitsNet.Length,UnitsNet.Duration)">
            <summary>Get <see cref="T:UnitsNet.Speed"/> from <see cref="T:UnitsNet.Length"/> divided by <see cref="T:UnitsNet.Duration"/>.</summary>
        </member>
        <member name="M:UnitsNet.Length.op_Division(UnitsNet.Length,UnitsNet.Speed)">
            <summary>Get <see cref="T:UnitsNet.Duration"/> from <see cref="T:UnitsNet.Length"/> divided by <see cref="T:UnitsNet.Speed"/>.</summary>
        </member>
        <member name="M:UnitsNet.Length.op_Multiply(UnitsNet.Length,UnitsNet.Length)">
            <summary>Get <see cref="T:UnitsNet.Area"/> from <see cref="T:UnitsNet.Length"/> times <see cref="T:UnitsNet.Length"/>.</summary>
        </member>
        <member name="M:UnitsNet.Length.op_Multiply(UnitsNet.Area,UnitsNet.Length)">
            <summary>Get <see cref="T:UnitsNet.Volume"/> from <see cref="T:UnitsNet.Area"/> times <see cref="T:UnitsNet.Length"/>.</summary>
        </member>
        <member name="M:UnitsNet.Length.op_Multiply(UnitsNet.Length,UnitsNet.Area)">
            <summary>Get <see cref="T:UnitsNet.Volume"/> from <see cref="T:UnitsNet.Length"/> times <see cref="T:UnitsNet.Area"/>.</summary>
        </member>
        <member name="M:UnitsNet.Length.op_Multiply(UnitsNet.Force,UnitsNet.Length)">
            <summary>Get <see cref="T:UnitsNet.Torque"/> from <see cref="T:UnitsNet.Force"/> times <see cref="T:UnitsNet.Length"/>.</summary>
        </member>
        <member name="M:UnitsNet.Length.op_Multiply(UnitsNet.Length,UnitsNet.Force)">
            <summary>Get <see cref="T:UnitsNet.Torque"/> from <see cref="T:UnitsNet.Length"/> times <see cref="T:UnitsNet.Force"/>.</summary>
        </member>
        <member name="M:UnitsNet.Length.op_Multiply(UnitsNet.Length,UnitsNet.Speed)">
            <summary>Get <see cref="T:UnitsNet.KinematicViscosity"/> from <see cref="T:UnitsNet.Length"/> times <see cref="T:UnitsNet.Speed"/>.</summary>
        </member>
        <member name="M:UnitsNet.Length.op_Multiply(UnitsNet.Length,UnitsNet.SpecificWeight)">
            <summary>Get <see cref="T:UnitsNet.Pressure"/> from <see cref="T:UnitsNet.Length"/> times <see cref="T:UnitsNet.SpecificWeight"/>.</summary>
        </member>
        <member name="F:UnitsNet.Length._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Length._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Length.#ctor(System.Double,UnitsNet.Units.LengthUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Length.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Length" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Length.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Length.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.BaseUnit">
            <summary>
                The base unit of Length, which is Meter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.MaxValue">
            <summary>
            Represents the largest possible value of Length
            </summary>
        </member>
        <member name="P:UnitsNet.Length.MinValue">
            <summary>
            Represents the smallest possible value of Length
            </summary>
        </member>
        <member name="P:UnitsNet.Length.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Length.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Units">
            <summary>
                All units of measurement for the Length quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Meter.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Length.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Length.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Length.Type">
            <summary>
                The <see cref="P:UnitsNet.Length.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Length.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Angstroms">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Angstrom"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.AstronomicalUnits">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.AstronomicalUnit"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Centimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Centimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Chains">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Chain"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Decameters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Decameter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Decimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Decimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.DtpPicas">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.DtpPica"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.DtpPoints">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.DtpPoint"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Fathoms">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Fathom"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Feet">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Foot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Hands">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Hand"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Hectometers">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Hectometer"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Inches">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Inch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.KilolightYears">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.KilolightYear"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Kilometers">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Kilometer"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Kiloparsecs">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Kiloparsec"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.LightYears">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.LightYear"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.MegalightYears">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.MegalightYear"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Megaparsecs">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Megaparsec"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Meters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Meter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Microinches">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Microinch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Micrometers">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Micrometer"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Mils">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Mil"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Miles">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Mile"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Millimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Millimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Nanometers">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Nanometer"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.NauticalMiles">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.NauticalMile"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Parsecs">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Parsec"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.PrinterPicas">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.PrinterPica"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.PrinterPoints">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.PrinterPoint"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Shackles">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Shackle"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.SolarRadiuses">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.SolarRadius"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Twips">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Twip"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.UsSurveyFeet">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.UsSurveyFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Yards">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Yard"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Length.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Length.GetAbbreviation(UnitsNet.Units.LengthUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Length.GetAbbreviation(UnitsNet.Units.LengthUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Length.FromAngstroms(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Angstrom"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromAstronomicalUnits(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.AstronomicalUnit"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Centimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromChains(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Chain"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromDecameters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Decameter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromDecimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Decimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromDtpPicas(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.DtpPica"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromDtpPoints(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.DtpPoint"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromFathoms(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Fathom"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromFeet(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Foot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromHands(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Hand"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromHectometers(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Hectometer"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromInches(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Inch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromKilolightYears(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.KilolightYear"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromKilometers(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Kilometer"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromKiloparsecs(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Kiloparsec"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromLightYears(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.LightYear"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromMegalightYears(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.MegalightYear"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromMegaparsecs(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Megaparsec"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromMeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Meter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromMicroinches(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Microinch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromMicrometers(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Micrometer"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromMils(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Mil"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromMiles(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Mile"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromMillimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Millimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromNanometers(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Nanometer"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromNauticalMiles(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.NauticalMile"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromParsecs(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Parsec"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromPrinterPicas(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.PrinterPica"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromPrinterPoints(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.PrinterPoint"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromShackles(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Shackle"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromSolarRadiuses(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.SolarRadius"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromTwips(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Twip"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromUsSurveyFeet(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.UsSurveyFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromYards(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Yard"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.From(UnitsNet.QuantityValue,UnitsNet.Units.LengthUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.LengthUnit" /> to <see cref="T:UnitsNet.Length" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Length unit value.</returns>
        </member>
        <member name="M:UnitsNet.Length.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Length.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Length.TryParse(System.String,UnitsNet.Length@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Length.TryParse(System.String,System.IFormatProvider,UnitsNet.Length@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Length.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Length.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Length.TryParseUnit(System.String,UnitsNet.Units.LengthUnit@)">
            <inheritdoc cref="M:UnitsNet.Length.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.LengthUnit@)"/>
        </member>
        <member name="M:UnitsNet.Length.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.LengthUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Length.op_UnaryNegation(UnitsNet.Length)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Length.op_Addition(UnitsNet.Length,UnitsNet.Length)">
            <summary>Get <see cref="T:UnitsNet.Length"/> from adding two <see cref="T:UnitsNet.Length"/>.</summary>
        </member>
        <member name="M:UnitsNet.Length.op_Subtraction(UnitsNet.Length,UnitsNet.Length)">
            <summary>Get <see cref="T:UnitsNet.Length"/> from subtracting two <see cref="T:UnitsNet.Length"/>.</summary>
        </member>
        <member name="M:UnitsNet.Length.op_Multiply(System.Double,UnitsNet.Length)">
            <summary>Get <see cref="T:UnitsNet.Length"/> from multiplying value and <see cref="T:UnitsNet.Length"/>.</summary>
        </member>
        <member name="M:UnitsNet.Length.op_Multiply(UnitsNet.Length,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Length"/> from multiplying value and <see cref="T:UnitsNet.Length"/>.</summary>
        </member>
        <member name="M:UnitsNet.Length.op_Division(UnitsNet.Length,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Length"/> from dividing <see cref="T:UnitsNet.Length"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Length.op_Division(UnitsNet.Length,UnitsNet.Length)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Length"/> by <see cref="T:UnitsNet.Length"/>.</summary>
        </member>
        <member name="M:UnitsNet.Length.op_LessThanOrEqual(UnitsNet.Length,UnitsNet.Length)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Length.op_GreaterThanOrEqual(UnitsNet.Length,UnitsNet.Length)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Length.op_LessThan(UnitsNet.Length,UnitsNet.Length)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Length.op_GreaterThan(UnitsNet.Length,UnitsNet.Length)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Length.op_Equality(UnitsNet.Length,UnitsNet.Length)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Length.Equals(UnitsNet.Length,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Length.op_Inequality(UnitsNet.Length,UnitsNet.Length)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Length.Equals(UnitsNet.Length,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Length.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Length.CompareTo(UnitsNet.Length)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Length.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Length.Equals(UnitsNet.Length,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Length.Equals(UnitsNet.Length)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Length.Equals(UnitsNet.Length,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Length.Equals(UnitsNet.Length,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Length within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Length.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Length.</returns>
        </member>
        <member name="M:UnitsNet.Length.As(UnitsNet.Units.LengthUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Length.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Length.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Length.ToUnit(UnitsNet.Units.LengthUnit)">
            <summary>
                Converts this Length to another Length with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Length with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Length.ToUnit(UnitsNet.Units.LengthUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Length to another Length using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Length with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Length.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Length.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Length.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Length.UnitsNet#IQuantity{UnitsNet#Units#LengthUnit}#ToUnit(UnitsNet.Units.LengthUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Length.UnitsNet#IQuantity{UnitsNet#Units#LengthUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Length.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Length.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Length.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Length.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Length.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Length.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.FeetInches">
            <summary>
                Representation of feet and inches, used to preserve the original values when constructing <see cref="T:UnitsNet.Length"/> by
                <see cref="M:UnitsNet.Length.FromFeetInches(System.Double,System.Double)"/> and later output them unaltered with <see cref="M:UnitsNet.FeetInches.ToString"/>.
            </summary>
        </member>
        <member name="M:UnitsNet.FeetInches.#ctor(System.Double,System.Double)">
            <summary>
                Construct from feet and inches.
            </summary>
        </member>
        <member name="P:UnitsNet.FeetInches.Feet">
            <summary>
                The feet value it was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.FeetInches.Inches">
            <summary>
                The inches value it was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.FeetInches.ToString">
            <inheritdoc cref="M:UnitsNet.FeetInches.ToString(System.IFormatProvider)"/>
        </member>
        <member name="M:UnitsNet.FeetInches.ToString(System.IFormatProvider)">
            <summary>
                Outputs feet and inches on the format: {feetValue} {feetUnit} {inchesValue} {inchesUnit}
            </summary>
            <example>Length.FromFeetInches(3,2).FeetInches.ToString() outputs: "3 ft 2 in"</example>
            <param name="cultureInfo">
                Optional culture to format number and localize unit abbreviations.
                If null, defaults to <see cref="P:System.Threading.Thread.CurrentUICulture"/>.
            </param>
        </member>
        <member name="T:UnitsNet.Level">
            <inheritdoc />
            <summary>
                Level is the logarithm of the ratio of a quantity Q to a reference value of that quantity, Q₀, expressed in dimensionless units.
            </summary>
        </member>
        <member name="M:UnitsNet.Level.#ctor(System.Double,System.Double)">
            <summary>
                Initializes a new instance of the logarithmic <see cref="T:UnitsNet.Level" /> struct which is the ratio of a quantity Q to a
                reference value of that quantity Q0.
            </summary>
            <param name="quantity">The quantity.</param>
            <param name="reference">The reference value that <paramref name="quantity" /> is compared to.</param>
        </member>
        <member name="F:UnitsNet.Level._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Level._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Level.#ctor(System.Double,UnitsNet.Units.LevelUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Level.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Level.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Level" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Level.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Level.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Level.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Level.BaseUnit">
            <summary>
                The base unit of Level, which is Decibel. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Level.MaxValue">
            <summary>
            Represents the largest possible value of Level
            </summary>
        </member>
        <member name="P:UnitsNet.Level.MinValue">
            <summary>
            Represents the smallest possible value of Level
            </summary>
        </member>
        <member name="P:UnitsNet.Level.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Level.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Level.Units">
            <summary>
                All units of measurement for the Level quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Level.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Decibel.
            </summary>
        </member>
        <member name="P:UnitsNet.Level.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Level.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Level.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Level.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Level.Type">
            <summary>
                The <see cref="P:UnitsNet.Level.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Level.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Level.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Level.Decibels">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LevelUnit.Decibel"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Level.Nepers">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LevelUnit.Neper"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Level.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Level.GetAbbreviation(UnitsNet.Units.LevelUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Level.GetAbbreviation(UnitsNet.Units.LevelUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Level.FromDecibels(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Level"/> from <see cref="F:UnitsNet.Units.LevelUnit.Decibel"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Level.FromNepers(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Level"/> from <see cref="F:UnitsNet.Units.LevelUnit.Neper"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Level.From(UnitsNet.QuantityValue,UnitsNet.Units.LevelUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.LevelUnit" /> to <see cref="T:UnitsNet.Level" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Level unit value.</returns>
        </member>
        <member name="M:UnitsNet.Level.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Level.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Level.TryParse(System.String,UnitsNet.Level@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Level.TryParse(System.String,System.IFormatProvider,UnitsNet.Level@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Level.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Level.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Level.TryParseUnit(System.String,UnitsNet.Units.LevelUnit@)">
            <inheritdoc cref="M:UnitsNet.Level.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.LevelUnit@)"/>
        </member>
        <member name="M:UnitsNet.Level.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.LevelUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Level.op_UnaryNegation(UnitsNet.Level)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Level.op_Addition(UnitsNet.Level,UnitsNet.Level)">
            <summary>Get <see cref="T:UnitsNet.Level"/> from logarithmic addition of two <see cref="T:UnitsNet.Level"/>.</summary>
        </member>
        <member name="M:UnitsNet.Level.op_Subtraction(UnitsNet.Level,UnitsNet.Level)">
            <summary>Get <see cref="T:UnitsNet.Level"/> from logarithmic subtraction of two <see cref="T:UnitsNet.Level"/>.</summary>
        </member>
        <member name="M:UnitsNet.Level.op_Multiply(System.Double,UnitsNet.Level)">
            <summary>Get <see cref="T:UnitsNet.Level"/> from logarithmic multiplication of value and <see cref="T:UnitsNet.Level"/>.</summary>
        </member>
        <member name="M:UnitsNet.Level.op_Multiply(UnitsNet.Level,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Level"/> from logarithmic multiplication of value and <see cref="T:UnitsNet.Level"/>.</summary>
        </member>
        <member name="M:UnitsNet.Level.op_Division(UnitsNet.Level,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Level"/> from logarithmic division of <see cref="T:UnitsNet.Level"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Level.op_Division(UnitsNet.Level,UnitsNet.Level)">
            <summary>Get ratio value from logarithmic division of <see cref="T:UnitsNet.Level"/> by <see cref="T:UnitsNet.Level"/>.</summary>
        </member>
        <member name="M:UnitsNet.Level.op_LessThanOrEqual(UnitsNet.Level,UnitsNet.Level)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Level.op_GreaterThanOrEqual(UnitsNet.Level,UnitsNet.Level)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Level.op_LessThan(UnitsNet.Level,UnitsNet.Level)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Level.op_GreaterThan(UnitsNet.Level,UnitsNet.Level)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Level.op_Equality(UnitsNet.Level,UnitsNet.Level)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Level.Equals(UnitsNet.Level,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Level.op_Inequality(UnitsNet.Level,UnitsNet.Level)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Level.Equals(UnitsNet.Level,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Level.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Level.CompareTo(UnitsNet.Level)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Level.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Level.Equals(UnitsNet.Level,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Level.Equals(UnitsNet.Level)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Level.Equals(UnitsNet.Level,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Level.Equals(UnitsNet.Level,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Level within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Level.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Level.</returns>
        </member>
        <member name="M:UnitsNet.Level.As(UnitsNet.Units.LevelUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Level.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Level.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Level.ToUnit(UnitsNet.Units.LevelUnit)">
            <summary>
                Converts this Level to another Level with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Level with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Level.ToUnit(UnitsNet.Units.LevelUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Level to another Level using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Level with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Level.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Level.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Level.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Level.UnitsNet#IQuantity{UnitsNet#Units#LevelUnit}#ToUnit(UnitsNet.Units.LevelUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Level.UnitsNet#IQuantity{UnitsNet#Units#LevelUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Level.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Level.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Level.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Level.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Level.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Level.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.LinearDensity">
            <inheritdoc />
            <summary>
                The Linear Density, or more precisely, the linear mass density, of a substance is its mass per unit length.  The term linear density is most often used when describing the characteristics of one-dimensional objects, although linear density can also be used to describe the density of a three-dimensional quantity along one particular dimension.
            </summary>
            <remarks>
                http://en.wikipedia.org/wiki/Linear_density
            </remarks>
        </member>
        <member name="M:UnitsNet.LinearDensity.op_Division(UnitsNet.LinearDensity,UnitsNet.Area)">
            <summary>Get <see cref="T:UnitsNet.Density"/> from <see cref="T:UnitsNet.LinearDensity"/> times <see cref="T:UnitsNet.Area"/>.</summary>
        </member>
        <member name="M:UnitsNet.LinearDensity.op_Division(UnitsNet.LinearDensity,UnitsNet.Density)">
            <summary>Get <see cref="T:UnitsNet.Area"/> from <see cref="T:UnitsNet.LinearDensity"/> times <see cref="T:UnitsNet.Density"/>.</summary>
        </member>
        <member name="F:UnitsNet.LinearDensity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.LinearDensity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.LinearDensity.#ctor(System.Double,UnitsNet.Units.LinearDensityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearDensity.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.LinearDensity.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.LinearDensity" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.LinearDensity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.LinearDensity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.BaseUnit">
            <summary>
                The base unit of LinearDensity, which is KilogramPerMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.MaxValue">
            <summary>
            Represents the largest possible value of LinearDensity
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.MinValue">
            <summary>
            Represents the smallest possible value of LinearDensity
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.LinearDensity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.Units">
            <summary>
                All units of measurement for the LinearDensity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit KilogramPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.LinearDensity.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.LinearDensity.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.LinearDensity.Type">
            <summary>
                The <see cref="P:UnitsNet.LinearDensity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.LinearDensity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.GramsPerCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearDensityUnit.GramPerCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.GramsPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearDensityUnit.GramPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.GramsPerMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearDensityUnit.GramPerMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.KilogramsPerCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearDensityUnit.KilogramPerCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.KilogramsPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearDensityUnit.KilogramPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.KilogramsPerMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearDensityUnit.KilogramPerMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.MicrogramsPerCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearDensityUnit.MicrogramPerCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.MicrogramsPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearDensityUnit.MicrogramPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.MicrogramsPerMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearDensityUnit.MicrogramPerMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.MilligramsPerCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearDensityUnit.MilligramPerCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.MilligramsPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearDensityUnit.MilligramPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.MilligramsPerMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearDensityUnit.MilligramPerMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.PoundsPerFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearDensityUnit.PoundPerFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.PoundsPerInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearDensityUnit.PoundPerInch"/>
            </summary>
        </member>
        <member name="M:UnitsNet.LinearDensity.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.LinearDensity.GetAbbreviation(UnitsNet.Units.LinearDensityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.LinearDensity.GetAbbreviation(UnitsNet.Units.LinearDensityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LinearDensity.FromGramsPerCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearDensity"/> from <see cref="F:UnitsNet.Units.LinearDensityUnit.GramPerCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearDensity.FromGramsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearDensity"/> from <see cref="F:UnitsNet.Units.LinearDensityUnit.GramPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearDensity.FromGramsPerMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearDensity"/> from <see cref="F:UnitsNet.Units.LinearDensityUnit.GramPerMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearDensity.FromKilogramsPerCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearDensity"/> from <see cref="F:UnitsNet.Units.LinearDensityUnit.KilogramPerCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearDensity.FromKilogramsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearDensity"/> from <see cref="F:UnitsNet.Units.LinearDensityUnit.KilogramPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearDensity.FromKilogramsPerMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearDensity"/> from <see cref="F:UnitsNet.Units.LinearDensityUnit.KilogramPerMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearDensity.FromMicrogramsPerCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearDensity"/> from <see cref="F:UnitsNet.Units.LinearDensityUnit.MicrogramPerCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearDensity.FromMicrogramsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearDensity"/> from <see cref="F:UnitsNet.Units.LinearDensityUnit.MicrogramPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearDensity.FromMicrogramsPerMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearDensity"/> from <see cref="F:UnitsNet.Units.LinearDensityUnit.MicrogramPerMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearDensity.FromMilligramsPerCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearDensity"/> from <see cref="F:UnitsNet.Units.LinearDensityUnit.MilligramPerCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearDensity.FromMilligramsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearDensity"/> from <see cref="F:UnitsNet.Units.LinearDensityUnit.MilligramPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearDensity.FromMilligramsPerMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearDensity"/> from <see cref="F:UnitsNet.Units.LinearDensityUnit.MilligramPerMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearDensity.FromPoundsPerFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearDensity"/> from <see cref="F:UnitsNet.Units.LinearDensityUnit.PoundPerFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearDensity.FromPoundsPerInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearDensity"/> from <see cref="F:UnitsNet.Units.LinearDensityUnit.PoundPerInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearDensity.From(UnitsNet.QuantityValue,UnitsNet.Units.LinearDensityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.LinearDensityUnit" /> to <see cref="T:UnitsNet.LinearDensity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>LinearDensity unit value.</returns>
        </member>
        <member name="M:UnitsNet.LinearDensity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.LinearDensity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LinearDensity.TryParse(System.String,UnitsNet.LinearDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.LinearDensity.TryParse(System.String,System.IFormatProvider,UnitsNet.LinearDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LinearDensity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.LinearDensity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.LinearDensity.TryParseUnit(System.String,UnitsNet.Units.LinearDensityUnit@)">
            <inheritdoc cref="M:UnitsNet.LinearDensity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.LinearDensityUnit@)"/>
        </member>
        <member name="M:UnitsNet.LinearDensity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.LinearDensityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LinearDensity.op_UnaryNegation(UnitsNet.LinearDensity)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.LinearDensity.op_Addition(UnitsNet.LinearDensity,UnitsNet.LinearDensity)">
            <summary>Get <see cref="T:UnitsNet.LinearDensity"/> from adding two <see cref="T:UnitsNet.LinearDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.LinearDensity.op_Subtraction(UnitsNet.LinearDensity,UnitsNet.LinearDensity)">
            <summary>Get <see cref="T:UnitsNet.LinearDensity"/> from subtracting two <see cref="T:UnitsNet.LinearDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.LinearDensity.op_Multiply(System.Double,UnitsNet.LinearDensity)">
            <summary>Get <see cref="T:UnitsNet.LinearDensity"/> from multiplying value and <see cref="T:UnitsNet.LinearDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.LinearDensity.op_Multiply(UnitsNet.LinearDensity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.LinearDensity"/> from multiplying value and <see cref="T:UnitsNet.LinearDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.LinearDensity.op_Division(UnitsNet.LinearDensity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.LinearDensity"/> from dividing <see cref="T:UnitsNet.LinearDensity"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.LinearDensity.op_Division(UnitsNet.LinearDensity,UnitsNet.LinearDensity)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.LinearDensity"/> by <see cref="T:UnitsNet.LinearDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.LinearDensity.op_LessThanOrEqual(UnitsNet.LinearDensity,UnitsNet.LinearDensity)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.LinearDensity.op_GreaterThanOrEqual(UnitsNet.LinearDensity,UnitsNet.LinearDensity)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.LinearDensity.op_LessThan(UnitsNet.LinearDensity,UnitsNet.LinearDensity)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.LinearDensity.op_GreaterThan(UnitsNet.LinearDensity,UnitsNet.LinearDensity)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.LinearDensity.op_Equality(UnitsNet.LinearDensity,UnitsNet.LinearDensity)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.LinearDensity.Equals(UnitsNet.LinearDensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.LinearDensity.op_Inequality(UnitsNet.LinearDensity,UnitsNet.LinearDensity)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.LinearDensity.Equals(UnitsNet.LinearDensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.LinearDensity.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LinearDensity.CompareTo(UnitsNet.LinearDensity)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LinearDensity.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.LinearDensity.Equals(UnitsNet.LinearDensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.LinearDensity.Equals(UnitsNet.LinearDensity)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.LinearDensity.Equals(UnitsNet.LinearDensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.LinearDensity.Equals(UnitsNet.LinearDensity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another LinearDensity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.LinearDensity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current LinearDensity.</returns>
        </member>
        <member name="M:UnitsNet.LinearDensity.As(UnitsNet.Units.LinearDensityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.LinearDensity.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.LinearDensity.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LinearDensity.ToUnit(UnitsNet.Units.LinearDensityUnit)">
            <summary>
                Converts this LinearDensity to another LinearDensity with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A LinearDensity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.LinearDensity.ToUnit(UnitsNet.Units.LinearDensityUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this LinearDensity to another LinearDensity using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A LinearDensity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.LinearDensity.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LinearDensity.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.LinearDensity.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LinearDensity.UnitsNet#IQuantity{UnitsNet#Units#LinearDensityUnit}#ToUnit(UnitsNet.Units.LinearDensityUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LinearDensity.UnitsNet#IQuantity{UnitsNet#Units#LinearDensityUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LinearDensity.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.LinearDensity.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LinearDensity.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LinearDensity.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LinearDensity.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.LinearDensity.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Mass">
            <inheritdoc />
            <summary>
                In physics, mass (from Greek μᾶζα "barley cake, lump [of dough]") is a property of a physical system or body, giving rise to the phenomena of the body's resistance to being accelerated by a force and the strength of its mutual gravitational attraction with other bodies. Instruments such as mass balances or scales use those phenomena to measure mass. The SI unit of mass is the kilogram (kg).
            </summary>
        </member>
        <member name="M:UnitsNet.Mass.FromGravitationalForce(UnitsNet.Force)">
            <summary>Get <see cref="T:UnitsNet.Mass"/> from <see cref="T:UnitsNet.Force"/> of gravity.</summary>
        </member>
        <member name="F:UnitsNet.Mass.StonesInOnePound">
            <summary>
                StonePounds related code makes it easier to work with Stone/Pound combination, which are customarily used in the UK
                to express body weight. For example, someone weighs 11 stone 4 pounds (about 72 kilograms).
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.StonePounds">
            <summary>
                Converts the mass to a customary stone/pounds combination.
            </summary>
        </member>
        <member name="M:UnitsNet.Mass.FromStonePounds(System.Double,System.Double)">
            <summary>
                Get Mass from combination of stone and pounds.
            </summary>
        </member>
        <member name="M:UnitsNet.Mass.op_Division(UnitsNet.Mass,System.TimeSpan)">
            <summary>Get <see cref="T:UnitsNet.MassFlow"/> from <see cref="T:UnitsNet.Mass"/> divided by <see cref="T:System.TimeSpan"/>.</summary>
        </member>
        <member name="M:UnitsNet.Mass.op_Division(UnitsNet.Mass,UnitsNet.Duration)">
            <summary>Get <see cref="T:UnitsNet.MassFlow"/> from <see cref="T:UnitsNet.Mass"/> divided by <see cref="T:UnitsNet.Duration"/>.</summary>
        </member>
        <member name="M:UnitsNet.Mass.op_Division(UnitsNet.Mass,UnitsNet.Volume)">
            <summary>Get <see cref="T:UnitsNet.Density"/> from <see cref="T:UnitsNet.MassFlow"/> divided by <see cref="T:UnitsNet.Volume"/>.</summary>
        </member>
        <member name="M:UnitsNet.Mass.op_Division(UnitsNet.Mass,UnitsNet.Density)">
            <summary>Get <see cref="T:UnitsNet.Volume"/> from <see cref="T:UnitsNet.Mass"/> divided by <see cref="T:UnitsNet.Density"/>.</summary>
        </member>
        <member name="M:UnitsNet.Mass.op_Division(UnitsNet.Mass,UnitsNet.MolarMass)">
            <summary>Get <see cref="T:UnitsNet.AmountOfSubstance" /> from <see cref="T:UnitsNet.MolarMass" /> divided by <see cref="T:UnitsNet.Mass" />.</summary>
        </member>
        <member name="M:UnitsNet.Mass.op_Multiply(UnitsNet.Mass,UnitsNet.Acceleration)">
            <summary>Get <see cref="T:UnitsNet.Force"/> from <see cref="T:UnitsNet.Mass"/> times <see cref="T:UnitsNet.Acceleration"/>.</summary>
        </member>
        <member name="M:UnitsNet.Mass.op_Multiply(UnitsNet.Acceleration,UnitsNet.Mass)">
            <summary>Get <see cref="T:UnitsNet.Force"/> from <see cref="T:UnitsNet.Acceleration"/> times <see cref="T:UnitsNet.Mass"/>.</summary>
        </member>
        <member name="F:UnitsNet.Mass._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Mass._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Mass.#ctor(System.Double,UnitsNet.Units.MassUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Mass.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Mass" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Mass.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Mass.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.BaseUnit">
            <summary>
                The base unit of Mass, which is Kilogram. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.MaxValue">
            <summary>
            Represents the largest possible value of Mass
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.MinValue">
            <summary>
            Represents the smallest possible value of Mass
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Mass.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Units">
            <summary>
                All units of measurement for the Mass quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Kilogram.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Mass.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Mass.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Mass.Type">
            <summary>
                The <see cref="P:UnitsNet.Mass.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Mass.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Centigrams">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassUnit.Centigram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Decagrams">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassUnit.Decagram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Decigrams">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassUnit.Decigram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.EarthMasses">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassUnit.EarthMass"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Grains">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassUnit.Grain"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Grams">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassUnit.Gram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Hectograms">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassUnit.Hectogram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Kilograms">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassUnit.Kilogram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Kilopounds">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassUnit.Kilopound"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Kilotonnes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassUnit.Kilotonne"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.LongHundredweight">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassUnit.LongHundredweight"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.LongTons">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassUnit.LongTon"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Megapounds">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassUnit.Megapound"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Megatonnes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassUnit.Megatonne"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Micrograms">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassUnit.Microgram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Milligrams">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassUnit.Milligram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Nanograms">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassUnit.Nanogram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Ounces">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassUnit.Ounce"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Pounds">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassUnit.Pound"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.ShortHundredweight">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassUnit.ShortHundredweight"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.ShortTons">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassUnit.ShortTon"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Slugs">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassUnit.Slug"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.SolarMasses">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassUnit.SolarMass"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Stone">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassUnit.Stone"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Tonnes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassUnit.Tonne"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Mass.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Mass.GetAbbreviation(UnitsNet.Units.MassUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Mass.GetAbbreviation(UnitsNet.Units.MassUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Mass.FromCentigrams(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Mass"/> from <see cref="F:UnitsNet.Units.MassUnit.Centigram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromDecagrams(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Mass"/> from <see cref="F:UnitsNet.Units.MassUnit.Decagram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromDecigrams(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Mass"/> from <see cref="F:UnitsNet.Units.MassUnit.Decigram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromEarthMasses(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Mass"/> from <see cref="F:UnitsNet.Units.MassUnit.EarthMass"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromGrains(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Mass"/> from <see cref="F:UnitsNet.Units.MassUnit.Grain"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromGrams(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Mass"/> from <see cref="F:UnitsNet.Units.MassUnit.Gram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromHectograms(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Mass"/> from <see cref="F:UnitsNet.Units.MassUnit.Hectogram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromKilograms(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Mass"/> from <see cref="F:UnitsNet.Units.MassUnit.Kilogram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromKilopounds(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Mass"/> from <see cref="F:UnitsNet.Units.MassUnit.Kilopound"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromKilotonnes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Mass"/> from <see cref="F:UnitsNet.Units.MassUnit.Kilotonne"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromLongHundredweight(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Mass"/> from <see cref="F:UnitsNet.Units.MassUnit.LongHundredweight"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromLongTons(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Mass"/> from <see cref="F:UnitsNet.Units.MassUnit.LongTon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromMegapounds(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Mass"/> from <see cref="F:UnitsNet.Units.MassUnit.Megapound"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromMegatonnes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Mass"/> from <see cref="F:UnitsNet.Units.MassUnit.Megatonne"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromMicrograms(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Mass"/> from <see cref="F:UnitsNet.Units.MassUnit.Microgram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromMilligrams(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Mass"/> from <see cref="F:UnitsNet.Units.MassUnit.Milligram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromNanograms(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Mass"/> from <see cref="F:UnitsNet.Units.MassUnit.Nanogram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromOunces(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Mass"/> from <see cref="F:UnitsNet.Units.MassUnit.Ounce"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromPounds(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Mass"/> from <see cref="F:UnitsNet.Units.MassUnit.Pound"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromShortHundredweight(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Mass"/> from <see cref="F:UnitsNet.Units.MassUnit.ShortHundredweight"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromShortTons(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Mass"/> from <see cref="F:UnitsNet.Units.MassUnit.ShortTon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromSlugs(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Mass"/> from <see cref="F:UnitsNet.Units.MassUnit.Slug"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromSolarMasses(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Mass"/> from <see cref="F:UnitsNet.Units.MassUnit.SolarMass"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromStone(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Mass"/> from <see cref="F:UnitsNet.Units.MassUnit.Stone"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromTonnes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Mass"/> from <see cref="F:UnitsNet.Units.MassUnit.Tonne"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.From(UnitsNet.QuantityValue,UnitsNet.Units.MassUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.MassUnit" /> to <see cref="T:UnitsNet.Mass" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Mass unit value.</returns>
        </member>
        <member name="M:UnitsNet.Mass.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Mass.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Mass.TryParse(System.String,UnitsNet.Mass@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Mass.TryParse(System.String,System.IFormatProvider,UnitsNet.Mass@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Mass.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Mass.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Mass.TryParseUnit(System.String,UnitsNet.Units.MassUnit@)">
            <inheritdoc cref="M:UnitsNet.Mass.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MassUnit@)"/>
        </member>
        <member name="M:UnitsNet.Mass.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MassUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Mass.op_UnaryNegation(UnitsNet.Mass)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Mass.op_Addition(UnitsNet.Mass,UnitsNet.Mass)">
            <summary>Get <see cref="T:UnitsNet.Mass"/> from adding two <see cref="T:UnitsNet.Mass"/>.</summary>
        </member>
        <member name="M:UnitsNet.Mass.op_Subtraction(UnitsNet.Mass,UnitsNet.Mass)">
            <summary>Get <see cref="T:UnitsNet.Mass"/> from subtracting two <see cref="T:UnitsNet.Mass"/>.</summary>
        </member>
        <member name="M:UnitsNet.Mass.op_Multiply(System.Double,UnitsNet.Mass)">
            <summary>Get <see cref="T:UnitsNet.Mass"/> from multiplying value and <see cref="T:UnitsNet.Mass"/>.</summary>
        </member>
        <member name="M:UnitsNet.Mass.op_Multiply(UnitsNet.Mass,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Mass"/> from multiplying value and <see cref="T:UnitsNet.Mass"/>.</summary>
        </member>
        <member name="M:UnitsNet.Mass.op_Division(UnitsNet.Mass,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Mass"/> from dividing <see cref="T:UnitsNet.Mass"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Mass.op_Division(UnitsNet.Mass,UnitsNet.Mass)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Mass"/> by <see cref="T:UnitsNet.Mass"/>.</summary>
        </member>
        <member name="M:UnitsNet.Mass.op_LessThanOrEqual(UnitsNet.Mass,UnitsNet.Mass)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Mass.op_GreaterThanOrEqual(UnitsNet.Mass,UnitsNet.Mass)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Mass.op_LessThan(UnitsNet.Mass,UnitsNet.Mass)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Mass.op_GreaterThan(UnitsNet.Mass,UnitsNet.Mass)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Mass.op_Equality(UnitsNet.Mass,UnitsNet.Mass)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Mass.Equals(UnitsNet.Mass,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Mass.op_Inequality(UnitsNet.Mass,UnitsNet.Mass)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Mass.Equals(UnitsNet.Mass,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Mass.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Mass.CompareTo(UnitsNet.Mass)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Mass.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Mass.Equals(UnitsNet.Mass,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Mass.Equals(UnitsNet.Mass)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Mass.Equals(UnitsNet.Mass,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Mass.Equals(UnitsNet.Mass,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Mass within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Mass.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Mass.</returns>
        </member>
        <member name="M:UnitsNet.Mass.As(UnitsNet.Units.MassUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Mass.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Mass.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Mass.ToUnit(UnitsNet.Units.MassUnit)">
            <summary>
                Converts this Mass to another Mass with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Mass with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Mass.ToUnit(UnitsNet.Units.MassUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Mass to another Mass using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Mass with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Mass.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Mass.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Mass.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Mass.UnitsNet#IQuantity{UnitsNet#Units#MassUnit}#ToUnit(UnitsNet.Units.MassUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Mass.UnitsNet#IQuantity{UnitsNet#Units#MassUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Mass.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Mass.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Mass.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Mass.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Mass.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Mass.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.StonePounds">
            <summary>
                Representation of stone and pounds, used to preserve the original values when constructing <see cref="T:UnitsNet.Mass"/> by
                <see cref="M:UnitsNet.Mass.FromStonePounds(System.Double,System.Double)"/> and later output them unaltered with <see cref="M:UnitsNet.StonePounds.ToString"/>.
            </summary>
        </member>
        <member name="M:UnitsNet.StonePounds.#ctor(System.Double,System.Double)">
            <summary>
                Construct from stone and pounds.
            </summary>
        </member>
        <member name="P:UnitsNet.StonePounds.Stone">
            <summary>
                The stone value it was created with.
            </summary>
        </member>
        <member name="P:UnitsNet.StonePounds.Pounds">
            <summary>
                The pounds value it was created with.
            </summary>
        </member>
        <member name="M:UnitsNet.StonePounds.ToString">
            <inheritdoc cref="M:UnitsNet.StonePounds.ToString(System.IFormatProvider)"/>
        </member>
        <member name="M:UnitsNet.StonePounds.ToString(System.IFormatProvider)">
            <summary>
                Outputs stone and pounds on the format: {stoneValue} {stoneUnit} {poundsValue} {poundsUnit}
            </summary>
            <example>Mass.FromStonePounds(3,2).StonePounds.ToString() outputs: "3 st 2 lb"</example>
            <param name="cultureInfo">
                Optional culture to format number and localize unit abbreviations.
                If null, defaults to <see cref="P:System.Threading.Thread.CurrentUICulture"/>.
            </param>
        </member>
        <member name="T:UnitsNet.MassConcentration">
            <inheritdoc />
            <summary>
                In chemistry, the mass concentration ρi (or γi) is defined as the mass of a constituent mi divided by the volume of the mixture V
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Mass_concentration_(chemistry)
            </remarks>
        </member>
        <member name="M:UnitsNet.MassConcentration.ToMolarity(UnitsNet.MolarMass)">
            <summary>
                Get <see cref="T:UnitsNet.Molarity" /> from this <see cref="T:UnitsNet.MassConcentration" /> using the known component <see cref="T:UnitsNet.MolarMass" />.
            </summary>
            <param name="molecularWeight"></param>
        </member>
        <member name="M:UnitsNet.MassConcentration.ToVolumeConcentration(UnitsNet.Density)">
            <summary>
             Get <see cref="T:UnitsNet.VolumeConcentration" /> from this <see cref="T:UnitsNet.MassConcentration" /> using the known component <see cref="T:UnitsNet.Density" />.
            </summary>
            <param name="componentDensity"></param>
            <returns></returns>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromMolarity(UnitsNet.Molarity,UnitsNet.MolarMass)">
            <summary>
                Get <see cref="T:UnitsNet.MassConcentration" /> from <see cref="T:UnitsNet.Molarity" />.
            </summary>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromVolumeConcentration(UnitsNet.VolumeConcentration,UnitsNet.Density)">
            <summary>
                Get <see cref="T:UnitsNet.MassConcentration" /> from <see cref="T:UnitsNet.VolumeConcentration" /> and component <see cref="T:UnitsNet.Density" />.
            </summary>
        </member>
        <member name="M:UnitsNet.MassConcentration.op_Multiply(UnitsNet.MassConcentration,UnitsNet.Volume)">
            <summary>Get <see cref="T:UnitsNet.Mass" /> from <see cref="T:UnitsNet.MassConcentration" /> times <see cref="T:UnitsNet.Volume" />.</summary>
        </member>
        <member name="M:UnitsNet.MassConcentration.op_Multiply(UnitsNet.Volume,UnitsNet.MassConcentration)">
            <summary>Get <see cref="T:UnitsNet.Mass" /> from <see cref="T:UnitsNet.Volume" /> times <see cref="T:UnitsNet.MassConcentration" />.</summary>
        </member>
        <member name="M:UnitsNet.MassConcentration.op_Division(UnitsNet.MassConcentration,UnitsNet.MolarMass)">
            <summary>Get <see cref="T:UnitsNet.Molarity" /> from <see cref="T:UnitsNet.MassConcentration" /> divided by the component's <see cref="T:UnitsNet.MolarMass" />.</summary>
        </member>
        <member name="M:UnitsNet.MassConcentration.op_Division(UnitsNet.MassConcentration,UnitsNet.Density)">
            <summary>Get <see cref="T:UnitsNet.VolumeConcentration" /> from <see cref="T:UnitsNet.MassConcentration" /> divided by the component's <see cref="T:UnitsNet.Density" />.</summary>
        </member>
        <member name="F:UnitsNet.MassConcentration._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.MassConcentration._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.MassConcentration.#ctor(System.Double,UnitsNet.Units.MassConcentrationUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.MassConcentration.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.MassConcentration" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.MassConcentration.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.MassConcentration.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.BaseUnit">
            <summary>
                The base unit of MassConcentration, which is KilogramPerCubicMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.MaxValue">
            <summary>
            Represents the largest possible value of MassConcentration
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.MinValue">
            <summary>
            Represents the smallest possible value of MassConcentration
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.MassConcentration.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.Units">
            <summary>
                All units of measurement for the MassConcentration quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit KilogramPerCubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.MassConcentration.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.MassConcentration.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.MassConcentration.Type">
            <summary>
                The <see cref="P:UnitsNet.MassConcentration.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.MassConcentration.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.CentigramsPerDeciliter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.CentigramPerDeciliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.CentigramsPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.CentigramPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.CentigramsPerMicroliter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.CentigramPerMicroliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.CentigramsPerMilliliter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.CentigramPerMilliliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.DecigramsPerDeciliter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.DecigramPerDeciliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.DecigramsPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.DecigramPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.DecigramsPerMicroliter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.DecigramPerMicroliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.DecigramsPerMilliliter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.DecigramPerMilliliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.GramsPerCubicCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.GramPerCubicCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.GramsPerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.GramPerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.GramsPerCubicMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.GramPerCubicMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.GramsPerDeciliter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.GramPerDeciliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.GramsPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.GramPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.GramsPerMicroliter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.GramPerMicroliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.GramsPerMilliliter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.GramPerMilliliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.KilogramsPerCubicCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.KilogramPerCubicCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.KilogramsPerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.KilogramPerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.KilogramsPerCubicMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.KilogramPerCubicMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.KilogramsPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.KilogramPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.KilopoundsPerCubicFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.KilopoundPerCubicFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.KilopoundsPerCubicInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.KilopoundPerCubicInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.MicrogramsPerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.MicrogramPerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.MicrogramsPerDeciliter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.MicrogramPerDeciliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.MicrogramsPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.MicrogramPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.MicrogramsPerMicroliter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.MicrogramPerMicroliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.MicrogramsPerMilliliter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.MicrogramPerMilliliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.MilligramsPerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.MilligramPerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.MilligramsPerDeciliter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.MilligramPerDeciliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.MilligramsPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.MilligramPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.MilligramsPerMicroliter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.MilligramPerMicroliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.MilligramsPerMilliliter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.MilligramPerMilliliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.NanogramsPerDeciliter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.NanogramPerDeciliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.NanogramsPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.NanogramPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.NanogramsPerMicroliter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.NanogramPerMicroliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.NanogramsPerMilliliter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.NanogramPerMilliliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.OuncesPerImperialGallon">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.OuncePerImperialGallon"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.OuncesPerUSGallon">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.OuncePerUSGallon"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.PicogramsPerDeciliter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.PicogramPerDeciliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.PicogramsPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.PicogramPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.PicogramsPerMicroliter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.PicogramPerMicroliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.PicogramsPerMilliliter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.PicogramPerMilliliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.PoundsPerCubicFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.PoundPerCubicFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.PoundsPerCubicInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.PoundPerCubicInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.PoundsPerImperialGallon">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.PoundPerImperialGallon"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.PoundsPerUSGallon">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.PoundPerUSGallon"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.SlugsPerCubicFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.SlugPerCubicFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.TonnesPerCubicCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.TonnePerCubicCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.TonnesPerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.TonnePerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassConcentration.TonnesPerCubicMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassConcentrationUnit.TonnePerCubicMillimeter"/>
            </summary>
        </member>
        <member name="M:UnitsNet.MassConcentration.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.MassConcentration.GetAbbreviation(UnitsNet.Units.MassConcentrationUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.MassConcentration.GetAbbreviation(UnitsNet.Units.MassConcentrationUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromCentigramsPerDeciliter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.CentigramPerDeciliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromCentigramsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.CentigramPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromCentigramsPerMicroliter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.CentigramPerMicroliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromCentigramsPerMilliliter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.CentigramPerMilliliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromDecigramsPerDeciliter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.DecigramPerDeciliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromDecigramsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.DecigramPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromDecigramsPerMicroliter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.DecigramPerMicroliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromDecigramsPerMilliliter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.DecigramPerMilliliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromGramsPerCubicCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.GramPerCubicCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromGramsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.GramPerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromGramsPerCubicMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.GramPerCubicMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromGramsPerDeciliter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.GramPerDeciliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromGramsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.GramPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromGramsPerMicroliter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.GramPerMicroliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromGramsPerMilliliter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.GramPerMilliliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromKilogramsPerCubicCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.KilogramPerCubicCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromKilogramsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.KilogramPerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromKilogramsPerCubicMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.KilogramPerCubicMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromKilogramsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.KilogramPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromKilopoundsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.KilopoundPerCubicFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromKilopoundsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.KilopoundPerCubicInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromMicrogramsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.MicrogramPerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromMicrogramsPerDeciliter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.MicrogramPerDeciliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromMicrogramsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.MicrogramPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromMicrogramsPerMicroliter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.MicrogramPerMicroliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromMicrogramsPerMilliliter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.MicrogramPerMilliliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromMilligramsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.MilligramPerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromMilligramsPerDeciliter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.MilligramPerDeciliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromMilligramsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.MilligramPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromMilligramsPerMicroliter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.MilligramPerMicroliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromMilligramsPerMilliliter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.MilligramPerMilliliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromNanogramsPerDeciliter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.NanogramPerDeciliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromNanogramsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.NanogramPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromNanogramsPerMicroliter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.NanogramPerMicroliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromNanogramsPerMilliliter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.NanogramPerMilliliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromOuncesPerImperialGallon(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.OuncePerImperialGallon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromOuncesPerUSGallon(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.OuncePerUSGallon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromPicogramsPerDeciliter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.PicogramPerDeciliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromPicogramsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.PicogramPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromPicogramsPerMicroliter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.PicogramPerMicroliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromPicogramsPerMilliliter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.PicogramPerMilliliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromPoundsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.PoundPerCubicFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromPoundsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.PoundPerCubicInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromPoundsPerImperialGallon(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.PoundPerImperialGallon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromPoundsPerUSGallon(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.PoundPerUSGallon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromSlugsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.SlugPerCubicFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromTonnesPerCubicCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.TonnePerCubicCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromTonnesPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.TonnePerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.FromTonnesPerCubicMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassConcentration"/> from <see cref="F:UnitsNet.Units.MassConcentrationUnit.TonnePerCubicMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.From(UnitsNet.QuantityValue,UnitsNet.Units.MassConcentrationUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.MassConcentrationUnit" /> to <see cref="T:UnitsNet.MassConcentration" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>MassConcentration unit value.</returns>
        </member>
        <member name="M:UnitsNet.MassConcentration.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassConcentration.TryParse(System.String,UnitsNet.MassConcentration@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MassConcentration.TryParse(System.String,System.IFormatProvider,UnitsNet.MassConcentration@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassConcentration.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MassConcentration.TryParseUnit(System.String,UnitsNet.Units.MassConcentrationUnit@)">
            <inheritdoc cref="M:UnitsNet.MassConcentration.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MassConcentrationUnit@)"/>
        </member>
        <member name="M:UnitsNet.MassConcentration.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MassConcentrationUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassConcentration.op_UnaryNegation(UnitsNet.MassConcentration)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.MassConcentration.op_Addition(UnitsNet.MassConcentration,UnitsNet.MassConcentration)">
            <summary>Get <see cref="T:UnitsNet.MassConcentration"/> from adding two <see cref="T:UnitsNet.MassConcentration"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassConcentration.op_Subtraction(UnitsNet.MassConcentration,UnitsNet.MassConcentration)">
            <summary>Get <see cref="T:UnitsNet.MassConcentration"/> from subtracting two <see cref="T:UnitsNet.MassConcentration"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassConcentration.op_Multiply(System.Double,UnitsNet.MassConcentration)">
            <summary>Get <see cref="T:UnitsNet.MassConcentration"/> from multiplying value and <see cref="T:UnitsNet.MassConcentration"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassConcentration.op_Multiply(UnitsNet.MassConcentration,System.Double)">
            <summary>Get <see cref="T:UnitsNet.MassConcentration"/> from multiplying value and <see cref="T:UnitsNet.MassConcentration"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassConcentration.op_Division(UnitsNet.MassConcentration,System.Double)">
            <summary>Get <see cref="T:UnitsNet.MassConcentration"/> from dividing <see cref="T:UnitsNet.MassConcentration"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.MassConcentration.op_Division(UnitsNet.MassConcentration,UnitsNet.MassConcentration)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.MassConcentration"/> by <see cref="T:UnitsNet.MassConcentration"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassConcentration.op_LessThanOrEqual(UnitsNet.MassConcentration,UnitsNet.MassConcentration)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.MassConcentration.op_GreaterThanOrEqual(UnitsNet.MassConcentration,UnitsNet.MassConcentration)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.MassConcentration.op_LessThan(UnitsNet.MassConcentration,UnitsNet.MassConcentration)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.MassConcentration.op_GreaterThan(UnitsNet.MassConcentration,UnitsNet.MassConcentration)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.MassConcentration.op_Equality(UnitsNet.MassConcentration,UnitsNet.MassConcentration)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.MassConcentration.Equals(UnitsNet.MassConcentration,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MassConcentration.op_Inequality(UnitsNet.MassConcentration,UnitsNet.MassConcentration)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.MassConcentration.Equals(UnitsNet.MassConcentration,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MassConcentration.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassConcentration.CompareTo(UnitsNet.MassConcentration)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassConcentration.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.MassConcentration.Equals(UnitsNet.MassConcentration,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MassConcentration.Equals(UnitsNet.MassConcentration)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.MassConcentration.Equals(UnitsNet.MassConcentration,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MassConcentration.Equals(UnitsNet.MassConcentration,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another MassConcentration within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.MassConcentration.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current MassConcentration.</returns>
        </member>
        <member name="M:UnitsNet.MassConcentration.As(UnitsNet.Units.MassConcentrationUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MassConcentration.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.MassConcentration.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassConcentration.ToUnit(UnitsNet.Units.MassConcentrationUnit)">
            <summary>
                Converts this MassConcentration to another MassConcentration with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A MassConcentration with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MassConcentration.ToUnit(UnitsNet.Units.MassConcentrationUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this MassConcentration to another MassConcentration using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A MassConcentration with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MassConcentration.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassConcentration.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.MassConcentration.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassConcentration.UnitsNet#IQuantity{UnitsNet#Units#MassConcentrationUnit}#ToUnit(UnitsNet.Units.MassConcentrationUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassConcentration.UnitsNet#IQuantity{UnitsNet#Units#MassConcentrationUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassConcentration.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MassConcentration.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassConcentration.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassConcentration.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassConcentration.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.MassConcentration.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.MassFlow">
            <inheritdoc />
            <summary>
                Mass flow is the ratio of the mass change to the time during which the change occurred (value of mass changes per unit time).
            </summary>
        </member>
        <member name="M:UnitsNet.MassFlow.op_Multiply(UnitsNet.MassFlow,System.TimeSpan)">
            <summary>Get <see cref="T:UnitsNet.Mass"/> from <see cref="T:UnitsNet.MassFlow"/> times <see cref="T:System.TimeSpan"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFlow.op_Multiply(System.TimeSpan,UnitsNet.MassFlow)">
            <summary>Get <see cref="T:UnitsNet.Mass"/> from <see cref="T:System.TimeSpan"/> times <see cref="T:UnitsNet.MassFlow"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFlow.op_Multiply(UnitsNet.MassFlow,UnitsNet.Duration)">
            <summary>Get <see cref="T:UnitsNet.Mass"/> from <see cref="T:UnitsNet.MassFlow"/> times <see cref="T:UnitsNet.Duration"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFlow.op_Multiply(UnitsNet.Duration,UnitsNet.MassFlow)">
            <summary>Get <see cref="T:UnitsNet.Mass"/> from <see cref="T:UnitsNet.Duration"/> times <see cref="T:UnitsNet.MassFlow"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFlow.op_Division(UnitsNet.MassFlow,UnitsNet.BrakeSpecificFuelConsumption)">
            <summary>Get <see cref="T:UnitsNet.Power"/> from <see cref="T:UnitsNet.MassFlow"/> divided by <see cref="T:UnitsNet.BrakeSpecificFuelConsumption"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFlow.op_Division(UnitsNet.MassFlow,UnitsNet.Power)">
            <summary>Get <see cref="T:UnitsNet.BrakeSpecificFuelConsumption"/> from <see cref="T:UnitsNet.MassFlow"/> divided by <see cref="T:UnitsNet.Power"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFlow.op_Multiply(UnitsNet.MassFlow,UnitsNet.SpecificEnergy)">
            <summary>Get <see cref="T:UnitsNet.Power"/> from <see cref="T:UnitsNet.MassFlow"/> times <see cref="T:UnitsNet.SpecificEnergy"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFlow.op_Division(UnitsNet.MassFlow,UnitsNet.Area)">
            <summary>Get <see cref="T:UnitsNet.MassFlux"/> from <see cref="T:UnitsNet.MassFlow"/> divided by <see cref="T:UnitsNet.Area"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFlow.op_Division(UnitsNet.MassFlow,UnitsNet.MassFlux)">
            <summary>Get <see cref="T:UnitsNet.Area"/> from <see cref="T:UnitsNet.MassFlow"/> divided by <see cref="T:UnitsNet.MassFlux"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFlow.op_Division(UnitsNet.MassFlow,UnitsNet.VolumeFlow)">
            <summary>Get <see cref="T:UnitsNet.Density"/> from <see cref="T:UnitsNet.MassFlow"/> divided by <see cref="T:UnitsNet.VolumeFlow"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFlow.op_Division(UnitsNet.MassFlow,UnitsNet.Density)">
            <summary>Get <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="T:UnitsNet.MassFlow"/> divided by <see cref="T:UnitsNet.Density"/>.</summary>
        </member>
        <member name="F:UnitsNet.MassFlow._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.MassFlow._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.MassFlow.#ctor(System.Double,UnitsNet.Units.MassFlowUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.MassFlow.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.MassFlow" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.MassFlow.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.MassFlow.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.BaseUnit">
            <summary>
                The base unit of MassFlow, which is GramPerSecond. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.MaxValue">
            <summary>
            Represents the largest possible value of MassFlow
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.MinValue">
            <summary>
            Represents the smallest possible value of MassFlow
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.MassFlow.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.Units">
            <summary>
                All units of measurement for the MassFlow quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit GramPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.MassFlow.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.MassFlow.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.MassFlow.Type">
            <summary>
                The <see cref="P:UnitsNet.MassFlow.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.MassFlow.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.CentigramsPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.CentigramPerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.CentigramsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.CentigramPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.DecagramsPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.DecagramPerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.DecagramsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.DecagramPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.DecigramsPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.DecigramPerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.DecigramsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.DecigramPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.GramsPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.GramPerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.GramsPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.GramPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.GramsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.GramPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.HectogramsPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.HectogramPerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.HectogramsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.HectogramPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.KilogramsPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.KilogramPerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.KilogramsPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.KilogramPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.KilogramsPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.KilogramPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.KilogramsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.KilogramPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.MegagramsPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.MegagramPerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.MegapoundsPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.MegapoundPerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.MegapoundsPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.MegapoundPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.MegapoundsPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.MegapoundPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.MegapoundsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.MegapoundPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.MicrogramsPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.MicrogramPerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.MicrogramsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.MicrogramPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.MilligramsPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.MilligramPerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.MilligramsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.MilligramPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.NanogramsPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.NanogramPerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.NanogramsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.NanogramPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.PoundsPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.PoundPerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.PoundsPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.PoundPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.PoundsPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.PoundPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.PoundsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.PoundPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.ShortTonsPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.ShortTonPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.TonnesPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.TonnePerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.TonnesPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFlowUnit.TonnePerHour"/>
            </summary>
        </member>
        <member name="M:UnitsNet.MassFlow.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.MassFlow.GetAbbreviation(UnitsNet.Units.MassFlowUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.MassFlow.GetAbbreviation(UnitsNet.Units.MassFlowUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassFlow.FromCentigramsPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.CentigramPerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromCentigramsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.CentigramPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromDecagramsPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.DecagramPerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromDecagramsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.DecagramPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromDecigramsPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.DecigramPerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromDecigramsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.DecigramPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromGramsPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.GramPerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromGramsPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.GramPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromGramsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.GramPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromHectogramsPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.HectogramPerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromHectogramsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.HectogramPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromKilogramsPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.KilogramPerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromKilogramsPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.KilogramPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromKilogramsPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.KilogramPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromKilogramsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.KilogramPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromMegagramsPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.MegagramPerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromMegapoundsPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.MegapoundPerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromMegapoundsPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.MegapoundPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromMegapoundsPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.MegapoundPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromMegapoundsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.MegapoundPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromMicrogramsPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.MicrogramPerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromMicrogramsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.MicrogramPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromMilligramsPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.MilligramPerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromMilligramsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.MilligramPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromNanogramsPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.NanogramPerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromNanogramsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.NanogramPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromPoundsPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.PoundPerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromPoundsPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.PoundPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromPoundsPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.PoundPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromPoundsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.PoundPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromShortTonsPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.ShortTonPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromTonnesPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.TonnePerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromTonnesPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlow"/> from <see cref="F:UnitsNet.Units.MassFlowUnit.TonnePerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.From(UnitsNet.QuantityValue,UnitsNet.Units.MassFlowUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.MassFlowUnit" /> to <see cref="T:UnitsNet.MassFlow" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>MassFlow unit value.</returns>
        </member>
        <member name="M:UnitsNet.MassFlow.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MassFlow.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassFlow.TryParse(System.String,UnitsNet.MassFlow@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MassFlow.TryParse(System.String,System.IFormatProvider,UnitsNet.MassFlow@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassFlow.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.TryParseUnit(System.String,UnitsNet.Units.MassFlowUnit@)">
            <inheritdoc cref="M:UnitsNet.MassFlow.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MassFlowUnit@)"/>
        </member>
        <member name="M:UnitsNet.MassFlow.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MassFlowUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassFlow.op_UnaryNegation(UnitsNet.MassFlow)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.MassFlow.op_Addition(UnitsNet.MassFlow,UnitsNet.MassFlow)">
            <summary>Get <see cref="T:UnitsNet.MassFlow"/> from adding two <see cref="T:UnitsNet.MassFlow"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFlow.op_Subtraction(UnitsNet.MassFlow,UnitsNet.MassFlow)">
            <summary>Get <see cref="T:UnitsNet.MassFlow"/> from subtracting two <see cref="T:UnitsNet.MassFlow"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFlow.op_Multiply(System.Double,UnitsNet.MassFlow)">
            <summary>Get <see cref="T:UnitsNet.MassFlow"/> from multiplying value and <see cref="T:UnitsNet.MassFlow"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFlow.op_Multiply(UnitsNet.MassFlow,System.Double)">
            <summary>Get <see cref="T:UnitsNet.MassFlow"/> from multiplying value and <see cref="T:UnitsNet.MassFlow"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFlow.op_Division(UnitsNet.MassFlow,System.Double)">
            <summary>Get <see cref="T:UnitsNet.MassFlow"/> from dividing <see cref="T:UnitsNet.MassFlow"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.MassFlow.op_Division(UnitsNet.MassFlow,UnitsNet.MassFlow)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.MassFlow"/> by <see cref="T:UnitsNet.MassFlow"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFlow.op_LessThanOrEqual(UnitsNet.MassFlow,UnitsNet.MassFlow)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.MassFlow.op_GreaterThanOrEqual(UnitsNet.MassFlow,UnitsNet.MassFlow)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.MassFlow.op_LessThan(UnitsNet.MassFlow,UnitsNet.MassFlow)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.MassFlow.op_GreaterThan(UnitsNet.MassFlow,UnitsNet.MassFlow)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.MassFlow.op_Equality(UnitsNet.MassFlow,UnitsNet.MassFlow)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.MassFlow.Equals(UnitsNet.MassFlow,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MassFlow.op_Inequality(UnitsNet.MassFlow,UnitsNet.MassFlow)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.MassFlow.Equals(UnitsNet.MassFlow,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MassFlow.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassFlow.CompareTo(UnitsNet.MassFlow)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassFlow.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.MassFlow.Equals(UnitsNet.MassFlow,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MassFlow.Equals(UnitsNet.MassFlow)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.MassFlow.Equals(UnitsNet.MassFlow,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MassFlow.Equals(UnitsNet.MassFlow,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another MassFlow within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.MassFlow.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current MassFlow.</returns>
        </member>
        <member name="M:UnitsNet.MassFlow.As(UnitsNet.Units.MassFlowUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MassFlow.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.MassFlow.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassFlow.ToUnit(UnitsNet.Units.MassFlowUnit)">
            <summary>
                Converts this MassFlow to another MassFlow with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A MassFlow with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MassFlow.ToUnit(UnitsNet.Units.MassFlowUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this MassFlow to another MassFlow using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A MassFlow with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MassFlow.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassFlow.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.MassFlow.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassFlow.UnitsNet#IQuantity{UnitsNet#Units#MassFlowUnit}#ToUnit(UnitsNet.Units.MassFlowUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassFlow.UnitsNet#IQuantity{UnitsNet#Units#MassFlowUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassFlow.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MassFlow.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassFlow.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassFlow.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassFlow.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.MassFlow.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.MassFlux">
            <inheritdoc />
            <summary>
                Mass flux is the mass flow rate per unit area.
            </summary>
        </member>
        <member name="M:UnitsNet.MassFlux.op_Division(UnitsNet.MassFlux,UnitsNet.Speed)">
            <summary>Get <see cref="T:UnitsNet.Density"/> from <see cref="T:UnitsNet.MassFlux"/> divided by <see cref="T:UnitsNet.Speed"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFlux.op_Division(UnitsNet.MassFlux,UnitsNet.Density)">
            <summary>Get <see cref="T:UnitsNet.Speed"/> from <see cref="T:UnitsNet.MassFlux"/> divided by <see cref="T:UnitsNet.Density"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFlux.op_Multiply(UnitsNet.MassFlux,UnitsNet.Area)">
            <summary>Get <see cref="T:UnitsNet.MassFlow"/> from <see cref="T:UnitsNet.MassFlux"/> times <see cref="T:UnitsNet.Area"/>.</summary>
        </member>
        <member name="F:UnitsNet.MassFlux._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.MassFlux._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.MassFlux.#ctor(System.Double,UnitsNet.Units.MassFluxUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlux.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.MassFlux.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.MassFlux" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.MassFlux.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.MassFlux.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.BaseUnit">
            <summary>
                The base unit of MassFlux, which is KilogramPerSecondPerSquareMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.MaxValue">
            <summary>
            Represents the largest possible value of MassFlux
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.MinValue">
            <summary>
            Represents the smallest possible value of MassFlux
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.MassFlux.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.Units">
            <summary>
                All units of measurement for the MassFlux quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit KilogramPerSecondPerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.MassFlux.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.MassFlux.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.MassFlux.Type">
            <summary>
                The <see cref="P:UnitsNet.MassFlux.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.MassFlux.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.GramsPerHourPerSquareCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFluxUnit.GramPerHourPerSquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.GramsPerHourPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFluxUnit.GramPerHourPerSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.GramsPerHourPerSquareMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFluxUnit.GramPerHourPerSquareMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.GramsPerSecondPerSquareCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFluxUnit.GramPerSecondPerSquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.GramsPerSecondPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFluxUnit.GramPerSecondPerSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.GramsPerSecondPerSquareMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFluxUnit.GramPerSecondPerSquareMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.KilogramsPerHourPerSquareCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFluxUnit.KilogramPerHourPerSquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.KilogramsPerHourPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFluxUnit.KilogramPerHourPerSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.KilogramsPerHourPerSquareMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFluxUnit.KilogramPerHourPerSquareMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.KilogramsPerSecondPerSquareCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFluxUnit.KilogramPerSecondPerSquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.KilogramsPerSecondPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFluxUnit.KilogramPerSecondPerSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.KilogramsPerSecondPerSquareMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFluxUnit.KilogramPerSecondPerSquareMillimeter"/>
            </summary>
        </member>
        <member name="M:UnitsNet.MassFlux.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.MassFlux.GetAbbreviation(UnitsNet.Units.MassFluxUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.MassFlux.GetAbbreviation(UnitsNet.Units.MassFluxUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassFlux.FromGramsPerHourPerSquareCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlux"/> from <see cref="F:UnitsNet.Units.MassFluxUnit.GramPerHourPerSquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlux.FromGramsPerHourPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlux"/> from <see cref="F:UnitsNet.Units.MassFluxUnit.GramPerHourPerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlux.FromGramsPerHourPerSquareMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlux"/> from <see cref="F:UnitsNet.Units.MassFluxUnit.GramPerHourPerSquareMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlux.FromGramsPerSecondPerSquareCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlux"/> from <see cref="F:UnitsNet.Units.MassFluxUnit.GramPerSecondPerSquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlux.FromGramsPerSecondPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlux"/> from <see cref="F:UnitsNet.Units.MassFluxUnit.GramPerSecondPerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlux.FromGramsPerSecondPerSquareMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlux"/> from <see cref="F:UnitsNet.Units.MassFluxUnit.GramPerSecondPerSquareMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlux.FromKilogramsPerHourPerSquareCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlux"/> from <see cref="F:UnitsNet.Units.MassFluxUnit.KilogramPerHourPerSquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlux.FromKilogramsPerHourPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlux"/> from <see cref="F:UnitsNet.Units.MassFluxUnit.KilogramPerHourPerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlux.FromKilogramsPerHourPerSquareMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlux"/> from <see cref="F:UnitsNet.Units.MassFluxUnit.KilogramPerHourPerSquareMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlux.FromKilogramsPerSecondPerSquareCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlux"/> from <see cref="F:UnitsNet.Units.MassFluxUnit.KilogramPerSecondPerSquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlux.FromKilogramsPerSecondPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlux"/> from <see cref="F:UnitsNet.Units.MassFluxUnit.KilogramPerSecondPerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlux.FromKilogramsPerSecondPerSquareMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFlux"/> from <see cref="F:UnitsNet.Units.MassFluxUnit.KilogramPerSecondPerSquareMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlux.From(UnitsNet.QuantityValue,UnitsNet.Units.MassFluxUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.MassFluxUnit" /> to <see cref="T:UnitsNet.MassFlux" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>MassFlux unit value.</returns>
        </member>
        <member name="M:UnitsNet.MassFlux.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MassFlux.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassFlux.TryParse(System.String,UnitsNet.MassFlux@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MassFlux.TryParse(System.String,System.IFormatProvider,UnitsNet.MassFlux@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassFlux.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MassFlux.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MassFlux.TryParseUnit(System.String,UnitsNet.Units.MassFluxUnit@)">
            <inheritdoc cref="M:UnitsNet.MassFlux.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MassFluxUnit@)"/>
        </member>
        <member name="M:UnitsNet.MassFlux.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MassFluxUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassFlux.op_UnaryNegation(UnitsNet.MassFlux)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.MassFlux.op_Addition(UnitsNet.MassFlux,UnitsNet.MassFlux)">
            <summary>Get <see cref="T:UnitsNet.MassFlux"/> from adding two <see cref="T:UnitsNet.MassFlux"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFlux.op_Subtraction(UnitsNet.MassFlux,UnitsNet.MassFlux)">
            <summary>Get <see cref="T:UnitsNet.MassFlux"/> from subtracting two <see cref="T:UnitsNet.MassFlux"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFlux.op_Multiply(System.Double,UnitsNet.MassFlux)">
            <summary>Get <see cref="T:UnitsNet.MassFlux"/> from multiplying value and <see cref="T:UnitsNet.MassFlux"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFlux.op_Multiply(UnitsNet.MassFlux,System.Double)">
            <summary>Get <see cref="T:UnitsNet.MassFlux"/> from multiplying value and <see cref="T:UnitsNet.MassFlux"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFlux.op_Division(UnitsNet.MassFlux,System.Double)">
            <summary>Get <see cref="T:UnitsNet.MassFlux"/> from dividing <see cref="T:UnitsNet.MassFlux"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.MassFlux.op_Division(UnitsNet.MassFlux,UnitsNet.MassFlux)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.MassFlux"/> by <see cref="T:UnitsNet.MassFlux"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFlux.op_LessThanOrEqual(UnitsNet.MassFlux,UnitsNet.MassFlux)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.MassFlux.op_GreaterThanOrEqual(UnitsNet.MassFlux,UnitsNet.MassFlux)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.MassFlux.op_LessThan(UnitsNet.MassFlux,UnitsNet.MassFlux)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.MassFlux.op_GreaterThan(UnitsNet.MassFlux,UnitsNet.MassFlux)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.MassFlux.op_Equality(UnitsNet.MassFlux,UnitsNet.MassFlux)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.MassFlux.Equals(UnitsNet.MassFlux,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MassFlux.op_Inequality(UnitsNet.MassFlux,UnitsNet.MassFlux)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.MassFlux.Equals(UnitsNet.MassFlux,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MassFlux.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassFlux.CompareTo(UnitsNet.MassFlux)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassFlux.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.MassFlux.Equals(UnitsNet.MassFlux,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MassFlux.Equals(UnitsNet.MassFlux)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.MassFlux.Equals(UnitsNet.MassFlux,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MassFlux.Equals(UnitsNet.MassFlux,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another MassFlux within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.MassFlux.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current MassFlux.</returns>
        </member>
        <member name="M:UnitsNet.MassFlux.As(UnitsNet.Units.MassFluxUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MassFlux.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.MassFlux.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassFlux.ToUnit(UnitsNet.Units.MassFluxUnit)">
            <summary>
                Converts this MassFlux to another MassFlux with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A MassFlux with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MassFlux.ToUnit(UnitsNet.Units.MassFluxUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this MassFlux to another MassFlux using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A MassFlux with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MassFlux.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassFlux.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.MassFlux.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassFlux.UnitsNet#IQuantity{UnitsNet#Units#MassFluxUnit}#ToUnit(UnitsNet.Units.MassFluxUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassFlux.UnitsNet#IQuantity{UnitsNet#Units#MassFluxUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassFlux.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MassFlux.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassFlux.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassFlux.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassFlux.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.MassFlux.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.MassFraction">
            <inheritdoc />
            <summary>
                The mass fraction is defined as the mass of a constituent divided by the total mass of the mixture.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Mass_fraction_(chemistry)
            </remarks>
        </member>
        <member name="M:UnitsNet.MassFraction.GetComponentMass(UnitsNet.Mass)">
            <summary>
            Get the <see cref="T:UnitsNet.Mass"/> of the component by multiplying the <see cref="T:UnitsNet.Mass"/> of the mixture and this <see cref="T:UnitsNet.MassFraction"/>.
            </summary>
            <param name="totalMass">The total mass of the mixture</param>
            <returns>The actual mass of the component involved in this mixture</returns>
        </member>
        <member name="M:UnitsNet.MassFraction.GetTotalMass(UnitsNet.Mass)">
            <summary>
            Get the total <see cref="T:UnitsNet.Mass"/> of the mixture by dividing the <see cref="T:UnitsNet.Mass"/> of the component by this <see cref="T:UnitsNet.MassFraction"/>
            </summary>
            <param name="componentMass">The actual mass of the component involved in this mixture</param>
            <returns>The total mass of the mixture</returns>
        </member>
        <member name="M:UnitsNet.MassFraction.FromMasses(UnitsNet.Mass,UnitsNet.Mass)">
            <summary>
                Get <see cref="T:UnitsNet.MassFraction" /> from a component <see cref="T:UnitsNet.Mass" /> and total mixture <see cref="T:UnitsNet.Mass" /> .
            </summary>
        </member>
        <member name="M:UnitsNet.MassFraction.op_Multiply(UnitsNet.MassFraction,UnitsNet.Mass)">
            <summary>Get <see cref="T:UnitsNet.Mass"/> from <see cref="T:UnitsNet.Mass"/> multiplied by a <see cref="T:UnitsNet.MassFraction"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFraction.op_Multiply(UnitsNet.Mass,UnitsNet.MassFraction)">
            <summary>Get <see cref="T:UnitsNet.Mass"/> from <see cref="T:UnitsNet.Mass"/> multiplied by a <see cref="T:UnitsNet.MassFraction"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFraction.op_Division(UnitsNet.Mass,UnitsNet.MassFraction)">
            <summary>Get the total <see cref="T:UnitsNet.Mass"/> by dividing the component  <see cref="T:UnitsNet.Mass"/> by a <see cref="T:UnitsNet.MassFraction"/>.</summary>
        </member>
        <member name="F:UnitsNet.MassFraction._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.MassFraction._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.MassFraction.#ctor(System.Double,UnitsNet.Units.MassFractionUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFraction.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.MassFraction.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.MassFraction" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.MassFraction.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.MassFraction.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.BaseUnit">
            <summary>
                The base unit of MassFraction, which is DecimalFraction. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.MaxValue">
            <summary>
            Represents the largest possible value of MassFraction
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.MinValue">
            <summary>
            Represents the smallest possible value of MassFraction
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.MassFraction.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.Units">
            <summary>
                All units of measurement for the MassFraction quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit DecimalFraction.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.MassFraction.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.MassFraction.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.MassFraction.Type">
            <summary>
                The <see cref="P:UnitsNet.MassFraction.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.MassFraction.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.CentigramsPerGram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFractionUnit.CentigramPerGram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.CentigramsPerKilogram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFractionUnit.CentigramPerKilogram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.DecagramsPerGram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFractionUnit.DecagramPerGram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.DecagramsPerKilogram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFractionUnit.DecagramPerKilogram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.DecigramsPerGram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFractionUnit.DecigramPerGram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.DecigramsPerKilogram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFractionUnit.DecigramPerKilogram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.DecimalFractions">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFractionUnit.DecimalFraction"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.GramsPerGram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFractionUnit.GramPerGram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.GramsPerKilogram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFractionUnit.GramPerKilogram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.HectogramsPerGram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFractionUnit.HectogramPerGram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.HectogramsPerKilogram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFractionUnit.HectogramPerKilogram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.KilogramsPerGram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFractionUnit.KilogramPerGram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.KilogramsPerKilogram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFractionUnit.KilogramPerKilogram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.MicrogramsPerGram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFractionUnit.MicrogramPerGram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.MicrogramsPerKilogram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFractionUnit.MicrogramPerKilogram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.MilligramsPerGram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFractionUnit.MilligramPerGram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.MilligramsPerKilogram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFractionUnit.MilligramPerKilogram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.NanogramsPerGram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFractionUnit.NanogramPerGram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.NanogramsPerKilogram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFractionUnit.NanogramPerKilogram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.PartsPerBillion">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFractionUnit.PartPerBillion"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.PartsPerMillion">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFractionUnit.PartPerMillion"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.PartsPerThousand">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFractionUnit.PartPerThousand"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.PartsPerTrillion">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFractionUnit.PartPerTrillion"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassFraction.Percent">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassFractionUnit.Percent"/>
            </summary>
        </member>
        <member name="M:UnitsNet.MassFraction.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.MassFraction.GetAbbreviation(UnitsNet.Units.MassFractionUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.MassFraction.GetAbbreviation(UnitsNet.Units.MassFractionUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassFraction.FromCentigramsPerGram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFraction"/> from <see cref="F:UnitsNet.Units.MassFractionUnit.CentigramPerGram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFraction.FromCentigramsPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFraction"/> from <see cref="F:UnitsNet.Units.MassFractionUnit.CentigramPerKilogram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFraction.FromDecagramsPerGram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFraction"/> from <see cref="F:UnitsNet.Units.MassFractionUnit.DecagramPerGram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFraction.FromDecagramsPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFraction"/> from <see cref="F:UnitsNet.Units.MassFractionUnit.DecagramPerKilogram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFraction.FromDecigramsPerGram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFraction"/> from <see cref="F:UnitsNet.Units.MassFractionUnit.DecigramPerGram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFraction.FromDecigramsPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFraction"/> from <see cref="F:UnitsNet.Units.MassFractionUnit.DecigramPerKilogram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFraction.FromDecimalFractions(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFraction"/> from <see cref="F:UnitsNet.Units.MassFractionUnit.DecimalFraction"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFraction.FromGramsPerGram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFraction"/> from <see cref="F:UnitsNet.Units.MassFractionUnit.GramPerGram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFraction.FromGramsPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFraction"/> from <see cref="F:UnitsNet.Units.MassFractionUnit.GramPerKilogram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFraction.FromHectogramsPerGram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFraction"/> from <see cref="F:UnitsNet.Units.MassFractionUnit.HectogramPerGram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFraction.FromHectogramsPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFraction"/> from <see cref="F:UnitsNet.Units.MassFractionUnit.HectogramPerKilogram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFraction.FromKilogramsPerGram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFraction"/> from <see cref="F:UnitsNet.Units.MassFractionUnit.KilogramPerGram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFraction.FromKilogramsPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFraction"/> from <see cref="F:UnitsNet.Units.MassFractionUnit.KilogramPerKilogram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFraction.FromMicrogramsPerGram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFraction"/> from <see cref="F:UnitsNet.Units.MassFractionUnit.MicrogramPerGram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFraction.FromMicrogramsPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFraction"/> from <see cref="F:UnitsNet.Units.MassFractionUnit.MicrogramPerKilogram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFraction.FromMilligramsPerGram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFraction"/> from <see cref="F:UnitsNet.Units.MassFractionUnit.MilligramPerGram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFraction.FromMilligramsPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFraction"/> from <see cref="F:UnitsNet.Units.MassFractionUnit.MilligramPerKilogram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFraction.FromNanogramsPerGram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFraction"/> from <see cref="F:UnitsNet.Units.MassFractionUnit.NanogramPerGram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFraction.FromNanogramsPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFraction"/> from <see cref="F:UnitsNet.Units.MassFractionUnit.NanogramPerKilogram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFraction.FromPartsPerBillion(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFraction"/> from <see cref="F:UnitsNet.Units.MassFractionUnit.PartPerBillion"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFraction.FromPartsPerMillion(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFraction"/> from <see cref="F:UnitsNet.Units.MassFractionUnit.PartPerMillion"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFraction.FromPartsPerThousand(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFraction"/> from <see cref="F:UnitsNet.Units.MassFractionUnit.PartPerThousand"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFraction.FromPartsPerTrillion(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFraction"/> from <see cref="F:UnitsNet.Units.MassFractionUnit.PartPerTrillion"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFraction.FromPercent(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassFraction"/> from <see cref="F:UnitsNet.Units.MassFractionUnit.Percent"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFraction.From(UnitsNet.QuantityValue,UnitsNet.Units.MassFractionUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.MassFractionUnit" /> to <see cref="T:UnitsNet.MassFraction" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>MassFraction unit value.</returns>
        </member>
        <member name="M:UnitsNet.MassFraction.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MassFraction.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassFraction.TryParse(System.String,UnitsNet.MassFraction@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MassFraction.TryParse(System.String,System.IFormatProvider,UnitsNet.MassFraction@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassFraction.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MassFraction.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MassFraction.TryParseUnit(System.String,UnitsNet.Units.MassFractionUnit@)">
            <inheritdoc cref="M:UnitsNet.MassFraction.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MassFractionUnit@)"/>
        </member>
        <member name="M:UnitsNet.MassFraction.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MassFractionUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassFraction.op_UnaryNegation(UnitsNet.MassFraction)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.MassFraction.op_Addition(UnitsNet.MassFraction,UnitsNet.MassFraction)">
            <summary>Get <see cref="T:UnitsNet.MassFraction"/> from adding two <see cref="T:UnitsNet.MassFraction"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFraction.op_Subtraction(UnitsNet.MassFraction,UnitsNet.MassFraction)">
            <summary>Get <see cref="T:UnitsNet.MassFraction"/> from subtracting two <see cref="T:UnitsNet.MassFraction"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFraction.op_Multiply(System.Double,UnitsNet.MassFraction)">
            <summary>Get <see cref="T:UnitsNet.MassFraction"/> from multiplying value and <see cref="T:UnitsNet.MassFraction"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFraction.op_Multiply(UnitsNet.MassFraction,System.Double)">
            <summary>Get <see cref="T:UnitsNet.MassFraction"/> from multiplying value and <see cref="T:UnitsNet.MassFraction"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFraction.op_Division(UnitsNet.MassFraction,System.Double)">
            <summary>Get <see cref="T:UnitsNet.MassFraction"/> from dividing <see cref="T:UnitsNet.MassFraction"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.MassFraction.op_Division(UnitsNet.MassFraction,UnitsNet.MassFraction)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.MassFraction"/> by <see cref="T:UnitsNet.MassFraction"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassFraction.op_LessThanOrEqual(UnitsNet.MassFraction,UnitsNet.MassFraction)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.MassFraction.op_GreaterThanOrEqual(UnitsNet.MassFraction,UnitsNet.MassFraction)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.MassFraction.op_LessThan(UnitsNet.MassFraction,UnitsNet.MassFraction)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.MassFraction.op_GreaterThan(UnitsNet.MassFraction,UnitsNet.MassFraction)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.MassFraction.op_Equality(UnitsNet.MassFraction,UnitsNet.MassFraction)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.MassFraction.Equals(UnitsNet.MassFraction,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MassFraction.op_Inequality(UnitsNet.MassFraction,UnitsNet.MassFraction)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.MassFraction.Equals(UnitsNet.MassFraction,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MassFraction.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassFraction.CompareTo(UnitsNet.MassFraction)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassFraction.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.MassFraction.Equals(UnitsNet.MassFraction,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MassFraction.Equals(UnitsNet.MassFraction)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.MassFraction.Equals(UnitsNet.MassFraction,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MassFraction.Equals(UnitsNet.MassFraction,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another MassFraction within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.MassFraction.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current MassFraction.</returns>
        </member>
        <member name="M:UnitsNet.MassFraction.As(UnitsNet.Units.MassFractionUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MassFraction.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.MassFraction.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassFraction.ToUnit(UnitsNet.Units.MassFractionUnit)">
            <summary>
                Converts this MassFraction to another MassFraction with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A MassFraction with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MassFraction.ToUnit(UnitsNet.Units.MassFractionUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this MassFraction to another MassFraction using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A MassFraction with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MassFraction.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassFraction.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.MassFraction.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassFraction.UnitsNet#IQuantity{UnitsNet#Units#MassFractionUnit}#ToUnit(UnitsNet.Units.MassFractionUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassFraction.UnitsNet#IQuantity{UnitsNet#Units#MassFractionUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassFraction.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MassFraction.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassFraction.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassFraction.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassFraction.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.MassFraction.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Molarity">
            <inheritdoc />
            <summary>
                Molar concentration, also called molarity, amount concentration or substance concentration, is a measure of the concentration of a solute in a solution, or of any chemical species, in terms of amount of substance in a given volume. 
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Molar_concentration
            </remarks>
        </member>
        <member name="M:UnitsNet.Molarity.#ctor(UnitsNet.Density,UnitsNet.Mass)">
            <summary>
                Construct from <see cref="T:UnitsNet.Density"/> divided by <see cref="T:UnitsNet.Mass"/>.
            </summary>
            <seealso cref="M:UnitsNet.MassConcentration.op_Division(UnitsNet.MassConcentration,UnitsNet.MolarMass)"/>
        </member>
        <member name="M:UnitsNet.Molarity.ToDensity(UnitsNet.Mass)">
            <summary>
                Get a <see cref="T:UnitsNet.Density"/> from this <see cref="T:UnitsNet.Molarity"/>.
            </summary>
            <param name="molecularWeight"></param>
            <seealso cref="M:UnitsNet.Molarity.ToMassConcentration(UnitsNet.MolarMass)"/>
        </member>
        <member name="M:UnitsNet.Molarity.ToMassConcentration(UnitsNet.MolarMass)">
            <summary>
                Get a <see cref="T:UnitsNet.MassConcentration"/> from this <see cref="T:UnitsNet.Molarity"/>.
            </summary>
            <param name="molecularWeight"></param>
        </member>
        <member name="M:UnitsNet.Molarity.ToVolumeConcentration(UnitsNet.Density,UnitsNet.MolarMass)">
            <summary>
                Get a <see cref="T:UnitsNet.MassConcentration"/> from this <see cref="T:UnitsNet.Molarity"/>.
            </summary>
            <param name="componentDensity"></param>
            <param name="componentMass"></param>
        </member>
        <member name="M:UnitsNet.Molarity.FromDensity(UnitsNet.Density,UnitsNet.Mass)">
            <summary>
                Get <see cref="T:UnitsNet.Molarity"/> from <see cref="T:UnitsNet.Density"/>.
            </summary>
            <param name="density"></param>
            <param name="molecularWeight"></param>
        </member>
        <member name="M:UnitsNet.Molarity.FromVolumeConcentration(UnitsNet.VolumeConcentration,UnitsNet.Density,UnitsNet.MolarMass)">
            <summary>
             Get <see cref="T:UnitsNet.Molarity"/> from <see cref="T:UnitsNet.VolumeConcentration"/> and known component <see cref="T:UnitsNet.Density"/> and <see cref="T:UnitsNet.MolarMass"/>.
            </summary>
            <param name="volumeConcentration"></param>
            <param name="componentDensity"></param>
            <param name="componentMass"></param>
            <returns></returns>
        </member>
        <member name="M:UnitsNet.Molarity.op_Multiply(UnitsNet.Molarity,UnitsNet.MolarMass)">
            <summary>Get <see cref="T:UnitsNet.MassConcentration" /> from <see cref="T:UnitsNet.Molarity" /> times the <see cref="T:UnitsNet.MolarMass" />.</summary>
        </member>
        <member name="M:UnitsNet.Molarity.op_Multiply(UnitsNet.MolarMass,UnitsNet.Molarity)">
            <summary>Get <see cref="T:UnitsNet.MassConcentration" /> from <see cref="T:UnitsNet.MolarMass" /> times the <see cref="T:UnitsNet.Molarity" />.</summary>
        </member>
        <member name="M:UnitsNet.Molarity.op_Multiply(UnitsNet.Molarity,UnitsNet.VolumeConcentration)">
            <summary>Get <see cref="T:UnitsNet.Molarity" /> from diluting the current <see cref="T:UnitsNet.Molarity" /> by the given <see cref="T:UnitsNet.VolumeConcentration" />.</summary>
        </member>
        <member name="M:UnitsNet.Molarity.op_Multiply(UnitsNet.VolumeConcentration,UnitsNet.Molarity)">
            <summary>Get <see cref="T:UnitsNet.Molarity" /> from diluting the current <see cref="T:UnitsNet.Molarity" /> by the given <see cref="T:UnitsNet.VolumeConcentration" />.</summary>
        </member>
        <member name="F:UnitsNet.Molarity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Molarity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Molarity.#ctor(System.Double,UnitsNet.Units.MolarityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Molarity.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Molarity.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Molarity" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Molarity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Molarity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.BaseUnit">
            <summary>
                The base unit of Molarity, which is MolesPerCubicMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.MaxValue">
            <summary>
            Represents the largest possible value of Molarity
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.MinValue">
            <summary>
            Represents the smallest possible value of Molarity
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Molarity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.Units">
            <summary>
                All units of measurement for the Molarity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit MolesPerCubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Molarity.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Molarity.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Molarity.Type">
            <summary>
                The <see cref="P:UnitsNet.Molarity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Molarity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.CentimolesPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MolarityUnit.CentimolePerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.DecimolesPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MolarityUnit.DecimolePerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.FemtomolesPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MolarityUnit.FemtomolePerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.MicromolesPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MolarityUnit.MicromolePerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.MillimolesPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MolarityUnit.MillimolePerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.MolesPerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MolarityUnit.MolePerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.MolesPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MolarityUnit.MolePerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.NanomolesPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MolarityUnit.NanomolePerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.PicomolesPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MolarityUnit.PicomolePerLiter"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Molarity.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Molarity.GetAbbreviation(UnitsNet.Units.MolarityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Molarity.GetAbbreviation(UnitsNet.Units.MolarityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Molarity.FromCentimolesPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Molarity"/> from <see cref="F:UnitsNet.Units.MolarityUnit.CentimolePerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Molarity.FromDecimolesPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Molarity"/> from <see cref="F:UnitsNet.Units.MolarityUnit.DecimolePerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Molarity.FromFemtomolesPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Molarity"/> from <see cref="F:UnitsNet.Units.MolarityUnit.FemtomolePerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Molarity.FromMicromolesPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Molarity"/> from <see cref="F:UnitsNet.Units.MolarityUnit.MicromolePerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Molarity.FromMillimolesPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Molarity"/> from <see cref="F:UnitsNet.Units.MolarityUnit.MillimolePerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Molarity.FromMolesPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Molarity"/> from <see cref="F:UnitsNet.Units.MolarityUnit.MolePerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Molarity.FromMolesPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Molarity"/> from <see cref="F:UnitsNet.Units.MolarityUnit.MolePerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Molarity.FromNanomolesPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Molarity"/> from <see cref="F:UnitsNet.Units.MolarityUnit.NanomolePerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Molarity.FromPicomolesPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Molarity"/> from <see cref="F:UnitsNet.Units.MolarityUnit.PicomolePerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Molarity.From(UnitsNet.QuantityValue,UnitsNet.Units.MolarityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.MolarityUnit" /> to <see cref="T:UnitsNet.Molarity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Molarity unit value.</returns>
        </member>
        <member name="M:UnitsNet.Molarity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Molarity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Molarity.TryParse(System.String,UnitsNet.Molarity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Molarity.TryParse(System.String,System.IFormatProvider,UnitsNet.Molarity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Molarity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Molarity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Molarity.TryParseUnit(System.String,UnitsNet.Units.MolarityUnit@)">
            <inheritdoc cref="M:UnitsNet.Molarity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MolarityUnit@)"/>
        </member>
        <member name="M:UnitsNet.Molarity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MolarityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Molarity.op_UnaryNegation(UnitsNet.Molarity)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Molarity.op_Addition(UnitsNet.Molarity,UnitsNet.Molarity)">
            <summary>Get <see cref="T:UnitsNet.Molarity"/> from adding two <see cref="T:UnitsNet.Molarity"/>.</summary>
        </member>
        <member name="M:UnitsNet.Molarity.op_Subtraction(UnitsNet.Molarity,UnitsNet.Molarity)">
            <summary>Get <see cref="T:UnitsNet.Molarity"/> from subtracting two <see cref="T:UnitsNet.Molarity"/>.</summary>
        </member>
        <member name="M:UnitsNet.Molarity.op_Multiply(System.Double,UnitsNet.Molarity)">
            <summary>Get <see cref="T:UnitsNet.Molarity"/> from multiplying value and <see cref="T:UnitsNet.Molarity"/>.</summary>
        </member>
        <member name="M:UnitsNet.Molarity.op_Multiply(UnitsNet.Molarity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Molarity"/> from multiplying value and <see cref="T:UnitsNet.Molarity"/>.</summary>
        </member>
        <member name="M:UnitsNet.Molarity.op_Division(UnitsNet.Molarity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Molarity"/> from dividing <see cref="T:UnitsNet.Molarity"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Molarity.op_Division(UnitsNet.Molarity,UnitsNet.Molarity)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Molarity"/> by <see cref="T:UnitsNet.Molarity"/>.</summary>
        </member>
        <member name="M:UnitsNet.Molarity.op_LessThanOrEqual(UnitsNet.Molarity,UnitsNet.Molarity)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Molarity.op_GreaterThanOrEqual(UnitsNet.Molarity,UnitsNet.Molarity)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Molarity.op_LessThan(UnitsNet.Molarity,UnitsNet.Molarity)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Molarity.op_GreaterThan(UnitsNet.Molarity,UnitsNet.Molarity)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Molarity.op_Equality(UnitsNet.Molarity,UnitsNet.Molarity)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Molarity.Equals(UnitsNet.Molarity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Molarity.op_Inequality(UnitsNet.Molarity,UnitsNet.Molarity)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Molarity.Equals(UnitsNet.Molarity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Molarity.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Molarity.CompareTo(UnitsNet.Molarity)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Molarity.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Molarity.Equals(UnitsNet.Molarity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Molarity.Equals(UnitsNet.Molarity)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Molarity.Equals(UnitsNet.Molarity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Molarity.Equals(UnitsNet.Molarity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Molarity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Molarity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Molarity.</returns>
        </member>
        <member name="M:UnitsNet.Molarity.As(UnitsNet.Units.MolarityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Molarity.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Molarity.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Molarity.ToUnit(UnitsNet.Units.MolarityUnit)">
            <summary>
                Converts this Molarity to another Molarity with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Molarity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Molarity.ToUnit(UnitsNet.Units.MolarityUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Molarity to another Molarity using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Molarity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Molarity.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Molarity.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Molarity.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Molarity.UnitsNet#IQuantity{UnitsNet#Units#MolarityUnit}#ToUnit(UnitsNet.Units.MolarityUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Molarity.UnitsNet#IQuantity{UnitsNet#Units#MolarityUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Molarity.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Molarity.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Molarity.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Molarity.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Molarity.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Molarity.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Power">
            <inheritdoc />
            <summary>
                In physics, power is the rate of doing work. It is equivalent to an amount of energy consumed per unit time.
            </summary>
        </member>
        <member name="M:UnitsNet.Power.ToPowerRatio">
            <summary>
                Gets a <see cref="T:UnitsNet.PowerRatio" /> from this <see cref="T:UnitsNet.Power" /> relative to one watt.
            </summary>
            <remarks>
                Provides a nicer syntax for converting a power to a power ratio (relative to 1 watt).
                <example>
                    <c>var powerRatio = power.ToPowerRatio();</c>
                </example>
            </remarks>
        </member>
        <member name="M:UnitsNet.Power.op_Multiply(UnitsNet.Power,System.TimeSpan)">
            <summary>Get <see cref="T:UnitsNet.Energy"/> from <see cref="T:UnitsNet.Power"/> times <see cref="T:System.TimeSpan"/>.</summary>
        </member>
        <member name="M:UnitsNet.Power.op_Multiply(System.TimeSpan,UnitsNet.Power)">
            <summary>Get <see cref="T:UnitsNet.Energy"/> from <see cref="T:System.TimeSpan"/> times <see cref="T:UnitsNet.Power"/>.</summary>
        </member>
        <member name="M:UnitsNet.Power.op_Multiply(UnitsNet.Power,UnitsNet.Duration)">
            <summary>Get <see cref="T:UnitsNet.Energy"/> from <see cref="T:UnitsNet.Power"/> times <see cref="T:UnitsNet.Duration"/>.</summary>
        </member>
        <member name="M:UnitsNet.Power.op_Multiply(UnitsNet.Duration,UnitsNet.Power)">
            <summary>Get <see cref="T:UnitsNet.Energy"/> from <see cref="T:UnitsNet.Duration"/> times <see cref="T:UnitsNet.Power"/>.</summary>
        </member>
        <member name="M:UnitsNet.Power.op_Division(UnitsNet.Power,UnitsNet.Speed)">
            <summary>Get <see cref="T:UnitsNet.Force"/> from <see cref="T:UnitsNet.Power"/> divided by <see cref="T:UnitsNet.Speed"/>.</summary>
        </member>
        <member name="M:UnitsNet.Power.op_Division(UnitsNet.Power,UnitsNet.RotationalSpeed)">
            <summary>Get <see cref="T:UnitsNet.Torque"/> from <see cref="T:UnitsNet.Power"/> divided by <see cref="T:UnitsNet.RotationalSpeed"/>.</summary>
        </member>
        <member name="M:UnitsNet.Power.op_Division(UnitsNet.Power,UnitsNet.Torque)">
            <summary>Get <see cref="T:UnitsNet.RotationalSpeed"/> from <see cref="T:UnitsNet.Power"/> divided by <see cref="T:UnitsNet.Torque"/>.</summary>
        </member>
        <member name="M:UnitsNet.Power.op_Multiply(UnitsNet.Power,UnitsNet.BrakeSpecificFuelConsumption)">
            <summary>Get <see cref="T:UnitsNet.MassFlow"/> from <see cref="T:UnitsNet.Power"/> times <see cref="T:UnitsNet.BrakeSpecificFuelConsumption"/>.</summary>
        </member>
        <member name="M:UnitsNet.Power.op_Division(UnitsNet.Power,UnitsNet.MassFlow)">
            <summary>Get <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="T:UnitsNet.Power"/> divided by <see cref="T:UnitsNet.MassFlow"/>.</summary>
        </member>
        <member name="M:UnitsNet.Power.op_Division(UnitsNet.Power,UnitsNet.SpecificEnergy)">
            <summary>Get <see cref="T:UnitsNet.MassFlow"/> from <see cref="T:UnitsNet.Power"/> divided by <see cref="T:UnitsNet.SpecificEnergy"/>.</summary>
        </member>
        <member name="M:UnitsNet.Power.op_Division(UnitsNet.Power,UnitsNet.Area)">
            <summary>Get <see cref="T:UnitsNet.HeatFlux"/> from <see cref="T:UnitsNet.Power"/> divided by <see cref="T:UnitsNet.Area"/>.</summary>
        </member>
        <member name="M:UnitsNet.Power.op_Division(UnitsNet.Power,UnitsNet.HeatFlux)">
            <summary>Get <see cref="T:UnitsNet.Area"/> from <see cref="T:UnitsNet.Power"/> divided by <see cref="T:UnitsNet.HeatFlux"/>.</summary>
        </member>
        <member name="M:UnitsNet.Power.op_Division(UnitsNet.Power,UnitsNet.ElectricPotential)">
            <summary>Calculate <see cref="T:UnitsNet.ElectricCurrent"/> from <see cref="T:UnitsNet.Power"/> divided by <see cref="T:UnitsNet.ElectricPotential"/>.</summary>
            <remarks>Electric power is defined as P = U * I, so I = P / U.</remarks>
        </member>
        <member name="M:UnitsNet.Power.op_Division(UnitsNet.Power,UnitsNet.ElectricCurrent)">
            <summary>Calculate <see cref="T:UnitsNet.ElectricPotential"/> from <see cref="T:UnitsNet.Power"/> divided by <see cref="T:UnitsNet.ElectricCurrent"/>.</summary>
            <remarks>Electric power is defined as P = U * I, so I = P / U.</remarks>
        </member>
        <member name="F:UnitsNet.Power._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Power._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Power.#ctor(System.Decimal,UnitsNet.Units.PowerUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.#ctor(System.Decimal,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Power.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Power" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Power.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Power.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.BaseUnit">
            <summary>
                The base unit of Power, which is Watt. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.MaxValue">
            <summary>
            Represents the largest possible value of Power
            </summary>
        </member>
        <member name="P:UnitsNet.Power.MinValue">
            <summary>
            Represents the smallest possible value of Power
            </summary>
        </member>
        <member name="P:UnitsNet.Power.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Power.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Units">
            <summary>
                All units of measurement for the Power quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Watt.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.UnitsNet#IDecimalQuantity#Value">
            <inheritdoc cref="P:UnitsNet.IDecimalQuantity.Value"/>
        </member>
        <member name="P:UnitsNet.Power.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Power.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Power.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Power.Type">
            <summary>
                The <see cref="P:UnitsNet.Power.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Power.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.BoilerHorsepower">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerUnit.BoilerHorsepower"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Power.BritishThermalUnitsPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerUnit.BritishThermalUnitPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Decawatts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerUnit.Decawatt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Deciwatts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerUnit.Deciwatt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Power.ElectricalHorsepower">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerUnit.ElectricalHorsepower"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Femtowatts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerUnit.Femtowatt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Power.GigajoulesPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerUnit.GigajoulePerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Gigawatts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerUnit.Gigawatt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Power.HydraulicHorsepower">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerUnit.HydraulicHorsepower"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Power.JoulesPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerUnit.JoulePerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Power.KilobritishThermalUnitsPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerUnit.KilobritishThermalUnitPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Power.KilojoulesPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerUnit.KilojoulePerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Kilowatts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerUnit.Kilowatt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Power.MechanicalHorsepower">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerUnit.MechanicalHorsepower"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Power.MegajoulesPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerUnit.MegajoulePerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Megawatts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerUnit.Megawatt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Power.MetricHorsepower">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerUnit.MetricHorsepower"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Microwatts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerUnit.Microwatt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Power.MillijoulesPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerUnit.MillijoulePerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Milliwatts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerUnit.Milliwatt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Nanowatts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerUnit.Nanowatt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Petawatts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerUnit.Petawatt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Picowatts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerUnit.Picowatt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Terawatts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerUnit.Terawatt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Watts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerUnit.Watt"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Power.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Power.GetAbbreviation(UnitsNet.Units.PowerUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Power.GetAbbreviation(UnitsNet.Units.PowerUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Power.FromBoilerHorsepower(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Power"/> from <see cref="F:UnitsNet.Units.PowerUnit.BoilerHorsepower"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromBritishThermalUnitsPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Power"/> from <see cref="F:UnitsNet.Units.PowerUnit.BritishThermalUnitPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromDecawatts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Power"/> from <see cref="F:UnitsNet.Units.PowerUnit.Decawatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromDeciwatts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Power"/> from <see cref="F:UnitsNet.Units.PowerUnit.Deciwatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromElectricalHorsepower(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Power"/> from <see cref="F:UnitsNet.Units.PowerUnit.ElectricalHorsepower"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromFemtowatts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Power"/> from <see cref="F:UnitsNet.Units.PowerUnit.Femtowatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromGigajoulesPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Power"/> from <see cref="F:UnitsNet.Units.PowerUnit.GigajoulePerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromGigawatts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Power"/> from <see cref="F:UnitsNet.Units.PowerUnit.Gigawatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromHydraulicHorsepower(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Power"/> from <see cref="F:UnitsNet.Units.PowerUnit.HydraulicHorsepower"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromJoulesPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Power"/> from <see cref="F:UnitsNet.Units.PowerUnit.JoulePerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromKilobritishThermalUnitsPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Power"/> from <see cref="F:UnitsNet.Units.PowerUnit.KilobritishThermalUnitPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromKilojoulesPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Power"/> from <see cref="F:UnitsNet.Units.PowerUnit.KilojoulePerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromKilowatts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Power"/> from <see cref="F:UnitsNet.Units.PowerUnit.Kilowatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromMechanicalHorsepower(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Power"/> from <see cref="F:UnitsNet.Units.PowerUnit.MechanicalHorsepower"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromMegajoulesPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Power"/> from <see cref="F:UnitsNet.Units.PowerUnit.MegajoulePerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromMegawatts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Power"/> from <see cref="F:UnitsNet.Units.PowerUnit.Megawatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromMetricHorsepower(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Power"/> from <see cref="F:UnitsNet.Units.PowerUnit.MetricHorsepower"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromMicrowatts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Power"/> from <see cref="F:UnitsNet.Units.PowerUnit.Microwatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromMillijoulesPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Power"/> from <see cref="F:UnitsNet.Units.PowerUnit.MillijoulePerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromMilliwatts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Power"/> from <see cref="F:UnitsNet.Units.PowerUnit.Milliwatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromNanowatts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Power"/> from <see cref="F:UnitsNet.Units.PowerUnit.Nanowatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromPetawatts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Power"/> from <see cref="F:UnitsNet.Units.PowerUnit.Petawatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromPicowatts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Power"/> from <see cref="F:UnitsNet.Units.PowerUnit.Picowatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromTerawatts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Power"/> from <see cref="F:UnitsNet.Units.PowerUnit.Terawatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromWatts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Power"/> from <see cref="F:UnitsNet.Units.PowerUnit.Watt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.From(UnitsNet.QuantityValue,UnitsNet.Units.PowerUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.PowerUnit" /> to <see cref="T:UnitsNet.Power" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Power unit value.</returns>
        </member>
        <member name="M:UnitsNet.Power.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Power.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Power.TryParse(System.String,UnitsNet.Power@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Power.TryParse(System.String,System.IFormatProvider,UnitsNet.Power@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Power.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Power.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Power.TryParseUnit(System.String,UnitsNet.Units.PowerUnit@)">
            <inheritdoc cref="M:UnitsNet.Power.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.PowerUnit@)"/>
        </member>
        <member name="M:UnitsNet.Power.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.PowerUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Power.op_UnaryNegation(UnitsNet.Power)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Power.op_Addition(UnitsNet.Power,UnitsNet.Power)">
            <summary>Get <see cref="T:UnitsNet.Power"/> from adding two <see cref="T:UnitsNet.Power"/>.</summary>
        </member>
        <member name="M:UnitsNet.Power.op_Subtraction(UnitsNet.Power,UnitsNet.Power)">
            <summary>Get <see cref="T:UnitsNet.Power"/> from subtracting two <see cref="T:UnitsNet.Power"/>.</summary>
        </member>
        <member name="M:UnitsNet.Power.op_Multiply(System.Decimal,UnitsNet.Power)">
            <summary>Get <see cref="T:UnitsNet.Power"/> from multiplying value and <see cref="T:UnitsNet.Power"/>.</summary>
        </member>
        <member name="M:UnitsNet.Power.op_Multiply(UnitsNet.Power,System.Decimal)">
            <summary>Get <see cref="T:UnitsNet.Power"/> from multiplying value and <see cref="T:UnitsNet.Power"/>.</summary>
        </member>
        <member name="M:UnitsNet.Power.op_Division(UnitsNet.Power,System.Decimal)">
            <summary>Get <see cref="T:UnitsNet.Power"/> from dividing <see cref="T:UnitsNet.Power"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Power.op_Division(UnitsNet.Power,UnitsNet.Power)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Power"/> by <see cref="T:UnitsNet.Power"/>.</summary>
        </member>
        <member name="M:UnitsNet.Power.op_LessThanOrEqual(UnitsNet.Power,UnitsNet.Power)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Power.op_GreaterThanOrEqual(UnitsNet.Power,UnitsNet.Power)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Power.op_LessThan(UnitsNet.Power,UnitsNet.Power)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Power.op_GreaterThan(UnitsNet.Power,UnitsNet.Power)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Power.op_Equality(UnitsNet.Power,UnitsNet.Power)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Power.Equals(UnitsNet.Power,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Power.op_Inequality(UnitsNet.Power,UnitsNet.Power)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Power.Equals(UnitsNet.Power,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Power.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Power.CompareTo(UnitsNet.Power)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Power.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Power.Equals(UnitsNet.Power,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Power.Equals(UnitsNet.Power)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Power.Equals(UnitsNet.Power,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Power.Equals(UnitsNet.Power,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Power within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Power.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Power.</returns>
        </member>
        <member name="M:UnitsNet.Power.As(UnitsNet.Units.PowerUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Power.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Power.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Power.ToUnit(UnitsNet.Units.PowerUnit)">
            <summary>
                Converts this Power to another Power with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Power with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Power.ToUnit(UnitsNet.Units.PowerUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Power to another Power using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Power with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Power.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Power.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Power.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Power.UnitsNet#IQuantity{UnitsNet#Units#PowerUnit}#ToUnit(UnitsNet.Units.PowerUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Power.UnitsNet#IQuantity{UnitsNet#Units#PowerUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Power.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Power.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Power.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Power.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Power.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Power.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.PowerRatio">
            <inheritdoc />
            <summary>
                The strength of a signal expressed in decibels (dB) relative to one watt.
            </summary>
        </member>
        <member name="M:UnitsNet.PowerRatio.#ctor(UnitsNet.Power)">
            <summary>
                Initializes a new instance of the <see cref="T:UnitsNet.PowerRatio" /> struct from the specified power referenced to one watt.
            </summary>
            <param name="power">The power relative to one watt.</param>
        </member>
        <member name="M:UnitsNet.PowerRatio.ToPower">
            <summary>
                Gets a <see cref="T:UnitsNet.Power" /> from this <see cref="T:UnitsNet.PowerRatio" /> (which is a power level relative to one watt).
            </summary>
            <remarks>
                Provides a nicer syntax for converting a power ratio back to a power.
                <example>
                    <c>var power = powerRatio.ToPower();</c>
                </example>
            </remarks>
        </member>
        <member name="M:UnitsNet.PowerRatio.ToAmplitudeRatio(UnitsNet.ElectricResistance)">
            <summary>
                Gets a <see cref="T:UnitsNet.AmplitudeRatio" /> from this <see cref="T:UnitsNet.PowerRatio" />.
            </summary>
            <param name="impedance">The input impedance of the load. This is usually 50, 75 or 600 ohms.</param>
        </member>
        <member name="M:UnitsNet.PowerRatio.FromPower(UnitsNet.Power)">
            <summary>
                Gets a <see cref="T:UnitsNet.PowerRatio" /> from a <see cref="T:UnitsNet.Power" /> relative to one watt.
            </summary>
            <param name="power">The power relative to one watt.</param>
        </member>
        <member name="F:UnitsNet.PowerRatio._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.PowerRatio._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.PowerRatio.#ctor(System.Double,UnitsNet.Units.PowerRatioUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerRatio.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.PowerRatio.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.PowerRatio" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerRatio.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.PowerRatio.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.PowerRatio.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerRatio.BaseUnit">
            <summary>
                The base unit of PowerRatio, which is DecibelWatt. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerRatio.MaxValue">
            <summary>
            Represents the largest possible value of PowerRatio
            </summary>
        </member>
        <member name="P:UnitsNet.PowerRatio.MinValue">
            <summary>
            Represents the smallest possible value of PowerRatio
            </summary>
        </member>
        <member name="P:UnitsNet.PowerRatio.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.PowerRatio.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerRatio.Units">
            <summary>
                All units of measurement for the PowerRatio quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerRatio.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit DecibelWatt.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerRatio.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerRatio.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.PowerRatio.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.PowerRatio.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.PowerRatio.Type">
            <summary>
                The <see cref="P:UnitsNet.PowerRatio.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerRatio.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.PowerRatio.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerRatio.DecibelMilliwatts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerRatioUnit.DecibelMilliwatt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerRatio.DecibelWatts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerRatioUnit.DecibelWatt"/>
            </summary>
        </member>
        <member name="M:UnitsNet.PowerRatio.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.PowerRatio.GetAbbreviation(UnitsNet.Units.PowerRatioUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.PowerRatio.GetAbbreviation(UnitsNet.Units.PowerRatioUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.PowerRatio.FromDecibelMilliwatts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerRatio"/> from <see cref="F:UnitsNet.Units.PowerRatioUnit.DecibelMilliwatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerRatio.FromDecibelWatts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerRatio"/> from <see cref="F:UnitsNet.Units.PowerRatioUnit.DecibelWatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerRatio.From(UnitsNet.QuantityValue,UnitsNet.Units.PowerRatioUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.PowerRatioUnit" /> to <see cref="T:UnitsNet.PowerRatio" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>PowerRatio unit value.</returns>
        </member>
        <member name="M:UnitsNet.PowerRatio.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.PowerRatio.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.PowerRatio.TryParse(System.String,UnitsNet.PowerRatio@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.PowerRatio.TryParse(System.String,System.IFormatProvider,UnitsNet.PowerRatio@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.PowerRatio.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.PowerRatio.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.PowerRatio.TryParseUnit(System.String,UnitsNet.Units.PowerRatioUnit@)">
            <inheritdoc cref="M:UnitsNet.PowerRatio.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.PowerRatioUnit@)"/>
        </member>
        <member name="M:UnitsNet.PowerRatio.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.PowerRatioUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.PowerRatio.op_UnaryNegation(UnitsNet.PowerRatio)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.PowerRatio.op_Addition(UnitsNet.PowerRatio,UnitsNet.PowerRatio)">
            <summary>Get <see cref="T:UnitsNet.PowerRatio"/> from logarithmic addition of two <see cref="T:UnitsNet.PowerRatio"/>.</summary>
        </member>
        <member name="M:UnitsNet.PowerRatio.op_Subtraction(UnitsNet.PowerRatio,UnitsNet.PowerRatio)">
            <summary>Get <see cref="T:UnitsNet.PowerRatio"/> from logarithmic subtraction of two <see cref="T:UnitsNet.PowerRatio"/>.</summary>
        </member>
        <member name="M:UnitsNet.PowerRatio.op_Multiply(System.Double,UnitsNet.PowerRatio)">
            <summary>Get <see cref="T:UnitsNet.PowerRatio"/> from logarithmic multiplication of value and <see cref="T:UnitsNet.PowerRatio"/>.</summary>
        </member>
        <member name="M:UnitsNet.PowerRatio.op_Multiply(UnitsNet.PowerRatio,System.Double)">
            <summary>Get <see cref="T:UnitsNet.PowerRatio"/> from logarithmic multiplication of value and <see cref="T:UnitsNet.PowerRatio"/>.</summary>
        </member>
        <member name="M:UnitsNet.PowerRatio.op_Division(UnitsNet.PowerRatio,System.Double)">
            <summary>Get <see cref="T:UnitsNet.PowerRatio"/> from logarithmic division of <see cref="T:UnitsNet.PowerRatio"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.PowerRatio.op_Division(UnitsNet.PowerRatio,UnitsNet.PowerRatio)">
            <summary>Get ratio value from logarithmic division of <see cref="T:UnitsNet.PowerRatio"/> by <see cref="T:UnitsNet.PowerRatio"/>.</summary>
        </member>
        <member name="M:UnitsNet.PowerRatio.op_LessThanOrEqual(UnitsNet.PowerRatio,UnitsNet.PowerRatio)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.PowerRatio.op_GreaterThanOrEqual(UnitsNet.PowerRatio,UnitsNet.PowerRatio)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.PowerRatio.op_LessThan(UnitsNet.PowerRatio,UnitsNet.PowerRatio)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.PowerRatio.op_GreaterThan(UnitsNet.PowerRatio,UnitsNet.PowerRatio)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.PowerRatio.op_Equality(UnitsNet.PowerRatio,UnitsNet.PowerRatio)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.PowerRatio.Equals(UnitsNet.PowerRatio,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.PowerRatio.op_Inequality(UnitsNet.PowerRatio,UnitsNet.PowerRatio)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.PowerRatio.Equals(UnitsNet.PowerRatio,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.PowerRatio.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.PowerRatio.CompareTo(UnitsNet.PowerRatio)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.PowerRatio.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.PowerRatio.Equals(UnitsNet.PowerRatio,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.PowerRatio.Equals(UnitsNet.PowerRatio)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.PowerRatio.Equals(UnitsNet.PowerRatio,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.PowerRatio.Equals(UnitsNet.PowerRatio,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another PowerRatio within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.PowerRatio.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current PowerRatio.</returns>
        </member>
        <member name="M:UnitsNet.PowerRatio.As(UnitsNet.Units.PowerRatioUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.PowerRatio.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.PowerRatio.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.PowerRatio.ToUnit(UnitsNet.Units.PowerRatioUnit)">
            <summary>
                Converts this PowerRatio to another PowerRatio with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A PowerRatio with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.PowerRatio.ToUnit(UnitsNet.Units.PowerRatioUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this PowerRatio to another PowerRatio using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A PowerRatio with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.PowerRatio.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.PowerRatio.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.PowerRatio.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.PowerRatio.UnitsNet#IQuantity{UnitsNet#Units#PowerRatioUnit}#ToUnit(UnitsNet.Units.PowerRatioUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.PowerRatio.UnitsNet#IQuantity{UnitsNet#Units#PowerRatioUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.PowerRatio.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.PowerRatio.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.PowerRatio.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.PowerRatio.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.PowerRatio.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.PowerRatio.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Pressure">
            <inheritdoc />
            <summary>
                Pressure (symbol: P or p) is the ratio of force to the area over which that force is distributed. Pressure is force per unit area applied in a direction perpendicular to the surface of an object. Gauge pressure (also spelled gage pressure)[a] is the pressure relative to the local atmospheric or ambient pressure. Pressure is measured in any unit of force divided by any unit of area. The SI unit of pressure is the newton per square metre, which is called the pascal (Pa) after the seventeenth-century philosopher and scientist Blaise Pascal. A pressure of 1 Pa is small; it approximately equals the pressure exerted by a dollar bill resting flat on a table. Everyday pressures are often stated in kilopascals (1 kPa = 1000 Pa).
            </summary>
        </member>
        <member name="M:UnitsNet.Pressure.op_Multiply(UnitsNet.Pressure,UnitsNet.Area)">
            <summary>Get <see cref="T:UnitsNet.Force"/> from <see cref="T:UnitsNet.Pressure"/> times <see cref="T:UnitsNet.Area"/>.</summary>
        </member>
        <member name="M:UnitsNet.Pressure.op_Multiply(UnitsNet.Area,UnitsNet.Pressure)">
            <summary>Get <see cref="T:UnitsNet.Force"/> from <see cref="T:UnitsNet.Area"/> times <see cref="T:UnitsNet.Pressure"/>.</summary>
        </member>
        <member name="M:UnitsNet.Pressure.op_Division(UnitsNet.Pressure,UnitsNet.SpecificWeight)">
            <summary>Get <see cref="T:UnitsNet.Length"/> from <see cref="T:UnitsNet.Pressure"/> divided by <see cref="T:UnitsNet.SpecificWeight"/>.</summary>
        </member>
        <member name="M:UnitsNet.Pressure.op_Division(UnitsNet.Pressure,UnitsNet.Length)">
            <summary>Get <see cref="T:UnitsNet.SpecificWeight"/> from <see cref="T:UnitsNet.Pressure"/> divided by <see cref="T:UnitsNet.Length"/>.</summary>
        </member>
        <member name="M:UnitsNet.Pressure.op_Division(UnitsNet.Pressure,UnitsNet.ReciprocalLength)">
            <summary>Get <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="T:UnitsNet.Pressure"/> divided by <see cref="T:UnitsNet.ReciprocalLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.Pressure.op_Division(UnitsNet.Pressure,UnitsNet.ReciprocalArea)">
            <summary>Get <see cref="T:UnitsNet.Force"/> from <see cref="T:UnitsNet.Pressure"/> divided by <see cref="T:UnitsNet.ReciprocalArea"/>.</summary>
        </member>
        <member name="F:UnitsNet.Pressure._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Pressure._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Pressure.#ctor(System.Double,UnitsNet.Units.PressureUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Pressure.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Pressure" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Pressure.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Pressure.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.BaseUnit">
            <summary>
                The base unit of Pressure, which is Pascal. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.MaxValue">
            <summary>
            Represents the largest possible value of Pressure
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.MinValue">
            <summary>
            Represents the smallest possible value of Pressure
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Pressure.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Units">
            <summary>
                All units of measurement for the Pressure quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Pascal.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Pressure.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Pressure.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Pressure.Type">
            <summary>
                The <see cref="P:UnitsNet.Pressure.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Pressure.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Atmospheres">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.Atmosphere"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Bars">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.Bar"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Centibars">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.Centibar"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Decapascals">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.Decapascal"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Decibars">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.Decibar"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.DynesPerSquareCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.DynePerSquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.FeetOfElevation">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.FootOfElevation"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.FeetOfHead">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.FootOfHead"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Gigapascals">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.Gigapascal"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Hectopascals">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.Hectopascal"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.InchesOfMercury">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.InchOfMercury"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.InchesOfWaterColumn">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.InchOfWaterColumn"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Kilobars">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.Kilobar"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.KilogramsForcePerSquareCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.KilogramForcePerSquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.KilogramsForcePerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.KilogramForcePerSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.KilogramsForcePerSquareMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.KilogramForcePerSquareMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.KilonewtonsPerSquareCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.KilonewtonPerSquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.KilonewtonsPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.KilonewtonPerSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.KilonewtonsPerSquareMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.KilonewtonPerSquareMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Kilopascals">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.Kilopascal"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.KilopoundsForcePerSquareFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.KilopoundForcePerSquareFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.KilopoundsForcePerSquareInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.KilopoundForcePerSquareInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Megabars">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.Megabar"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.MeganewtonsPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.MeganewtonPerSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Megapascals">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.Megapascal"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.MetersOfElevation">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.MeterOfElevation"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.MetersOfHead">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.MeterOfHead"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Microbars">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.Microbar"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Micropascals">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.Micropascal"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Millibars">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.Millibar"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.MillimetersOfMercury">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.MillimeterOfMercury"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.MillimeterOfWaterColumn">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.MillimeterOfWaterColumn"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Millipascals">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.Millipascal"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.NewtonsPerSquareCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.NewtonPerSquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.NewtonsPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.NewtonPerSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.NewtonsPerSquareMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.NewtonPerSquareMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Pascals">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.Pascal"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.PoundsForcePerSquareFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.PoundForcePerSquareFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.PoundsForcePerSquareInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.PoundForcePerSquareInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.PoundsPerInchSecondSquared">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.PoundPerInchSecondSquared"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.TechnicalAtmospheres">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.TechnicalAtmosphere"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.TonnesForcePerSquareCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.TonneForcePerSquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.TonnesForcePerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.TonneForcePerSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.TonnesForcePerSquareMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.TonneForcePerSquareMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Torrs">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureUnit.Torr"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Pressure.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Pressure.GetAbbreviation(UnitsNet.Units.PressureUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Pressure.GetAbbreviation(UnitsNet.Units.PressureUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Pressure.FromAtmospheres(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.Atmosphere"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromBars(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.Bar"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromCentibars(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.Centibar"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromDecapascals(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.Decapascal"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromDecibars(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.Decibar"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromDynesPerSquareCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.DynePerSquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromFeetOfElevation(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.FootOfElevation"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromFeetOfHead(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.FootOfHead"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromGigapascals(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.Gigapascal"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromHectopascals(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.Hectopascal"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromInchesOfMercury(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.InchOfMercury"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromInchesOfWaterColumn(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.InchOfWaterColumn"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromKilobars(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.Kilobar"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromKilogramsForcePerSquareCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.KilogramForcePerSquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromKilogramsForcePerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.KilogramForcePerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromKilogramsForcePerSquareMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.KilogramForcePerSquareMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromKilonewtonsPerSquareCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.KilonewtonPerSquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromKilonewtonsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.KilonewtonPerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromKilonewtonsPerSquareMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.KilonewtonPerSquareMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromKilopascals(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.Kilopascal"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromKilopoundsForcePerSquareFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.KilopoundForcePerSquareFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromKilopoundsForcePerSquareInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.KilopoundForcePerSquareInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromMegabars(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.Megabar"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromMeganewtonsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.MeganewtonPerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromMegapascals(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.Megapascal"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromMetersOfElevation(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.MeterOfElevation"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromMetersOfHead(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.MeterOfHead"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromMicrobars(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.Microbar"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromMicropascals(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.Micropascal"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromMillibars(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.Millibar"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromMillimetersOfMercury(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.MillimeterOfMercury"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromMillimeterOfWaterColumn(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.MillimeterOfWaterColumn"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromMillipascals(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.Millipascal"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromNewtonsPerSquareCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.NewtonPerSquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromNewtonsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.NewtonPerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromNewtonsPerSquareMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.NewtonPerSquareMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromPascals(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.Pascal"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromPoundsForcePerSquareFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.PoundForcePerSquareFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromPoundsForcePerSquareInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.PoundForcePerSquareInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromPoundsPerInchSecondSquared(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.PoundPerInchSecondSquared"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromTechnicalAtmospheres(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.TechnicalAtmosphere"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromTonnesForcePerSquareCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.TonneForcePerSquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromTonnesForcePerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.TonneForcePerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromTonnesForcePerSquareMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.TonneForcePerSquareMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromTorrs(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Pressure"/> from <see cref="F:UnitsNet.Units.PressureUnit.Torr"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.From(UnitsNet.QuantityValue,UnitsNet.Units.PressureUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.PressureUnit" /> to <see cref="T:UnitsNet.Pressure" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Pressure unit value.</returns>
        </member>
        <member name="M:UnitsNet.Pressure.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Pressure.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Pressure.TryParse(System.String,UnitsNet.Pressure@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Pressure.TryParse(System.String,System.IFormatProvider,UnitsNet.Pressure@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Pressure.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.TryParseUnit(System.String,UnitsNet.Units.PressureUnit@)">
            <inheritdoc cref="M:UnitsNet.Pressure.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.PressureUnit@)"/>
        </member>
        <member name="M:UnitsNet.Pressure.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.PressureUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Pressure.op_UnaryNegation(UnitsNet.Pressure)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Pressure.op_Addition(UnitsNet.Pressure,UnitsNet.Pressure)">
            <summary>Get <see cref="T:UnitsNet.Pressure"/> from adding two <see cref="T:UnitsNet.Pressure"/>.</summary>
        </member>
        <member name="M:UnitsNet.Pressure.op_Subtraction(UnitsNet.Pressure,UnitsNet.Pressure)">
            <summary>Get <see cref="T:UnitsNet.Pressure"/> from subtracting two <see cref="T:UnitsNet.Pressure"/>.</summary>
        </member>
        <member name="M:UnitsNet.Pressure.op_Multiply(System.Double,UnitsNet.Pressure)">
            <summary>Get <see cref="T:UnitsNet.Pressure"/> from multiplying value and <see cref="T:UnitsNet.Pressure"/>.</summary>
        </member>
        <member name="M:UnitsNet.Pressure.op_Multiply(UnitsNet.Pressure,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Pressure"/> from multiplying value and <see cref="T:UnitsNet.Pressure"/>.</summary>
        </member>
        <member name="M:UnitsNet.Pressure.op_Division(UnitsNet.Pressure,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Pressure"/> from dividing <see cref="T:UnitsNet.Pressure"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Pressure.op_Division(UnitsNet.Pressure,UnitsNet.Pressure)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Pressure"/> by <see cref="T:UnitsNet.Pressure"/>.</summary>
        </member>
        <member name="M:UnitsNet.Pressure.op_LessThanOrEqual(UnitsNet.Pressure,UnitsNet.Pressure)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Pressure.op_GreaterThanOrEqual(UnitsNet.Pressure,UnitsNet.Pressure)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Pressure.op_LessThan(UnitsNet.Pressure,UnitsNet.Pressure)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Pressure.op_GreaterThan(UnitsNet.Pressure,UnitsNet.Pressure)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Pressure.op_Equality(UnitsNet.Pressure,UnitsNet.Pressure)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Pressure.Equals(UnitsNet.Pressure,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Pressure.op_Inequality(UnitsNet.Pressure,UnitsNet.Pressure)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Pressure.Equals(UnitsNet.Pressure,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Pressure.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Pressure.CompareTo(UnitsNet.Pressure)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Pressure.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Pressure.Equals(UnitsNet.Pressure,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Pressure.Equals(UnitsNet.Pressure)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Pressure.Equals(UnitsNet.Pressure,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Pressure.Equals(UnitsNet.Pressure,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Pressure within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Pressure.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Pressure.</returns>
        </member>
        <member name="M:UnitsNet.Pressure.As(UnitsNet.Units.PressureUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Pressure.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Pressure.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Pressure.ToUnit(UnitsNet.Units.PressureUnit)">
            <summary>
                Converts this Pressure to another Pressure with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Pressure with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Pressure.ToUnit(UnitsNet.Units.PressureUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Pressure to another Pressure using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Pressure with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Pressure.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Pressure.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Pressure.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Pressure.UnitsNet#IQuantity{UnitsNet#Units#PressureUnit}#ToUnit(UnitsNet.Units.PressureUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Pressure.UnitsNet#IQuantity{UnitsNet#Units#PressureUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Pressure.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Pressure.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Pressure.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Pressure.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Pressure.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Pressure.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.ReciprocalArea">
            <inheritdoc />
            <summary>
                Reciprocal area (Inverse-square) quantity is used to specify a physical quantity inversely proportional to the square of the distance.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Inverse-square_law
            </remarks>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.Inverse">
            <summary>
            Calculates the inverse of this quantity.
            </summary>
            <returns>The corresponding inverse quantity, <see cref="T:UnitsNet.Area"/>.</returns>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.op_Multiply(UnitsNet.ReciprocalArea,UnitsNet.Force)">
            <summary>Get <see cref="T:UnitsNet.Pressure"/> from <see cref="T:UnitsNet.ReciprocalArea"/> multiplied by <see cref="T:UnitsNet.Force"/>.</summary>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.op_Multiply(UnitsNet.ReciprocalArea,UnitsNet.Area)">
            <summary>Get <see cref="T:UnitsNet.Ratio"/> from <see cref="T:UnitsNet.ReciprocalArea"/> multiplied by <see cref="T:UnitsNet.Area"/>.</summary>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.op_Division(UnitsNet.ReciprocalArea,UnitsNet.ReciprocalLength)">
            <summary>Get <see cref="T:UnitsNet.ReciprocalLength"/> from <see cref="T:UnitsNet.ReciprocalArea"/> divided by <see cref="T:UnitsNet.ReciprocalLength"/>.</summary>
        </member>
        <member name="F:UnitsNet.ReciprocalArea._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ReciprocalArea._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.#ctor(System.Double,UnitsNet.Units.ReciprocalAreaUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.ReciprocalArea.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.ReciprocalArea" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalArea.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ReciprocalArea.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ReciprocalArea.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalArea.BaseUnit">
            <summary>
                The base unit of ReciprocalArea, which is InverseSquareMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalArea.MaxValue">
            <summary>
            Represents the largest possible value of ReciprocalArea
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalArea.MinValue">
            <summary>
            Represents the smallest possible value of ReciprocalArea
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalArea.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ReciprocalArea.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalArea.Units">
            <summary>
                All units of measurement for the ReciprocalArea quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalArea.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit InverseSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalArea.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalArea.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ReciprocalArea.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ReciprocalArea.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ReciprocalArea.Type">
            <summary>
                The <see cref="P:UnitsNet.ReciprocalArea.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalArea.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ReciprocalArea.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalArea.InverseSquareCentimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ReciprocalAreaUnit.InverseSquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalArea.InverseSquareDecimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ReciprocalAreaUnit.InverseSquareDecimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalArea.InverseSquareFeet">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ReciprocalAreaUnit.InverseSquareFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalArea.InverseSquareInches">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ReciprocalAreaUnit.InverseSquareInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalArea.InverseSquareKilometers">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ReciprocalAreaUnit.InverseSquareKilometer"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalArea.InverseSquareMeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ReciprocalAreaUnit.InverseSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalArea.InverseSquareMicrometers">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ReciprocalAreaUnit.InverseSquareMicrometer"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalArea.InverseSquareMiles">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ReciprocalAreaUnit.InverseSquareMile"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalArea.InverseSquareMillimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ReciprocalAreaUnit.InverseSquareMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalArea.InverseSquareYards">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ReciprocalAreaUnit.InverseSquareYard"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalArea.InverseUsSurveySquareFeet">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ReciprocalAreaUnit.InverseUsSurveySquareFoot"/>
            </summary>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.GetAbbreviation(UnitsNet.Units.ReciprocalAreaUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.GetAbbreviation(UnitsNet.Units.ReciprocalAreaUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.FromInverseSquareCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ReciprocalArea"/> from <see cref="F:UnitsNet.Units.ReciprocalAreaUnit.InverseSquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.FromInverseSquareDecimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ReciprocalArea"/> from <see cref="F:UnitsNet.Units.ReciprocalAreaUnit.InverseSquareDecimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.FromInverseSquareFeet(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ReciprocalArea"/> from <see cref="F:UnitsNet.Units.ReciprocalAreaUnit.InverseSquareFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.FromInverseSquareInches(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ReciprocalArea"/> from <see cref="F:UnitsNet.Units.ReciprocalAreaUnit.InverseSquareInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.FromInverseSquareKilometers(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ReciprocalArea"/> from <see cref="F:UnitsNet.Units.ReciprocalAreaUnit.InverseSquareKilometer"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.FromInverseSquareMeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ReciprocalArea"/> from <see cref="F:UnitsNet.Units.ReciprocalAreaUnit.InverseSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.FromInverseSquareMicrometers(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ReciprocalArea"/> from <see cref="F:UnitsNet.Units.ReciprocalAreaUnit.InverseSquareMicrometer"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.FromInverseSquareMiles(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ReciprocalArea"/> from <see cref="F:UnitsNet.Units.ReciprocalAreaUnit.InverseSquareMile"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.FromInverseSquareMillimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ReciprocalArea"/> from <see cref="F:UnitsNet.Units.ReciprocalAreaUnit.InverseSquareMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.FromInverseSquareYards(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ReciprocalArea"/> from <see cref="F:UnitsNet.Units.ReciprocalAreaUnit.InverseSquareYard"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.FromInverseUsSurveySquareFeet(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ReciprocalArea"/> from <see cref="F:UnitsNet.Units.ReciprocalAreaUnit.InverseUsSurveySquareFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.From(UnitsNet.QuantityValue,UnitsNet.Units.ReciprocalAreaUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ReciprocalAreaUnit" /> to <see cref="T:UnitsNet.ReciprocalArea" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ReciprocalArea unit value.</returns>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.TryParse(System.String,UnitsNet.ReciprocalArea@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.TryParse(System.String,System.IFormatProvider,UnitsNet.ReciprocalArea@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.TryParseUnit(System.String,UnitsNet.Units.ReciprocalAreaUnit@)">
            <inheritdoc cref="M:UnitsNet.ReciprocalArea.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ReciprocalAreaUnit@)"/>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ReciprocalAreaUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.op_UnaryNegation(UnitsNet.ReciprocalArea)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.op_Addition(UnitsNet.ReciprocalArea,UnitsNet.ReciprocalArea)">
            <summary>Get <see cref="T:UnitsNet.ReciprocalArea"/> from adding two <see cref="T:UnitsNet.ReciprocalArea"/>.</summary>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.op_Subtraction(UnitsNet.ReciprocalArea,UnitsNet.ReciprocalArea)">
            <summary>Get <see cref="T:UnitsNet.ReciprocalArea"/> from subtracting two <see cref="T:UnitsNet.ReciprocalArea"/>.</summary>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.op_Multiply(System.Double,UnitsNet.ReciprocalArea)">
            <summary>Get <see cref="T:UnitsNet.ReciprocalArea"/> from multiplying value and <see cref="T:UnitsNet.ReciprocalArea"/>.</summary>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.op_Multiply(UnitsNet.ReciprocalArea,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ReciprocalArea"/> from multiplying value and <see cref="T:UnitsNet.ReciprocalArea"/>.</summary>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.op_Division(UnitsNet.ReciprocalArea,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ReciprocalArea"/> from dividing <see cref="T:UnitsNet.ReciprocalArea"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.op_Division(UnitsNet.ReciprocalArea,UnitsNet.ReciprocalArea)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.ReciprocalArea"/> by <see cref="T:UnitsNet.ReciprocalArea"/>.</summary>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.op_LessThanOrEqual(UnitsNet.ReciprocalArea,UnitsNet.ReciprocalArea)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.op_GreaterThanOrEqual(UnitsNet.ReciprocalArea,UnitsNet.ReciprocalArea)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.op_LessThan(UnitsNet.ReciprocalArea,UnitsNet.ReciprocalArea)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.op_GreaterThan(UnitsNet.ReciprocalArea,UnitsNet.ReciprocalArea)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.op_Equality(UnitsNet.ReciprocalArea,UnitsNet.ReciprocalArea)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ReciprocalArea.Equals(UnitsNet.ReciprocalArea,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.op_Inequality(UnitsNet.ReciprocalArea,UnitsNet.ReciprocalArea)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ReciprocalArea.Equals(UnitsNet.ReciprocalArea,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ReciprocalArea.CompareTo(UnitsNet.ReciprocalArea)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ReciprocalArea.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ReciprocalArea.Equals(UnitsNet.ReciprocalArea,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.Equals(UnitsNet.ReciprocalArea)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ReciprocalArea.Equals(UnitsNet.ReciprocalArea,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.Equals(UnitsNet.ReciprocalArea,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ReciprocalArea within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ReciprocalArea.</returns>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.As(UnitsNet.Units.ReciprocalAreaUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ReciprocalArea.ToUnit(UnitsNet.Units.ReciprocalAreaUnit)">
            <summary>
                Converts this ReciprocalArea to another ReciprocalArea with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A ReciprocalArea with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.ToUnit(UnitsNet.Units.ReciprocalAreaUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this ReciprocalArea to another ReciprocalArea using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A ReciprocalArea with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ReciprocalArea.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ReciprocalArea.UnitsNet#IQuantity{UnitsNet#Units#ReciprocalAreaUnit}#ToUnit(UnitsNet.Units.ReciprocalAreaUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ReciprocalArea.UnitsNet#IQuantity{UnitsNet#Units#ReciprocalAreaUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ReciprocalArea.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.ReciprocalArea.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.ReciprocalLength">
            <inheritdoc />
            <summary>
                Reciprocal (Inverse) Length is used in various fields of science and mathematics. It is defined as the inverse value of a length unit.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Reciprocal_length
            </remarks>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.Inverse">
            <summary>
            Calculates the inverse of this quantity.
            </summary>
            <returns>The corresponding inverse quantity, <see cref="T:UnitsNet.Length"/>.</returns>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.op_Multiply(UnitsNet.ReciprocalLength,UnitsNet.ForcePerLength)">
            <summary>Get <see cref="T:UnitsNet.Pressure"/> from <see cref="T:UnitsNet.ReciprocalLength"/> multiplied by <see cref="T:UnitsNet.ForcePerLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.op_Multiply(UnitsNet.ReciprocalLength,UnitsNet.Force)">
            <summary>Get <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="T:UnitsNet.ReciprocalLength"/> times <see cref="T:UnitsNet.Force"/>.</summary>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.op_Multiply(UnitsNet.ReciprocalLength,UnitsNet.ReciprocalLength)">
            <summary>Get <see cref="T:UnitsNet.ReciprocalArea"/> from <see cref="T:UnitsNet.ReciprocalLength"/> times <see cref="T:UnitsNet.ReciprocalLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.op_Division(UnitsNet.ReciprocalLength,UnitsNet.ReciprocalArea)">
            <summary>Get <see cref="T:UnitsNet.Length"/> from <see cref="T:UnitsNet.ReciprocalLength"/> times <see cref="T:UnitsNet.ReciprocalArea"/>.</summary>
        </member>
        <member name="F:UnitsNet.ReciprocalLength._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ReciprocalLength._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.#ctor(System.Double,UnitsNet.Units.ReciprocalLengthUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.ReciprocalLength.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.ReciprocalLength" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalLength.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ReciprocalLength.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ReciprocalLength.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalLength.BaseUnit">
            <summary>
                The base unit of ReciprocalLength, which is InverseMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalLength.MaxValue">
            <summary>
            Represents the largest possible value of ReciprocalLength
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalLength.MinValue">
            <summary>
            Represents the smallest possible value of ReciprocalLength
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalLength.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ReciprocalLength.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalLength.Units">
            <summary>
                All units of measurement for the ReciprocalLength quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalLength.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit InverseMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalLength.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalLength.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ReciprocalLength.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ReciprocalLength.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ReciprocalLength.Type">
            <summary>
                The <see cref="P:UnitsNet.ReciprocalLength.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalLength.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ReciprocalLength.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalLength.InverseCentimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ReciprocalLengthUnit.InverseCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalLength.InverseFeet">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ReciprocalLengthUnit.InverseFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalLength.InverseInches">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ReciprocalLengthUnit.InverseInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalLength.InverseMeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ReciprocalLengthUnit.InverseMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalLength.InverseMicroinches">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ReciprocalLengthUnit.InverseMicroinch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalLength.InverseMils">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ReciprocalLengthUnit.InverseMil"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalLength.InverseMiles">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ReciprocalLengthUnit.InverseMile"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalLength.InverseMillimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ReciprocalLengthUnit.InverseMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalLength.InverseUsSurveyFeet">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ReciprocalLengthUnit.InverseUsSurveyFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ReciprocalLength.InverseYards">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ReciprocalLengthUnit.InverseYard"/>
            </summary>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.GetAbbreviation(UnitsNet.Units.ReciprocalLengthUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.GetAbbreviation(UnitsNet.Units.ReciprocalLengthUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.FromInverseCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ReciprocalLength"/> from <see cref="F:UnitsNet.Units.ReciprocalLengthUnit.InverseCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.FromInverseFeet(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ReciprocalLength"/> from <see cref="F:UnitsNet.Units.ReciprocalLengthUnit.InverseFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.FromInverseInches(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ReciprocalLength"/> from <see cref="F:UnitsNet.Units.ReciprocalLengthUnit.InverseInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.FromInverseMeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ReciprocalLength"/> from <see cref="F:UnitsNet.Units.ReciprocalLengthUnit.InverseMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.FromInverseMicroinches(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ReciprocalLength"/> from <see cref="F:UnitsNet.Units.ReciprocalLengthUnit.InverseMicroinch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.FromInverseMils(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ReciprocalLength"/> from <see cref="F:UnitsNet.Units.ReciprocalLengthUnit.InverseMil"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.FromInverseMiles(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ReciprocalLength"/> from <see cref="F:UnitsNet.Units.ReciprocalLengthUnit.InverseMile"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.FromInverseMillimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ReciprocalLength"/> from <see cref="F:UnitsNet.Units.ReciprocalLengthUnit.InverseMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.FromInverseUsSurveyFeet(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ReciprocalLength"/> from <see cref="F:UnitsNet.Units.ReciprocalLengthUnit.InverseUsSurveyFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.FromInverseYards(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ReciprocalLength"/> from <see cref="F:UnitsNet.Units.ReciprocalLengthUnit.InverseYard"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.From(UnitsNet.QuantityValue,UnitsNet.Units.ReciprocalLengthUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ReciprocalLengthUnit" /> to <see cref="T:UnitsNet.ReciprocalLength" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ReciprocalLength unit value.</returns>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.TryParse(System.String,UnitsNet.ReciprocalLength@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.TryParse(System.String,System.IFormatProvider,UnitsNet.ReciprocalLength@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.TryParseUnit(System.String,UnitsNet.Units.ReciprocalLengthUnit@)">
            <inheritdoc cref="M:UnitsNet.ReciprocalLength.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ReciprocalLengthUnit@)"/>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ReciprocalLengthUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.op_UnaryNegation(UnitsNet.ReciprocalLength)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.op_Addition(UnitsNet.ReciprocalLength,UnitsNet.ReciprocalLength)">
            <summary>Get <see cref="T:UnitsNet.ReciprocalLength"/> from adding two <see cref="T:UnitsNet.ReciprocalLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.op_Subtraction(UnitsNet.ReciprocalLength,UnitsNet.ReciprocalLength)">
            <summary>Get <see cref="T:UnitsNet.ReciprocalLength"/> from subtracting two <see cref="T:UnitsNet.ReciprocalLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.op_Multiply(System.Double,UnitsNet.ReciprocalLength)">
            <summary>Get <see cref="T:UnitsNet.ReciprocalLength"/> from multiplying value and <see cref="T:UnitsNet.ReciprocalLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.op_Multiply(UnitsNet.ReciprocalLength,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ReciprocalLength"/> from multiplying value and <see cref="T:UnitsNet.ReciprocalLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.op_Division(UnitsNet.ReciprocalLength,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ReciprocalLength"/> from dividing <see cref="T:UnitsNet.ReciprocalLength"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.op_Division(UnitsNet.ReciprocalLength,UnitsNet.ReciprocalLength)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.ReciprocalLength"/> by <see cref="T:UnitsNet.ReciprocalLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.op_LessThanOrEqual(UnitsNet.ReciprocalLength,UnitsNet.ReciprocalLength)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.op_GreaterThanOrEqual(UnitsNet.ReciprocalLength,UnitsNet.ReciprocalLength)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.op_LessThan(UnitsNet.ReciprocalLength,UnitsNet.ReciprocalLength)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.op_GreaterThan(UnitsNet.ReciprocalLength,UnitsNet.ReciprocalLength)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.op_Equality(UnitsNet.ReciprocalLength,UnitsNet.ReciprocalLength)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ReciprocalLength.Equals(UnitsNet.ReciprocalLength,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.op_Inequality(UnitsNet.ReciprocalLength,UnitsNet.ReciprocalLength)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ReciprocalLength.Equals(UnitsNet.ReciprocalLength,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ReciprocalLength.CompareTo(UnitsNet.ReciprocalLength)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ReciprocalLength.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ReciprocalLength.Equals(UnitsNet.ReciprocalLength,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.Equals(UnitsNet.ReciprocalLength)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ReciprocalLength.Equals(UnitsNet.ReciprocalLength,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.Equals(UnitsNet.ReciprocalLength,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ReciprocalLength within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ReciprocalLength.</returns>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.As(UnitsNet.Units.ReciprocalLengthUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ReciprocalLength.ToUnit(UnitsNet.Units.ReciprocalLengthUnit)">
            <summary>
                Converts this ReciprocalLength to another ReciprocalLength with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A ReciprocalLength with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.ToUnit(UnitsNet.Units.ReciprocalLengthUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this ReciprocalLength to another ReciprocalLength using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A ReciprocalLength with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ReciprocalLength.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ReciprocalLength.UnitsNet#IQuantity{UnitsNet#Units#ReciprocalLengthUnit}#ToUnit(UnitsNet.Units.ReciprocalLengthUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ReciprocalLength.UnitsNet#IQuantity{UnitsNet#Units#ReciprocalLengthUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ReciprocalLength.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.ReciprocalLength.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.RotationalSpeed">
            <inheritdoc />
            <summary>
                Rotational speed (sometimes called speed of revolution) is the number of complete rotations, revolutions, cycles, or turns per time unit. Rotational speed is a cyclic frequency, measured in radians per second or in hertz in the SI System by scientists, or in revolutions per minute (rpm or min-1) or revolutions per second in everyday life. The symbol for rotational speed is ω (the Greek lowercase letter "omega").
            </summary>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.op_Multiply(UnitsNet.RotationalSpeed,System.TimeSpan)">
            <summary>Get <see cref="T:UnitsNet.Angle"/> from <see cref="T:UnitsNet.RotationalSpeed"/> times <see cref="T:System.TimeSpan"/>.</summary>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.op_Multiply(System.TimeSpan,UnitsNet.RotationalSpeed)">
            <summary>Get <see cref="T:UnitsNet.Angle"/> from <see cref="T:System.TimeSpan"/> times <see cref="T:UnitsNet.RotationalSpeed"/>.</summary>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.op_Multiply(UnitsNet.RotationalSpeed,UnitsNet.Duration)">
            <summary>Get <see cref="T:UnitsNet.Angle"/> from <see cref="T:UnitsNet.RotationalSpeed"/> times <see cref="T:UnitsNet.Duration"/>.</summary>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.op_Multiply(UnitsNet.Duration,UnitsNet.RotationalSpeed)">
            <summary>Get <see cref="T:UnitsNet.Angle"/> from <see cref="T:UnitsNet.Duration"/> times <see cref="T:UnitsNet.RotationalSpeed"/>.</summary>
        </member>
        <member name="F:UnitsNet.RotationalSpeed._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.RotationalSpeed._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.#ctor(System.Double,UnitsNet.Units.RotationalSpeedUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.RotationalSpeed" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.RotationalSpeed.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.BaseUnit">
            <summary>
                The base unit of RotationalSpeed, which is RadianPerSecond. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.MaxValue">
            <summary>
            Represents the largest possible value of RotationalSpeed
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.MinValue">
            <summary>
            Represents the smallest possible value of RotationalSpeed
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.RotationalSpeed.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.Units">
            <summary>
                All units of measurement for the RotationalSpeed quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit RadianPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.RotationalSpeed.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.RotationalSpeed.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.Type">
            <summary>
                The <see cref="P:UnitsNet.RotationalSpeed.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.RotationalSpeed.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.CentiradiansPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalSpeedUnit.CentiradianPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.DeciradiansPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalSpeedUnit.DeciradianPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.DegreesPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalSpeedUnit.DegreePerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.DegreesPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalSpeedUnit.DegreePerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.MicrodegreesPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalSpeedUnit.MicrodegreePerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.MicroradiansPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalSpeedUnit.MicroradianPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.MillidegreesPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalSpeedUnit.MillidegreePerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.MilliradiansPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalSpeedUnit.MilliradianPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.NanodegreesPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalSpeedUnit.NanodegreePerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.NanoradiansPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalSpeedUnit.NanoradianPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.RadiansPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalSpeedUnit.RadianPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.RevolutionsPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalSpeedUnit.RevolutionPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.RevolutionsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalSpeedUnit.RevolutionPerSecond"/>
            </summary>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.GetAbbreviation(UnitsNet.Units.RotationalSpeedUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.GetAbbreviation(UnitsNet.Units.RotationalSpeedUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.FromCentiradiansPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalSpeed"/> from <see cref="F:UnitsNet.Units.RotationalSpeedUnit.CentiradianPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.FromDeciradiansPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalSpeed"/> from <see cref="F:UnitsNet.Units.RotationalSpeedUnit.DeciradianPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.FromDegreesPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalSpeed"/> from <see cref="F:UnitsNet.Units.RotationalSpeedUnit.DegreePerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.FromDegreesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalSpeed"/> from <see cref="F:UnitsNet.Units.RotationalSpeedUnit.DegreePerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.FromMicrodegreesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalSpeed"/> from <see cref="F:UnitsNet.Units.RotationalSpeedUnit.MicrodegreePerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.FromMicroradiansPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalSpeed"/> from <see cref="F:UnitsNet.Units.RotationalSpeedUnit.MicroradianPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.FromMillidegreesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalSpeed"/> from <see cref="F:UnitsNet.Units.RotationalSpeedUnit.MillidegreePerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.FromMilliradiansPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalSpeed"/> from <see cref="F:UnitsNet.Units.RotationalSpeedUnit.MilliradianPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.FromNanodegreesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalSpeed"/> from <see cref="F:UnitsNet.Units.RotationalSpeedUnit.NanodegreePerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.FromNanoradiansPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalSpeed"/> from <see cref="F:UnitsNet.Units.RotationalSpeedUnit.NanoradianPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.FromRadiansPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalSpeed"/> from <see cref="F:UnitsNet.Units.RotationalSpeedUnit.RadianPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.FromRevolutionsPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalSpeed"/> from <see cref="F:UnitsNet.Units.RotationalSpeedUnit.RevolutionPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.FromRevolutionsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalSpeed"/> from <see cref="F:UnitsNet.Units.RotationalSpeedUnit.RevolutionPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.From(UnitsNet.QuantityValue,UnitsNet.Units.RotationalSpeedUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.RotationalSpeedUnit" /> to <see cref="T:UnitsNet.RotationalSpeed" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>RotationalSpeed unit value.</returns>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.TryParse(System.String,UnitsNet.RotationalSpeed@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.TryParse(System.String,System.IFormatProvider,UnitsNet.RotationalSpeed@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.TryParseUnit(System.String,UnitsNet.Units.RotationalSpeedUnit@)">
            <inheritdoc cref="M:UnitsNet.RotationalSpeed.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.RotationalSpeedUnit@)"/>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.RotationalSpeedUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.op_UnaryNegation(UnitsNet.RotationalSpeed)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.op_Addition(UnitsNet.RotationalSpeed,UnitsNet.RotationalSpeed)">
            <summary>Get <see cref="T:UnitsNet.RotationalSpeed"/> from adding two <see cref="T:UnitsNet.RotationalSpeed"/>.</summary>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.op_Subtraction(UnitsNet.RotationalSpeed,UnitsNet.RotationalSpeed)">
            <summary>Get <see cref="T:UnitsNet.RotationalSpeed"/> from subtracting two <see cref="T:UnitsNet.RotationalSpeed"/>.</summary>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.op_Multiply(System.Double,UnitsNet.RotationalSpeed)">
            <summary>Get <see cref="T:UnitsNet.RotationalSpeed"/> from multiplying value and <see cref="T:UnitsNet.RotationalSpeed"/>.</summary>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.op_Multiply(UnitsNet.RotationalSpeed,System.Double)">
            <summary>Get <see cref="T:UnitsNet.RotationalSpeed"/> from multiplying value and <see cref="T:UnitsNet.RotationalSpeed"/>.</summary>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.op_Division(UnitsNet.RotationalSpeed,System.Double)">
            <summary>Get <see cref="T:UnitsNet.RotationalSpeed"/> from dividing <see cref="T:UnitsNet.RotationalSpeed"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.op_Division(UnitsNet.RotationalSpeed,UnitsNet.RotationalSpeed)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.RotationalSpeed"/> by <see cref="T:UnitsNet.RotationalSpeed"/>.</summary>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.op_LessThanOrEqual(UnitsNet.RotationalSpeed,UnitsNet.RotationalSpeed)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.op_GreaterThanOrEqual(UnitsNet.RotationalSpeed,UnitsNet.RotationalSpeed)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.op_LessThan(UnitsNet.RotationalSpeed,UnitsNet.RotationalSpeed)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.op_GreaterThan(UnitsNet.RotationalSpeed,UnitsNet.RotationalSpeed)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.op_Equality(UnitsNet.RotationalSpeed,UnitsNet.RotationalSpeed)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.RotationalSpeed.Equals(UnitsNet.RotationalSpeed,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.op_Inequality(UnitsNet.RotationalSpeed,UnitsNet.RotationalSpeed)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.RotationalSpeed.Equals(UnitsNet.RotationalSpeed,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RotationalSpeed.CompareTo(UnitsNet.RotationalSpeed)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RotationalSpeed.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.RotationalSpeed.Equals(UnitsNet.RotationalSpeed,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.Equals(UnitsNet.RotationalSpeed)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.RotationalSpeed.Equals(UnitsNet.RotationalSpeed,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.Equals(UnitsNet.RotationalSpeed,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another RotationalSpeed within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current RotationalSpeed.</returns>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.As(UnitsNet.Units.RotationalSpeedUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RotationalSpeed.ToUnit(UnitsNet.Units.RotationalSpeedUnit)">
            <summary>
                Converts this RotationalSpeed to another RotationalSpeed with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A RotationalSpeed with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.ToUnit(UnitsNet.Units.RotationalSpeedUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this RotationalSpeed to another RotationalSpeed using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A RotationalSpeed with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RotationalSpeed.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RotationalSpeed.UnitsNet#IQuantity{UnitsNet#Units#RotationalSpeedUnit}#ToUnit(UnitsNet.Units.RotationalSpeedUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RotationalSpeed.UnitsNet#IQuantity{UnitsNet#Units#RotationalSpeedUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RotationalSpeed.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.RotationalStiffness">
            <inheritdoc />
            <summary>
                https://en.wikipedia.org/wiki/Stiffness#Rotational_stiffness
            </summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.op_Multiply(UnitsNet.RotationalStiffness,UnitsNet.Angle)">
            <summary>Get <see cref="T:UnitsNet.Torque"/> from <see cref="T:UnitsNet.RotationalStiffness"/> times <see cref="T:UnitsNet.Angle"/>.</summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.op_Division(UnitsNet.RotationalStiffness,UnitsNet.Length)">
            <summary>Get <see cref="T:UnitsNet.RotationalStiffnessPerLength"/> from <see cref="T:UnitsNet.RotationalStiffness"/> divided by <see cref="T:UnitsNet.Length"/>.</summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.op_Division(UnitsNet.RotationalStiffness,UnitsNet.RotationalStiffnessPerLength)">
            <summary>Get <see cref="T:UnitsNet.Length"/> from <see cref="T:UnitsNet.RotationalStiffness"/> divided by <see cref="T:UnitsNet.RotationalStiffnessPerLength"/>.</summary>
        </member>
        <member name="F:UnitsNet.RotationalStiffness._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.RotationalStiffness._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.#ctor(System.Double,UnitsNet.Units.RotationalStiffnessUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.RotationalStiffness" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.RotationalStiffness.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.BaseUnit">
            <summary>
                The base unit of RotationalStiffness, which is NewtonMeterPerRadian. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.MaxValue">
            <summary>
            Represents the largest possible value of RotationalStiffness
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.MinValue">
            <summary>
            Represents the smallest possible value of RotationalStiffness
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.RotationalStiffness.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.Units">
            <summary>
                All units of measurement for the RotationalStiffness quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit NewtonMeterPerRadian.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.RotationalStiffness.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.RotationalStiffness.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.Type">
            <summary>
                The <see cref="P:UnitsNet.RotationalStiffness.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.RotationalStiffness.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.CentinewtonMetersPerDegree">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.CentinewtonMeterPerDegree"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.CentinewtonMillimetersPerDegree">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.CentinewtonMillimeterPerDegree"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.CentinewtonMillimetersPerRadian">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.CentinewtonMillimeterPerRadian"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.DecanewtonMetersPerDegree">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.DecanewtonMeterPerDegree"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.DecanewtonMillimetersPerDegree">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.DecanewtonMillimeterPerDegree"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.DecanewtonMillimetersPerRadian">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.DecanewtonMillimeterPerRadian"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.DecinewtonMetersPerDegree">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.DecinewtonMeterPerDegree"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.DecinewtonMillimetersPerDegree">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.DecinewtonMillimeterPerDegree"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.DecinewtonMillimetersPerRadian">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.DecinewtonMillimeterPerRadian"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.KilonewtonMetersPerDegree">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.KilonewtonMeterPerDegree"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.KilonewtonMetersPerRadian">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.KilonewtonMeterPerRadian"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.KilonewtonMillimetersPerDegree">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.KilonewtonMillimeterPerDegree"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.KilonewtonMillimetersPerRadian">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.KilonewtonMillimeterPerRadian"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.KilopoundForceFeetPerDegrees">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.KilopoundForceFootPerDegrees"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.MeganewtonMetersPerDegree">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.MeganewtonMeterPerDegree"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.MeganewtonMetersPerRadian">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.MeganewtonMeterPerRadian"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.MeganewtonMillimetersPerDegree">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.MeganewtonMillimeterPerDegree"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.MeganewtonMillimetersPerRadian">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.MeganewtonMillimeterPerRadian"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.MicronewtonMetersPerDegree">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.MicronewtonMeterPerDegree"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.MicronewtonMillimetersPerDegree">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.MicronewtonMillimeterPerDegree"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.MicronewtonMillimetersPerRadian">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.MicronewtonMillimeterPerRadian"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.MillinewtonMetersPerDegree">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.MillinewtonMeterPerDegree"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.MillinewtonMillimetersPerDegree">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.MillinewtonMillimeterPerDegree"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.MillinewtonMillimetersPerRadian">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.MillinewtonMillimeterPerRadian"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.NanonewtonMetersPerDegree">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.NanonewtonMeterPerDegree"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.NanonewtonMillimetersPerDegree">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.NanonewtonMillimeterPerDegree"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.NanonewtonMillimetersPerRadian">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.NanonewtonMillimeterPerRadian"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.NewtonMetersPerDegree">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.NewtonMeterPerDegree"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.NewtonMetersPerRadian">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.NewtonMeterPerRadian"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.NewtonMillimetersPerDegree">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.NewtonMillimeterPerDegree"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.NewtonMillimetersPerRadian">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.NewtonMillimeterPerRadian"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.PoundForceFeetPerRadian">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.PoundForceFeetPerRadian"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.PoundForceFeetPerDegrees">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.PoundForceFootPerDegrees"/>
            </summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.GetAbbreviation(UnitsNet.Units.RotationalStiffnessUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.GetAbbreviation(UnitsNet.Units.RotationalStiffnessUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromCentinewtonMetersPerDegree(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.CentinewtonMeterPerDegree"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromCentinewtonMillimetersPerDegree(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.CentinewtonMillimeterPerDegree"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromCentinewtonMillimetersPerRadian(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.CentinewtonMillimeterPerRadian"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromDecanewtonMetersPerDegree(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.DecanewtonMeterPerDegree"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromDecanewtonMillimetersPerDegree(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.DecanewtonMillimeterPerDegree"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromDecanewtonMillimetersPerRadian(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.DecanewtonMillimeterPerRadian"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromDecinewtonMetersPerDegree(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.DecinewtonMeterPerDegree"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromDecinewtonMillimetersPerDegree(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.DecinewtonMillimeterPerDegree"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromDecinewtonMillimetersPerRadian(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.DecinewtonMillimeterPerRadian"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromKilonewtonMetersPerDegree(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.KilonewtonMeterPerDegree"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromKilonewtonMetersPerRadian(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.KilonewtonMeterPerRadian"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromKilonewtonMillimetersPerDegree(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.KilonewtonMillimeterPerDegree"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromKilonewtonMillimetersPerRadian(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.KilonewtonMillimeterPerRadian"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromKilopoundForceFeetPerDegrees(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.KilopoundForceFootPerDegrees"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromMeganewtonMetersPerDegree(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.MeganewtonMeterPerDegree"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromMeganewtonMetersPerRadian(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.MeganewtonMeterPerRadian"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromMeganewtonMillimetersPerDegree(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.MeganewtonMillimeterPerDegree"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromMeganewtonMillimetersPerRadian(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.MeganewtonMillimeterPerRadian"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromMicronewtonMetersPerDegree(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.MicronewtonMeterPerDegree"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromMicronewtonMillimetersPerDegree(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.MicronewtonMillimeterPerDegree"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromMicronewtonMillimetersPerRadian(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.MicronewtonMillimeterPerRadian"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromMillinewtonMetersPerDegree(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.MillinewtonMeterPerDegree"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromMillinewtonMillimetersPerDegree(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.MillinewtonMillimeterPerDegree"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromMillinewtonMillimetersPerRadian(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.MillinewtonMillimeterPerRadian"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromNanonewtonMetersPerDegree(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.NanonewtonMeterPerDegree"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromNanonewtonMillimetersPerDegree(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.NanonewtonMillimeterPerDegree"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromNanonewtonMillimetersPerRadian(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.NanonewtonMillimeterPerRadian"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromNewtonMetersPerDegree(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.NewtonMeterPerDegree"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromNewtonMetersPerRadian(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.NewtonMeterPerRadian"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromNewtonMillimetersPerDegree(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.NewtonMillimeterPerDegree"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromNewtonMillimetersPerRadian(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.NewtonMillimeterPerRadian"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromPoundForceFeetPerRadian(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.PoundForceFeetPerRadian"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromPoundForceFeetPerDegrees(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessUnit.PoundForceFootPerDegrees"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.From(UnitsNet.QuantityValue,UnitsNet.Units.RotationalStiffnessUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.RotationalStiffnessUnit" /> to <see cref="T:UnitsNet.RotationalStiffness" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>RotationalStiffness unit value.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.TryParse(System.String,UnitsNet.RotationalStiffness@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.TryParse(System.String,System.IFormatProvider,UnitsNet.RotationalStiffness@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.TryParseUnit(System.String,UnitsNet.Units.RotationalStiffnessUnit@)">
            <inheritdoc cref="M:UnitsNet.RotationalStiffness.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.RotationalStiffnessUnit@)"/>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.RotationalStiffnessUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.op_UnaryNegation(UnitsNet.RotationalStiffness)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.op_Addition(UnitsNet.RotationalStiffness,UnitsNet.RotationalStiffness)">
            <summary>Get <see cref="T:UnitsNet.RotationalStiffness"/> from adding two <see cref="T:UnitsNet.RotationalStiffness"/>.</summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.op_Subtraction(UnitsNet.RotationalStiffness,UnitsNet.RotationalStiffness)">
            <summary>Get <see cref="T:UnitsNet.RotationalStiffness"/> from subtracting two <see cref="T:UnitsNet.RotationalStiffness"/>.</summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.op_Multiply(System.Double,UnitsNet.RotationalStiffness)">
            <summary>Get <see cref="T:UnitsNet.RotationalStiffness"/> from multiplying value and <see cref="T:UnitsNet.RotationalStiffness"/>.</summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.op_Multiply(UnitsNet.RotationalStiffness,System.Double)">
            <summary>Get <see cref="T:UnitsNet.RotationalStiffness"/> from multiplying value and <see cref="T:UnitsNet.RotationalStiffness"/>.</summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.op_Division(UnitsNet.RotationalStiffness,System.Double)">
            <summary>Get <see cref="T:UnitsNet.RotationalStiffness"/> from dividing <see cref="T:UnitsNet.RotationalStiffness"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.op_Division(UnitsNet.RotationalStiffness,UnitsNet.RotationalStiffness)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.RotationalStiffness"/> by <see cref="T:UnitsNet.RotationalStiffness"/>.</summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.op_LessThanOrEqual(UnitsNet.RotationalStiffness,UnitsNet.RotationalStiffness)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.op_GreaterThanOrEqual(UnitsNet.RotationalStiffness,UnitsNet.RotationalStiffness)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.op_LessThan(UnitsNet.RotationalStiffness,UnitsNet.RotationalStiffness)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.op_GreaterThan(UnitsNet.RotationalStiffness,UnitsNet.RotationalStiffness)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.op_Equality(UnitsNet.RotationalStiffness,UnitsNet.RotationalStiffness)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.RotationalStiffness.Equals(UnitsNet.RotationalStiffness,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.op_Inequality(UnitsNet.RotationalStiffness,UnitsNet.RotationalStiffness)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.RotationalStiffness.Equals(UnitsNet.RotationalStiffness,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RotationalStiffness.CompareTo(UnitsNet.RotationalStiffness)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RotationalStiffness.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.RotationalStiffness.Equals(UnitsNet.RotationalStiffness,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.Equals(UnitsNet.RotationalStiffness)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.RotationalStiffness.Equals(UnitsNet.RotationalStiffness,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.Equals(UnitsNet.RotationalStiffness,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another RotationalStiffness within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current RotationalStiffness.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.As(UnitsNet.Units.RotationalStiffnessUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RotationalStiffness.ToUnit(UnitsNet.Units.RotationalStiffnessUnit)">
            <summary>
                Converts this RotationalStiffness to another RotationalStiffness with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A RotationalStiffness with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.ToUnit(UnitsNet.Units.RotationalStiffnessUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this RotationalStiffness to another RotationalStiffness using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A RotationalStiffness with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RotationalStiffness.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RotationalStiffness.UnitsNet#IQuantity{UnitsNet#Units#RotationalStiffnessUnit}#ToUnit(UnitsNet.Units.RotationalStiffnessUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RotationalStiffness.UnitsNet#IQuantity{UnitsNet#Units#RotationalStiffnessUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RotationalStiffness.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.RotationalStiffnessPerLength">
            <inheritdoc />
            <summary>
                https://en.wikipedia.org/wiki/Stiffness#Rotational_stiffness
            </summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.op_Multiply(UnitsNet.RotationalStiffnessPerLength,UnitsNet.Length)">
            <summary>Get <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="T:UnitsNet.RotationalStiffnessPerLength"/> times <see cref="T:UnitsNet.Length"/>.</summary>
        </member>
        <member name="F:UnitsNet.RotationalStiffnessPerLength._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.RotationalStiffnessPerLength._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.#ctor(System.Double,UnitsNet.Units.RotationalStiffnessPerLengthUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.RotationalStiffnessPerLength" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.RotationalStiffnessPerLength.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.BaseUnit">
            <summary>
                The base unit of RotationalStiffnessPerLength, which is NewtonMeterPerRadianPerMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.MaxValue">
            <summary>
            Represents the largest possible value of RotationalStiffnessPerLength
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.MinValue">
            <summary>
            Represents the smallest possible value of RotationalStiffnessPerLength
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.RotationalStiffnessPerLength.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.Units">
            <summary>
                All units of measurement for the RotationalStiffnessPerLength quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit NewtonMeterPerRadianPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.Type">
            <summary>
                The <see cref="P:UnitsNet.RotationalStiffnessPerLength.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.RotationalStiffnessPerLength.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.KilonewtonMetersPerRadianPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessPerLengthUnit.KilonewtonMeterPerRadianPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.KilopoundForceFeetPerDegreesPerFeet">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessPerLengthUnit.KilopoundForceFootPerDegreesPerFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.MeganewtonMetersPerRadianPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessPerLengthUnit.MeganewtonMeterPerRadianPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.NewtonMetersPerRadianPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessPerLengthUnit.NewtonMeterPerRadianPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.PoundForceFeetPerDegreesPerFeet">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalStiffnessPerLengthUnit.PoundForceFootPerDegreesPerFoot"/>
            </summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.GetAbbreviation(UnitsNet.Units.RotationalStiffnessPerLengthUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.GetAbbreviation(UnitsNet.Units.RotationalStiffnessPerLengthUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.FromKilonewtonMetersPerRadianPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffnessPerLength"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessPerLengthUnit.KilonewtonMeterPerRadianPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.FromKilopoundForceFeetPerDegreesPerFeet(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffnessPerLength"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessPerLengthUnit.KilopoundForceFootPerDegreesPerFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.FromMeganewtonMetersPerRadianPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffnessPerLength"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessPerLengthUnit.MeganewtonMeterPerRadianPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.FromNewtonMetersPerRadianPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffnessPerLength"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessPerLengthUnit.NewtonMeterPerRadianPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.FromPoundForceFeetPerDegreesPerFeet(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalStiffnessPerLength"/> from <see cref="F:UnitsNet.Units.RotationalStiffnessPerLengthUnit.PoundForceFootPerDegreesPerFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.From(UnitsNet.QuantityValue,UnitsNet.Units.RotationalStiffnessPerLengthUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.RotationalStiffnessPerLengthUnit" /> to <see cref="T:UnitsNet.RotationalStiffnessPerLength" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>RotationalStiffnessPerLength unit value.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.TryParse(System.String,UnitsNet.RotationalStiffnessPerLength@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.TryParse(System.String,System.IFormatProvider,UnitsNet.RotationalStiffnessPerLength@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.TryParseUnit(System.String,UnitsNet.Units.RotationalStiffnessPerLengthUnit@)">
            <inheritdoc cref="M:UnitsNet.RotationalStiffnessPerLength.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.RotationalStiffnessPerLengthUnit@)"/>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.RotationalStiffnessPerLengthUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.op_UnaryNegation(UnitsNet.RotationalStiffnessPerLength)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.op_Addition(UnitsNet.RotationalStiffnessPerLength,UnitsNet.RotationalStiffnessPerLength)">
            <summary>Get <see cref="T:UnitsNet.RotationalStiffnessPerLength"/> from adding two <see cref="T:UnitsNet.RotationalStiffnessPerLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.op_Subtraction(UnitsNet.RotationalStiffnessPerLength,UnitsNet.RotationalStiffnessPerLength)">
            <summary>Get <see cref="T:UnitsNet.RotationalStiffnessPerLength"/> from subtracting two <see cref="T:UnitsNet.RotationalStiffnessPerLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.op_Multiply(System.Double,UnitsNet.RotationalStiffnessPerLength)">
            <summary>Get <see cref="T:UnitsNet.RotationalStiffnessPerLength"/> from multiplying value and <see cref="T:UnitsNet.RotationalStiffnessPerLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.op_Multiply(UnitsNet.RotationalStiffnessPerLength,System.Double)">
            <summary>Get <see cref="T:UnitsNet.RotationalStiffnessPerLength"/> from multiplying value and <see cref="T:UnitsNet.RotationalStiffnessPerLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.op_Division(UnitsNet.RotationalStiffnessPerLength,System.Double)">
            <summary>Get <see cref="T:UnitsNet.RotationalStiffnessPerLength"/> from dividing <see cref="T:UnitsNet.RotationalStiffnessPerLength"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.op_Division(UnitsNet.RotationalStiffnessPerLength,UnitsNet.RotationalStiffnessPerLength)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.RotationalStiffnessPerLength"/> by <see cref="T:UnitsNet.RotationalStiffnessPerLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.op_LessThanOrEqual(UnitsNet.RotationalStiffnessPerLength,UnitsNet.RotationalStiffnessPerLength)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.op_GreaterThanOrEqual(UnitsNet.RotationalStiffnessPerLength,UnitsNet.RotationalStiffnessPerLength)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.op_LessThan(UnitsNet.RotationalStiffnessPerLength,UnitsNet.RotationalStiffnessPerLength)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.op_GreaterThan(UnitsNet.RotationalStiffnessPerLength,UnitsNet.RotationalStiffnessPerLength)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.op_Equality(UnitsNet.RotationalStiffnessPerLength,UnitsNet.RotationalStiffnessPerLength)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.RotationalStiffnessPerLength.Equals(UnitsNet.RotationalStiffnessPerLength,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.op_Inequality(UnitsNet.RotationalStiffnessPerLength,UnitsNet.RotationalStiffnessPerLength)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.RotationalStiffnessPerLength.Equals(UnitsNet.RotationalStiffnessPerLength,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.CompareTo(UnitsNet.RotationalStiffnessPerLength)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.RotationalStiffnessPerLength.Equals(UnitsNet.RotationalStiffnessPerLength,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.Equals(UnitsNet.RotationalStiffnessPerLength)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.RotationalStiffnessPerLength.Equals(UnitsNet.RotationalStiffnessPerLength,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.Equals(UnitsNet.RotationalStiffnessPerLength,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another RotationalStiffnessPerLength within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current RotationalStiffnessPerLength.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.As(UnitsNet.Units.RotationalStiffnessPerLengthUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.ToUnit(UnitsNet.Units.RotationalStiffnessPerLengthUnit)">
            <summary>
                Converts this RotationalStiffnessPerLength to another RotationalStiffnessPerLength with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A RotationalStiffnessPerLength with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.ToUnit(UnitsNet.Units.RotationalStiffnessPerLengthUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this RotationalStiffnessPerLength to another RotationalStiffnessPerLength using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A RotationalStiffnessPerLength with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.UnitsNet#IQuantity{UnitsNet#Units#RotationalStiffnessPerLengthUnit}#ToUnit(UnitsNet.Units.RotationalStiffnessPerLengthUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.UnitsNet#IQuantity{UnitsNet#Units#RotationalStiffnessPerLengthUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.SpecificEnergy">
            <inheritdoc />
            <summary>
                The SpecificEnergy
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Specific_energy
            </remarks>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.op_Multiply(UnitsNet.SpecificEnergy,UnitsNet.Mass)">
            <summary>Get <see cref="T:UnitsNet.Energy"/> from <see cref="T:UnitsNet.SpecificEnergy"/> times <see cref="T:UnitsNet.Mass"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.op_Multiply(UnitsNet.Mass,UnitsNet.SpecificEnergy)">
            <summary>Get <see cref="T:UnitsNet.Energy"/> from <see cref="T:UnitsNet.Mass"/> times <see cref="T:UnitsNet.SpecificEnergy"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.op_Division(System.Double,UnitsNet.SpecificEnergy)">
            <summary>Get <see cref="T:UnitsNet.BrakeSpecificFuelConsumption"/> from <see cref="T:System.Double"/> divided by <see cref="T:UnitsNet.SpecificEnergy"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.op_Multiply(UnitsNet.SpecificEnergy,UnitsNet.BrakeSpecificFuelConsumption)">
            <summary>Get <see cref="T:System.Double"/> from <see cref="T:UnitsNet.SpecificEnergy"/> times <see cref="T:UnitsNet.BrakeSpecificFuelConsumption"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.op_Multiply(UnitsNet.SpecificEnergy,UnitsNet.MassFlow)">
            <summary>Get <see cref="T:UnitsNet.Power"/> from <see cref="T:UnitsNet.SpecificEnergy"/> times <see cref="T:UnitsNet.MassFlow"/>.</summary>
        </member>
        <member name="F:UnitsNet.SpecificEnergy._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.SpecificEnergy._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.#ctor(System.Double,UnitsNet.Units.SpecificEnergyUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.SpecificEnergy" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.SpecificEnergy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.BaseUnit">
            <summary>
                The base unit of SpecificEnergy, which is JoulePerKilogram. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.MaxValue">
            <summary>
            Represents the largest possible value of SpecificEnergy
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.MinValue">
            <summary>
            Represents the smallest possible value of SpecificEnergy
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.SpecificEnergy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.Units">
            <summary>
                All units of measurement for the SpecificEnergy quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit JoulePerKilogram.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.SpecificEnergy.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.SpecificEnergy.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.Type">
            <summary>
                The <see cref="P:UnitsNet.SpecificEnergy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.SpecificEnergy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.BtuPerPound">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEnergyUnit.BtuPerPound"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.CaloriesPerGram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEnergyUnit.CaloriePerGram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.GigawattDaysPerKilogram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEnergyUnit.GigawattDayPerKilogram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.GigawattDaysPerShortTon">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEnergyUnit.GigawattDayPerShortTon"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.GigawattDaysPerTonne">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEnergyUnit.GigawattDayPerTonne"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.GigawattHoursPerKilogram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEnergyUnit.GigawattHourPerKilogram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.JoulesPerKilogram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEnergyUnit.JoulePerKilogram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.KilocaloriesPerGram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEnergyUnit.KilocaloriePerGram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.KilojoulesPerKilogram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEnergyUnit.KilojoulePerKilogram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.KilowattDaysPerKilogram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEnergyUnit.KilowattDayPerKilogram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.KilowattDaysPerShortTon">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEnergyUnit.KilowattDayPerShortTon"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.KilowattDaysPerTonne">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEnergyUnit.KilowattDayPerTonne"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.KilowattHoursPerKilogram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEnergyUnit.KilowattHourPerKilogram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.MegajoulesPerKilogram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEnergyUnit.MegajoulePerKilogram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.MegawattDaysPerKilogram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEnergyUnit.MegawattDayPerKilogram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.MegawattDaysPerShortTon">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEnergyUnit.MegawattDayPerShortTon"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.MegawattDaysPerTonne">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEnergyUnit.MegawattDayPerTonne"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.MegawattHoursPerKilogram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEnergyUnit.MegawattHourPerKilogram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.TerawattDaysPerKilogram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEnergyUnit.TerawattDayPerKilogram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.TerawattDaysPerShortTon">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEnergyUnit.TerawattDayPerShortTon"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.TerawattDaysPerTonne">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEnergyUnit.TerawattDayPerTonne"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.WattDaysPerKilogram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEnergyUnit.WattDayPerKilogram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.WattDaysPerShortTon">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEnergyUnit.WattDayPerShortTon"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.WattDaysPerTonne">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEnergyUnit.WattDayPerTonne"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.WattHoursPerKilogram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEnergyUnit.WattHourPerKilogram"/>
            </summary>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.GetAbbreviation(UnitsNet.Units.SpecificEnergyUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.GetAbbreviation(UnitsNet.Units.SpecificEnergyUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromBtuPerPound(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="F:UnitsNet.Units.SpecificEnergyUnit.BtuPerPound"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromCaloriesPerGram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="F:UnitsNet.Units.SpecificEnergyUnit.CaloriePerGram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromGigawattDaysPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="F:UnitsNet.Units.SpecificEnergyUnit.GigawattDayPerKilogram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromGigawattDaysPerShortTon(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="F:UnitsNet.Units.SpecificEnergyUnit.GigawattDayPerShortTon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromGigawattDaysPerTonne(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="F:UnitsNet.Units.SpecificEnergyUnit.GigawattDayPerTonne"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromGigawattHoursPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="F:UnitsNet.Units.SpecificEnergyUnit.GigawattHourPerKilogram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromJoulesPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="F:UnitsNet.Units.SpecificEnergyUnit.JoulePerKilogram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromKilocaloriesPerGram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="F:UnitsNet.Units.SpecificEnergyUnit.KilocaloriePerGram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromKilojoulesPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="F:UnitsNet.Units.SpecificEnergyUnit.KilojoulePerKilogram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromKilowattDaysPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="F:UnitsNet.Units.SpecificEnergyUnit.KilowattDayPerKilogram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromKilowattDaysPerShortTon(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="F:UnitsNet.Units.SpecificEnergyUnit.KilowattDayPerShortTon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromKilowattDaysPerTonne(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="F:UnitsNet.Units.SpecificEnergyUnit.KilowattDayPerTonne"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromKilowattHoursPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="F:UnitsNet.Units.SpecificEnergyUnit.KilowattHourPerKilogram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromMegajoulesPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="F:UnitsNet.Units.SpecificEnergyUnit.MegajoulePerKilogram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromMegawattDaysPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="F:UnitsNet.Units.SpecificEnergyUnit.MegawattDayPerKilogram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromMegawattDaysPerShortTon(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="F:UnitsNet.Units.SpecificEnergyUnit.MegawattDayPerShortTon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromMegawattDaysPerTonne(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="F:UnitsNet.Units.SpecificEnergyUnit.MegawattDayPerTonne"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromMegawattHoursPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="F:UnitsNet.Units.SpecificEnergyUnit.MegawattHourPerKilogram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromTerawattDaysPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="F:UnitsNet.Units.SpecificEnergyUnit.TerawattDayPerKilogram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromTerawattDaysPerShortTon(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="F:UnitsNet.Units.SpecificEnergyUnit.TerawattDayPerShortTon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromTerawattDaysPerTonne(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="F:UnitsNet.Units.SpecificEnergyUnit.TerawattDayPerTonne"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromWattDaysPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="F:UnitsNet.Units.SpecificEnergyUnit.WattDayPerKilogram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromWattDaysPerShortTon(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="F:UnitsNet.Units.SpecificEnergyUnit.WattDayPerShortTon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromWattDaysPerTonne(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="F:UnitsNet.Units.SpecificEnergyUnit.WattDayPerTonne"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromWattHoursPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="F:UnitsNet.Units.SpecificEnergyUnit.WattHourPerKilogram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.From(UnitsNet.QuantityValue,UnitsNet.Units.SpecificEnergyUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.SpecificEnergyUnit" /> to <see cref="T:UnitsNet.SpecificEnergy" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>SpecificEnergy unit value.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.TryParse(System.String,UnitsNet.SpecificEnergy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.TryParse(System.String,System.IFormatProvider,UnitsNet.SpecificEnergy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.TryParseUnit(System.String,UnitsNet.Units.SpecificEnergyUnit@)">
            <inheritdoc cref="M:UnitsNet.SpecificEnergy.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.SpecificEnergyUnit@)"/>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.SpecificEnergyUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.op_UnaryNegation(UnitsNet.SpecificEnergy)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.op_Addition(UnitsNet.SpecificEnergy,UnitsNet.SpecificEnergy)">
            <summary>Get <see cref="T:UnitsNet.SpecificEnergy"/> from adding two <see cref="T:UnitsNet.SpecificEnergy"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.op_Subtraction(UnitsNet.SpecificEnergy,UnitsNet.SpecificEnergy)">
            <summary>Get <see cref="T:UnitsNet.SpecificEnergy"/> from subtracting two <see cref="T:UnitsNet.SpecificEnergy"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.op_Multiply(System.Double,UnitsNet.SpecificEnergy)">
            <summary>Get <see cref="T:UnitsNet.SpecificEnergy"/> from multiplying value and <see cref="T:UnitsNet.SpecificEnergy"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.op_Multiply(UnitsNet.SpecificEnergy,System.Double)">
            <summary>Get <see cref="T:UnitsNet.SpecificEnergy"/> from multiplying value and <see cref="T:UnitsNet.SpecificEnergy"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.op_Division(UnitsNet.SpecificEnergy,System.Double)">
            <summary>Get <see cref="T:UnitsNet.SpecificEnergy"/> from dividing <see cref="T:UnitsNet.SpecificEnergy"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.op_Division(UnitsNet.SpecificEnergy,UnitsNet.SpecificEnergy)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.SpecificEnergy"/> by <see cref="T:UnitsNet.SpecificEnergy"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.op_LessThanOrEqual(UnitsNet.SpecificEnergy,UnitsNet.SpecificEnergy)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.op_GreaterThanOrEqual(UnitsNet.SpecificEnergy,UnitsNet.SpecificEnergy)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.op_LessThan(UnitsNet.SpecificEnergy,UnitsNet.SpecificEnergy)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.op_GreaterThan(UnitsNet.SpecificEnergy,UnitsNet.SpecificEnergy)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.op_Equality(UnitsNet.SpecificEnergy,UnitsNet.SpecificEnergy)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.SpecificEnergy.Equals(UnitsNet.SpecificEnergy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.op_Inequality(UnitsNet.SpecificEnergy,UnitsNet.SpecificEnergy)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.SpecificEnergy.Equals(UnitsNet.SpecificEnergy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificEnergy.CompareTo(UnitsNet.SpecificEnergy)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificEnergy.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.SpecificEnergy.Equals(UnitsNet.SpecificEnergy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.Equals(UnitsNet.SpecificEnergy)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.SpecificEnergy.Equals(UnitsNet.SpecificEnergy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.Equals(UnitsNet.SpecificEnergy,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another SpecificEnergy within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current SpecificEnergy.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.As(UnitsNet.Units.SpecificEnergyUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificEnergy.ToUnit(UnitsNet.Units.SpecificEnergyUnit)">
            <summary>
                Converts this SpecificEnergy to another SpecificEnergy with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A SpecificEnergy with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.ToUnit(UnitsNet.Units.SpecificEnergyUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this SpecificEnergy to another SpecificEnergy using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A SpecificEnergy with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificEnergy.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificEnergy.UnitsNet#IQuantity{UnitsNet#Units#SpecificEnergyUnit}#ToUnit(UnitsNet.Units.SpecificEnergyUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificEnergy.UnitsNet#IQuantity{UnitsNet#Units#SpecificEnergyUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificEnergy.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.SpecificVolume">
            <inheritdoc />
            <summary>
                In thermodynamics, the specific volume of a substance is the ratio of the substance's volume to its mass. It is the reciprocal of density and an intrinsic property of matter as well.
            </summary>
        </member>
        <member name="M:UnitsNet.SpecificVolume.op_Division(System.Double,UnitsNet.SpecificVolume)">
            <summary>Get <see cref="T:UnitsNet.Density"/> from <see cref="T:System.Double"/> divided by <see cref="T:UnitsNet.SpecificVolume"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificVolume.op_Multiply(UnitsNet.SpecificVolume,UnitsNet.Mass)">
            <summary>Get <see cref="T:UnitsNet.Volume"/> from <see cref="T:UnitsNet.SpecificVolume"/> times <see cref="T:UnitsNet.Mass"/>.</summary>
        </member>
        <member name="F:UnitsNet.SpecificVolume._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.SpecificVolume._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.SpecificVolume.#ctor(System.Double,UnitsNet.Units.SpecificVolumeUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificVolume.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.SpecificVolume.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.SpecificVolume" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificVolume.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.SpecificVolume.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.SpecificVolume.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificVolume.BaseUnit">
            <summary>
                The base unit of SpecificVolume, which is CubicMeterPerKilogram. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificVolume.MaxValue">
            <summary>
            Represents the largest possible value of SpecificVolume
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificVolume.MinValue">
            <summary>
            Represents the smallest possible value of SpecificVolume
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificVolume.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.SpecificVolume.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificVolume.Units">
            <summary>
                All units of measurement for the SpecificVolume quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificVolume.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit CubicMeterPerKilogram.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificVolume.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificVolume.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.SpecificVolume.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.SpecificVolume.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.SpecificVolume.Type">
            <summary>
                The <see cref="P:UnitsNet.SpecificVolume.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificVolume.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.SpecificVolume.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificVolume.CubicFeetPerPound">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificVolumeUnit.CubicFootPerPound"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificVolume.CubicMetersPerKilogram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificVolumeUnit.CubicMeterPerKilogram"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificVolume.MillicubicMetersPerKilogram">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificVolumeUnit.MillicubicMeterPerKilogram"/>
            </summary>
        </member>
        <member name="M:UnitsNet.SpecificVolume.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.SpecificVolume.GetAbbreviation(UnitsNet.Units.SpecificVolumeUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.SpecificVolume.GetAbbreviation(UnitsNet.Units.SpecificVolumeUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificVolume.FromCubicFeetPerPound(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificVolume"/> from <see cref="F:UnitsNet.Units.SpecificVolumeUnit.CubicFootPerPound"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificVolume.FromCubicMetersPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificVolume"/> from <see cref="F:UnitsNet.Units.SpecificVolumeUnit.CubicMeterPerKilogram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificVolume.FromMillicubicMetersPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificVolume"/> from <see cref="F:UnitsNet.Units.SpecificVolumeUnit.MillicubicMeterPerKilogram"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificVolume.From(UnitsNet.QuantityValue,UnitsNet.Units.SpecificVolumeUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.SpecificVolumeUnit" /> to <see cref="T:UnitsNet.SpecificVolume" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>SpecificVolume unit value.</returns>
        </member>
        <member name="M:UnitsNet.SpecificVolume.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.SpecificVolume.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificVolume.TryParse(System.String,UnitsNet.SpecificVolume@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SpecificVolume.TryParse(System.String,System.IFormatProvider,UnitsNet.SpecificVolume@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificVolume.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.SpecificVolume.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.SpecificVolume.TryParseUnit(System.String,UnitsNet.Units.SpecificVolumeUnit@)">
            <inheritdoc cref="M:UnitsNet.SpecificVolume.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.SpecificVolumeUnit@)"/>
        </member>
        <member name="M:UnitsNet.SpecificVolume.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.SpecificVolumeUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificVolume.op_UnaryNegation(UnitsNet.SpecificVolume)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.SpecificVolume.op_Addition(UnitsNet.SpecificVolume,UnitsNet.SpecificVolume)">
            <summary>Get <see cref="T:UnitsNet.SpecificVolume"/> from adding two <see cref="T:UnitsNet.SpecificVolume"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificVolume.op_Subtraction(UnitsNet.SpecificVolume,UnitsNet.SpecificVolume)">
            <summary>Get <see cref="T:UnitsNet.SpecificVolume"/> from subtracting two <see cref="T:UnitsNet.SpecificVolume"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificVolume.op_Multiply(System.Double,UnitsNet.SpecificVolume)">
            <summary>Get <see cref="T:UnitsNet.SpecificVolume"/> from multiplying value and <see cref="T:UnitsNet.SpecificVolume"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificVolume.op_Multiply(UnitsNet.SpecificVolume,System.Double)">
            <summary>Get <see cref="T:UnitsNet.SpecificVolume"/> from multiplying value and <see cref="T:UnitsNet.SpecificVolume"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificVolume.op_Division(UnitsNet.SpecificVolume,System.Double)">
            <summary>Get <see cref="T:UnitsNet.SpecificVolume"/> from dividing <see cref="T:UnitsNet.SpecificVolume"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.SpecificVolume.op_Division(UnitsNet.SpecificVolume,UnitsNet.SpecificVolume)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.SpecificVolume"/> by <see cref="T:UnitsNet.SpecificVolume"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificVolume.op_LessThanOrEqual(UnitsNet.SpecificVolume,UnitsNet.SpecificVolume)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.SpecificVolume.op_GreaterThanOrEqual(UnitsNet.SpecificVolume,UnitsNet.SpecificVolume)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.SpecificVolume.op_LessThan(UnitsNet.SpecificVolume,UnitsNet.SpecificVolume)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.SpecificVolume.op_GreaterThan(UnitsNet.SpecificVolume,UnitsNet.SpecificVolume)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.SpecificVolume.op_Equality(UnitsNet.SpecificVolume,UnitsNet.SpecificVolume)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.SpecificVolume.Equals(UnitsNet.SpecificVolume,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.SpecificVolume.op_Inequality(UnitsNet.SpecificVolume,UnitsNet.SpecificVolume)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.SpecificVolume.Equals(UnitsNet.SpecificVolume,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.SpecificVolume.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificVolume.CompareTo(UnitsNet.SpecificVolume)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificVolume.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.SpecificVolume.Equals(UnitsNet.SpecificVolume,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.SpecificVolume.Equals(UnitsNet.SpecificVolume)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.SpecificVolume.Equals(UnitsNet.SpecificVolume,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.SpecificVolume.Equals(UnitsNet.SpecificVolume,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another SpecificVolume within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.SpecificVolume.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current SpecificVolume.</returns>
        </member>
        <member name="M:UnitsNet.SpecificVolume.As(UnitsNet.Units.SpecificVolumeUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.SpecificVolume.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.SpecificVolume.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificVolume.ToUnit(UnitsNet.Units.SpecificVolumeUnit)">
            <summary>
                Converts this SpecificVolume to another SpecificVolume with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A SpecificVolume with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.SpecificVolume.ToUnit(UnitsNet.Units.SpecificVolumeUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this SpecificVolume to another SpecificVolume using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A SpecificVolume with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.SpecificVolume.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificVolume.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.SpecificVolume.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificVolume.UnitsNet#IQuantity{UnitsNet#Units#SpecificVolumeUnit}#ToUnit(UnitsNet.Units.SpecificVolumeUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificVolume.UnitsNet#IQuantity{UnitsNet#Units#SpecificVolumeUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificVolume.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.SpecificVolume.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificVolume.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificVolume.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificVolume.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.SpecificVolume.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.SpecificWeight">
            <inheritdoc />
            <summary>
                The SpecificWeight, or more precisely, the volumetric weight density, of a substance is its weight per unit volume.
            </summary>
            <remarks>
                http://en.wikipedia.org/wiki/Specificweight
            </remarks>
        </member>
        <member name="M:UnitsNet.SpecificWeight.op_Multiply(UnitsNet.SpecificWeight,UnitsNet.Length)">
            <summary>Get <see cref="T:UnitsNet.Pressure"/> from <see cref="T:UnitsNet.SpecificWeight"/> times <see cref="T:UnitsNet.Length"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificWeight.op_Multiply(UnitsNet.SpecificWeight,UnitsNet.Area)">
            <summary>Get <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="T:UnitsNet.SpecificWeight"/> times <see cref="T:UnitsNet.Area"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificWeight.op_Multiply(UnitsNet.Area,UnitsNet.SpecificWeight)">
            <summary>Get <see cref="T:UnitsNet.ForcePerLength"/> from <see cref="T:UnitsNet.Area"/> times <see cref="T:UnitsNet.SpecificWeight"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificWeight.op_Division(UnitsNet.SpecificWeight,UnitsNet.Density)">
            <summary>Get <see cref="T:UnitsNet.Acceleration"/> from <see cref="T:UnitsNet.SpecificWeight"/> divided by <see cref="T:UnitsNet.Density"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificWeight.op_Division(UnitsNet.SpecificWeight,UnitsNet.Acceleration)">
            <summary>Get <see cref="T:UnitsNet.Density"/> from <see cref="T:UnitsNet.SpecificWeight"/> divided by <see cref="T:UnitsNet.Acceleration"/>.</summary>
        </member>
        <member name="F:UnitsNet.SpecificWeight._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.SpecificWeight._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.SpecificWeight.#ctor(System.Double,UnitsNet.Units.SpecificWeightUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.SpecificWeight.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.SpecificWeight" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.SpecificWeight.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.SpecificWeight.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.BaseUnit">
            <summary>
                The base unit of SpecificWeight, which is NewtonPerCubicMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.MaxValue">
            <summary>
            Represents the largest possible value of SpecificWeight
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.MinValue">
            <summary>
            Represents the smallest possible value of SpecificWeight
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.SpecificWeight.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.Units">
            <summary>
                All units of measurement for the SpecificWeight quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit NewtonPerCubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.SpecificWeight.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.SpecificWeight.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.SpecificWeight.Type">
            <summary>
                The <see cref="P:UnitsNet.SpecificWeight.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.SpecificWeight.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.KilogramsForcePerCubicCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificWeightUnit.KilogramForcePerCubicCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.KilogramsForcePerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificWeightUnit.KilogramForcePerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.KilogramsForcePerCubicMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificWeightUnit.KilogramForcePerCubicMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.KilonewtonsPerCubicCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificWeightUnit.KilonewtonPerCubicCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.KilonewtonsPerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificWeightUnit.KilonewtonPerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.KilonewtonsPerCubicMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificWeightUnit.KilonewtonPerCubicMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.KilopoundsForcePerCubicFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificWeightUnit.KilopoundForcePerCubicFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.KilopoundsForcePerCubicInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificWeightUnit.KilopoundForcePerCubicInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.MeganewtonsPerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificWeightUnit.MeganewtonPerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.NewtonsPerCubicCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificWeightUnit.NewtonPerCubicCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.NewtonsPerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificWeightUnit.NewtonPerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.NewtonsPerCubicMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificWeightUnit.NewtonPerCubicMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.PoundsForcePerCubicFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificWeightUnit.PoundForcePerCubicFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.PoundsForcePerCubicInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificWeightUnit.PoundForcePerCubicInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.TonnesForcePerCubicCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificWeightUnit.TonneForcePerCubicCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.TonnesForcePerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificWeightUnit.TonneForcePerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.TonnesForcePerCubicMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificWeightUnit.TonneForcePerCubicMillimeter"/>
            </summary>
        </member>
        <member name="M:UnitsNet.SpecificWeight.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.SpecificWeight.GetAbbreviation(UnitsNet.Units.SpecificWeightUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.SpecificWeight.GetAbbreviation(UnitsNet.Units.SpecificWeightUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromKilogramsForcePerCubicCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificWeight"/> from <see cref="F:UnitsNet.Units.SpecificWeightUnit.KilogramForcePerCubicCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromKilogramsForcePerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificWeight"/> from <see cref="F:UnitsNet.Units.SpecificWeightUnit.KilogramForcePerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromKilogramsForcePerCubicMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificWeight"/> from <see cref="F:UnitsNet.Units.SpecificWeightUnit.KilogramForcePerCubicMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromKilonewtonsPerCubicCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificWeight"/> from <see cref="F:UnitsNet.Units.SpecificWeightUnit.KilonewtonPerCubicCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromKilonewtonsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificWeight"/> from <see cref="F:UnitsNet.Units.SpecificWeightUnit.KilonewtonPerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromKilonewtonsPerCubicMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificWeight"/> from <see cref="F:UnitsNet.Units.SpecificWeightUnit.KilonewtonPerCubicMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromKilopoundsForcePerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificWeight"/> from <see cref="F:UnitsNet.Units.SpecificWeightUnit.KilopoundForcePerCubicFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromKilopoundsForcePerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificWeight"/> from <see cref="F:UnitsNet.Units.SpecificWeightUnit.KilopoundForcePerCubicInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromMeganewtonsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificWeight"/> from <see cref="F:UnitsNet.Units.SpecificWeightUnit.MeganewtonPerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromNewtonsPerCubicCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificWeight"/> from <see cref="F:UnitsNet.Units.SpecificWeightUnit.NewtonPerCubicCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromNewtonsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificWeight"/> from <see cref="F:UnitsNet.Units.SpecificWeightUnit.NewtonPerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromNewtonsPerCubicMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificWeight"/> from <see cref="F:UnitsNet.Units.SpecificWeightUnit.NewtonPerCubicMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromPoundsForcePerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificWeight"/> from <see cref="F:UnitsNet.Units.SpecificWeightUnit.PoundForcePerCubicFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromPoundsForcePerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificWeight"/> from <see cref="F:UnitsNet.Units.SpecificWeightUnit.PoundForcePerCubicInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromTonnesForcePerCubicCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificWeight"/> from <see cref="F:UnitsNet.Units.SpecificWeightUnit.TonneForcePerCubicCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromTonnesForcePerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificWeight"/> from <see cref="F:UnitsNet.Units.SpecificWeightUnit.TonneForcePerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromTonnesForcePerCubicMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificWeight"/> from <see cref="F:UnitsNet.Units.SpecificWeightUnit.TonneForcePerCubicMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.From(UnitsNet.QuantityValue,UnitsNet.Units.SpecificWeightUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.SpecificWeightUnit" /> to <see cref="T:UnitsNet.SpecificWeight" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>SpecificWeight unit value.</returns>
        </member>
        <member name="M:UnitsNet.SpecificWeight.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificWeight.TryParse(System.String,UnitsNet.SpecificWeight@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SpecificWeight.TryParse(System.String,System.IFormatProvider,UnitsNet.SpecificWeight@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificWeight.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.TryParseUnit(System.String,UnitsNet.Units.SpecificWeightUnit@)">
            <inheritdoc cref="M:UnitsNet.SpecificWeight.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.SpecificWeightUnit@)"/>
        </member>
        <member name="M:UnitsNet.SpecificWeight.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.SpecificWeightUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificWeight.op_UnaryNegation(UnitsNet.SpecificWeight)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.SpecificWeight.op_Addition(UnitsNet.SpecificWeight,UnitsNet.SpecificWeight)">
            <summary>Get <see cref="T:UnitsNet.SpecificWeight"/> from adding two <see cref="T:UnitsNet.SpecificWeight"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificWeight.op_Subtraction(UnitsNet.SpecificWeight,UnitsNet.SpecificWeight)">
            <summary>Get <see cref="T:UnitsNet.SpecificWeight"/> from subtracting two <see cref="T:UnitsNet.SpecificWeight"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificWeight.op_Multiply(System.Double,UnitsNet.SpecificWeight)">
            <summary>Get <see cref="T:UnitsNet.SpecificWeight"/> from multiplying value and <see cref="T:UnitsNet.SpecificWeight"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificWeight.op_Multiply(UnitsNet.SpecificWeight,System.Double)">
            <summary>Get <see cref="T:UnitsNet.SpecificWeight"/> from multiplying value and <see cref="T:UnitsNet.SpecificWeight"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificWeight.op_Division(UnitsNet.SpecificWeight,System.Double)">
            <summary>Get <see cref="T:UnitsNet.SpecificWeight"/> from dividing <see cref="T:UnitsNet.SpecificWeight"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.SpecificWeight.op_Division(UnitsNet.SpecificWeight,UnitsNet.SpecificWeight)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.SpecificWeight"/> by <see cref="T:UnitsNet.SpecificWeight"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificWeight.op_LessThanOrEqual(UnitsNet.SpecificWeight,UnitsNet.SpecificWeight)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.SpecificWeight.op_GreaterThanOrEqual(UnitsNet.SpecificWeight,UnitsNet.SpecificWeight)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.SpecificWeight.op_LessThan(UnitsNet.SpecificWeight,UnitsNet.SpecificWeight)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.SpecificWeight.op_GreaterThan(UnitsNet.SpecificWeight,UnitsNet.SpecificWeight)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.SpecificWeight.op_Equality(UnitsNet.SpecificWeight,UnitsNet.SpecificWeight)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.SpecificWeight.Equals(UnitsNet.SpecificWeight,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.SpecificWeight.op_Inequality(UnitsNet.SpecificWeight,UnitsNet.SpecificWeight)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.SpecificWeight.Equals(UnitsNet.SpecificWeight,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.SpecificWeight.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificWeight.CompareTo(UnitsNet.SpecificWeight)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificWeight.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.SpecificWeight.Equals(UnitsNet.SpecificWeight,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.SpecificWeight.Equals(UnitsNet.SpecificWeight)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.SpecificWeight.Equals(UnitsNet.SpecificWeight,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.SpecificWeight.Equals(UnitsNet.SpecificWeight,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another SpecificWeight within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.SpecificWeight.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current SpecificWeight.</returns>
        </member>
        <member name="M:UnitsNet.SpecificWeight.As(UnitsNet.Units.SpecificWeightUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.SpecificWeight.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.SpecificWeight.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificWeight.ToUnit(UnitsNet.Units.SpecificWeightUnit)">
            <summary>
                Converts this SpecificWeight to another SpecificWeight with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A SpecificWeight with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.SpecificWeight.ToUnit(UnitsNet.Units.SpecificWeightUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this SpecificWeight to another SpecificWeight using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A SpecificWeight with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.SpecificWeight.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificWeight.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.SpecificWeight.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificWeight.UnitsNet#IQuantity{UnitsNet#Units#SpecificWeightUnit}#ToUnit(UnitsNet.Units.SpecificWeightUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificWeight.UnitsNet#IQuantity{UnitsNet#Units#SpecificWeightUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificWeight.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.SpecificWeight.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificWeight.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificWeight.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificWeight.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.SpecificWeight.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Speed">
            <inheritdoc />
            <summary>
                In everyday use and in kinematics, the speed of an object is the magnitude of its velocity (the rate of change of its position); it is thus a scalar quantity.[1] The average speed of an object in an interval of time is the distance travelled by the object divided by the duration of the interval;[2] the instantaneous speed is the limit of the average speed as the duration of the time interval approaches zero.
            </summary>
        </member>
        <member name="M:UnitsNet.Speed.op_Division(UnitsNet.Speed,System.TimeSpan)">
            <summary>Get <see cref="T:UnitsNet.Acceleration"/> from <see cref="T:UnitsNet.Speed"/> divided by <see cref="T:System.TimeSpan"/>.</summary>
        </member>
        <member name="M:UnitsNet.Speed.op_Multiply(UnitsNet.Speed,System.TimeSpan)">
            <summary>Get <see cref="T:UnitsNet.Length"/> from <see cref="T:UnitsNet.Speed"/> times <see cref="T:System.TimeSpan"/>.</summary>
        </member>
        <member name="M:UnitsNet.Speed.op_Multiply(System.TimeSpan,UnitsNet.Speed)">
            <summary>Get <see cref="T:UnitsNet.Length"/> from <see cref="T:System.TimeSpan"/> times <see cref="T:UnitsNet.Speed"/>.</summary>
        </member>
        <member name="M:UnitsNet.Speed.op_Division(UnitsNet.Speed,UnitsNet.Duration)">
            <summary>Get <see cref="T:UnitsNet.Acceleration"/> from <see cref="T:UnitsNet.Speed"/> divided by <see cref="T:UnitsNet.Duration"/>.</summary>
        </member>
        <member name="M:UnitsNet.Speed.op_Multiply(UnitsNet.Speed,UnitsNet.Duration)">
            <summary>Get <see cref="T:UnitsNet.Length"/> from <see cref="T:UnitsNet.Speed"/> times <see cref="T:UnitsNet.Duration"/>.</summary>
        </member>
        <member name="M:UnitsNet.Speed.op_Multiply(UnitsNet.Duration,UnitsNet.Speed)">
            <summary>Get <see cref="T:UnitsNet.Length"/> from <see cref="T:UnitsNet.Duration"/> times <see cref="T:UnitsNet.Speed"/>.</summary>
        </member>
        <member name="M:UnitsNet.Speed.op_Multiply(UnitsNet.Speed,UnitsNet.Length)">
            <summary>Get <see cref="T:UnitsNet.KinematicViscosity"/> from <see cref="T:UnitsNet.Speed"/> times <see cref="T:UnitsNet.Length"/>.</summary>
        </member>
        <member name="M:UnitsNet.Speed.op_Multiply(UnitsNet.Speed,UnitsNet.Speed)">
            <summary>Get <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="T:UnitsNet.Speed"/> times <see cref="T:UnitsNet.Speed"/>.</summary>
        </member>
        <member name="M:UnitsNet.Speed.op_Multiply(UnitsNet.Speed,UnitsNet.Density)">
            <summary>Get <see cref="T:UnitsNet.MassFlux"/> from <see cref="T:UnitsNet.Speed"/> times <see cref="T:UnitsNet.Density"/>.</summary>
        </member>
        <member name="M:UnitsNet.Speed.op_Multiply(UnitsNet.Speed,UnitsNet.Area)">
            <summary>Get <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="T:UnitsNet.Speed"/> times <see cref="T:UnitsNet.Area"/>.</summary>
        </member>
        <member name="F:UnitsNet.Speed._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Speed._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Speed.#ctor(System.Double,UnitsNet.Units.SpeedUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Speed.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Speed" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Speed.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Speed.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.BaseUnit">
            <summary>
                The base unit of Speed, which is MeterPerSecond. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.MaxValue">
            <summary>
            Represents the largest possible value of Speed
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.MinValue">
            <summary>
            Represents the smallest possible value of Speed
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Speed.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.Units">
            <summary>
                All units of measurement for the Speed quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit MeterPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Speed.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Speed.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Speed.Type">
            <summary>
                The <see cref="P:UnitsNet.Speed.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Speed.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.CentimetersPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.CentimeterPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.CentimetersPerMinutes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.CentimeterPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.CentimetersPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.CentimeterPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.DecimetersPerMinutes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.DecimeterPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.DecimetersPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.DecimeterPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.FeetPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.FootPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.FeetPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.FootPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.FeetPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.FootPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.InchesPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.InchPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.InchesPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.InchPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.InchesPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.InchPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.KilometersPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.KilometerPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.KilometersPerMinutes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.KilometerPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.KilometersPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.KilometerPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.Knots">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.Knot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.MetersPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.MeterPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.MetersPerMinutes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.MeterPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.MetersPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.MeterPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.MicrometersPerMinutes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.MicrometerPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.MicrometersPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.MicrometerPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.MilesPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.MilePerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.MillimetersPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.MillimeterPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.MillimetersPerMinutes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.MillimeterPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.MillimetersPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.MillimeterPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.NanometersPerMinutes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.NanometerPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.NanometersPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.NanometerPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.UsSurveyFeetPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.UsSurveyFootPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.UsSurveyFeetPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.UsSurveyFootPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.UsSurveyFeetPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.UsSurveyFootPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.YardsPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.YardPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.YardsPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.YardPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.YardsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpeedUnit.YardPerSecond"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Speed.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Speed.GetAbbreviation(UnitsNet.Units.SpeedUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Speed.GetAbbreviation(UnitsNet.Units.SpeedUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Speed.FromCentimetersPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.CentimeterPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromCentimetersPerMinutes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.CentimeterPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromCentimetersPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.CentimeterPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromDecimetersPerMinutes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.DecimeterPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromDecimetersPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.DecimeterPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromFeetPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.FootPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromFeetPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.FootPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromFeetPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.FootPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromInchesPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.InchPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromInchesPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.InchPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromInchesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.InchPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromKilometersPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.KilometerPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromKilometersPerMinutes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.KilometerPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromKilometersPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.KilometerPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromKnots(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.Knot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromMetersPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.MeterPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromMetersPerMinutes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.MeterPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromMetersPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.MeterPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromMicrometersPerMinutes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.MicrometerPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromMicrometersPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.MicrometerPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromMilesPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.MilePerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromMillimetersPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.MillimeterPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromMillimetersPerMinutes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.MillimeterPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromMillimetersPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.MillimeterPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromNanometersPerMinutes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.NanometerPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromNanometersPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.NanometerPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromUsSurveyFeetPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.UsSurveyFootPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromUsSurveyFeetPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.UsSurveyFootPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromUsSurveyFeetPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.UsSurveyFootPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromYardsPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.YardPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromYardsPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.YardPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromYardsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Speed"/> from <see cref="F:UnitsNet.Units.SpeedUnit.YardPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.From(UnitsNet.QuantityValue,UnitsNet.Units.SpeedUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.SpeedUnit" /> to <see cref="T:UnitsNet.Speed" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Speed unit value.</returns>
        </member>
        <member name="M:UnitsNet.Speed.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Speed.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Speed.TryParse(System.String,UnitsNet.Speed@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Speed.TryParse(System.String,System.IFormatProvider,UnitsNet.Speed@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Speed.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Speed.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Speed.TryParseUnit(System.String,UnitsNet.Units.SpeedUnit@)">
            <inheritdoc cref="M:UnitsNet.Speed.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.SpeedUnit@)"/>
        </member>
        <member name="M:UnitsNet.Speed.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.SpeedUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Speed.op_UnaryNegation(UnitsNet.Speed)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Speed.op_Addition(UnitsNet.Speed,UnitsNet.Speed)">
            <summary>Get <see cref="T:UnitsNet.Speed"/> from adding two <see cref="T:UnitsNet.Speed"/>.</summary>
        </member>
        <member name="M:UnitsNet.Speed.op_Subtraction(UnitsNet.Speed,UnitsNet.Speed)">
            <summary>Get <see cref="T:UnitsNet.Speed"/> from subtracting two <see cref="T:UnitsNet.Speed"/>.</summary>
        </member>
        <member name="M:UnitsNet.Speed.op_Multiply(System.Double,UnitsNet.Speed)">
            <summary>Get <see cref="T:UnitsNet.Speed"/> from multiplying value and <see cref="T:UnitsNet.Speed"/>.</summary>
        </member>
        <member name="M:UnitsNet.Speed.op_Multiply(UnitsNet.Speed,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Speed"/> from multiplying value and <see cref="T:UnitsNet.Speed"/>.</summary>
        </member>
        <member name="M:UnitsNet.Speed.op_Division(UnitsNet.Speed,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Speed"/> from dividing <see cref="T:UnitsNet.Speed"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Speed.op_Division(UnitsNet.Speed,UnitsNet.Speed)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Speed"/> by <see cref="T:UnitsNet.Speed"/>.</summary>
        </member>
        <member name="M:UnitsNet.Speed.op_LessThanOrEqual(UnitsNet.Speed,UnitsNet.Speed)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Speed.op_GreaterThanOrEqual(UnitsNet.Speed,UnitsNet.Speed)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Speed.op_LessThan(UnitsNet.Speed,UnitsNet.Speed)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Speed.op_GreaterThan(UnitsNet.Speed,UnitsNet.Speed)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Speed.op_Equality(UnitsNet.Speed,UnitsNet.Speed)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Speed.Equals(UnitsNet.Speed,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Speed.op_Inequality(UnitsNet.Speed,UnitsNet.Speed)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Speed.Equals(UnitsNet.Speed,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Speed.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Speed.CompareTo(UnitsNet.Speed)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Speed.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Speed.Equals(UnitsNet.Speed,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Speed.Equals(UnitsNet.Speed)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Speed.Equals(UnitsNet.Speed,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Speed.Equals(UnitsNet.Speed,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Speed within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Speed.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Speed.</returns>
        </member>
        <member name="M:UnitsNet.Speed.As(UnitsNet.Units.SpeedUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Speed.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Speed.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Speed.ToUnit(UnitsNet.Units.SpeedUnit)">
            <summary>
                Converts this Speed to another Speed with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Speed with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Speed.ToUnit(UnitsNet.Units.SpeedUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Speed to another Speed using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Speed with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Speed.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Speed.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Speed.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Speed.UnitsNet#IQuantity{UnitsNet#Units#SpeedUnit}#ToUnit(UnitsNet.Units.SpeedUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Speed.UnitsNet#IQuantity{UnitsNet#Units#SpeedUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Speed.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Speed.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Speed.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Speed.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Speed.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Speed.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Temperature">
            <inheritdoc />
            <summary>
                A temperature is a numerical measure of hot or cold. Its measurement is by detection of heat radiation or particle velocity or kinetic energy, or by the bulk behavior of a thermometric material. It may be calibrated in any of various temperature scales, Celsius, Fahrenheit, Kelvin, etc. The fundamental physical definition of temperature is provided by thermodynamics.
            </summary>
        </member>
        <member name="M:UnitsNet.Temperature.op_Addition(UnitsNet.Temperature,UnitsNet.TemperatureDelta)">
            <summary>
                Add a <see cref="T:UnitsNet.Temperature" /> and a <see cref="T:UnitsNet.TemperatureDelta" />.
            </summary>
            <remarks>Due to temperature units having different scales, the arithmetic must be performed on the same scale.</remarks>
            <returns>The new temperature.</returns>
        </member>
        <member name="M:UnitsNet.Temperature.op_Addition(UnitsNet.TemperatureDelta,UnitsNet.Temperature)">
            <summary>
                Add a <see cref="T:UnitsNet.TemperatureDelta" /> and a <see cref="T:UnitsNet.Temperature" />.
            </summary>
            <remarks>Due to temperature units having different scales, the arithmetic must be performed on the same scale.</remarks>
            <returns>The new temperature.</returns>
        </member>
        <member name="M:UnitsNet.Temperature.op_Subtraction(UnitsNet.Temperature,UnitsNet.TemperatureDelta)">
            <summary>
                Subtract a <see cref="T:UnitsNet.Temperature" /> by a <see cref="T:UnitsNet.TemperatureDelta" />.
            </summary>
            <remarks>Due to temperature units having different scales, the arithmetic must be performed on the same scale.</remarks>
            <returns>The new temperature.</returns>
        </member>
        <member name="M:UnitsNet.Temperature.op_Subtraction(UnitsNet.Temperature,UnitsNet.Temperature)">
            <summary>
                Subtract a <see cref="T:UnitsNet.Temperature" /> by a <see cref="T:UnitsNet.TemperatureDelta" />.
            </summary>
            <remarks>Due to temperature units having different scales, the arithmetic must be performed on the same scale.</remarks>
            <returns>The delta temperature (difference).</returns>
        </member>
        <member name="M:UnitsNet.Temperature.Multiply(System.Double,UnitsNet.Units.TemperatureUnit)">
            <summary>
                Multiply temperature with a <paramref name="factor" /> in a given <paramref name="unit" />.
            </summary>
            <remarks>
                Due to different temperature units having different zero points, we cannot simply
                multiply or divide a temperature by a factor. We must first convert to the desired unit, then perform the
                calculation.
            </remarks>
            <param name="factor">Factor to multiply by.</param>
            <param name="unit">Unit to perform multiplication in.</param>
            <returns>The resulting <see cref="T:UnitsNet.Temperature" />.</returns>
        </member>
        <member name="M:UnitsNet.Temperature.Divide(System.Double,UnitsNet.Units.TemperatureUnit)">
            <summary>
                Divide temperature by a <paramref name="divisor" /> in a given <paramref name="unit" />.
            </summary>
            <remarks>
                Due to different temperature units having different zero points, we cannot simply
                multiply or divide a temperature by a factor. We must first convert to the desired unit, then perform the
                calculation.
            </remarks>
            <param name="divisor">Factor to multiply by.</param>
            <param name="unit">Unit to perform multiplication in.</param>
            <returns>The resulting <see cref="T:UnitsNet.Temperature" />.</returns>
        </member>
        <member name="F:UnitsNet.Temperature._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Temperature._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Temperature.#ctor(System.Double,UnitsNet.Units.TemperatureUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Temperature.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Temperature.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Temperature" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Temperature.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Temperature.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.BaseUnit">
            <summary>
                The base unit of Temperature, which is Kelvin. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.MaxValue">
            <summary>
            Represents the largest possible value of Temperature
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.MinValue">
            <summary>
            Represents the smallest possible value of Temperature
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Temperature.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.Units">
            <summary>
                All units of measurement for the Temperature quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Kelvin.
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Temperature.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Temperature.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Temperature.Type">
            <summary>
                The <see cref="P:UnitsNet.Temperature.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Temperature.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.DegreesCelsius">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureUnit.DegreeCelsius"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.DegreesDelisle">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureUnit.DegreeDelisle"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.DegreesFahrenheit">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureUnit.DegreeFahrenheit"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.DegreesNewton">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureUnit.DegreeNewton"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.DegreesRankine">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureUnit.DegreeRankine"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.DegreesReaumur">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureUnit.DegreeReaumur"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.DegreesRoemer">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureUnit.DegreeRoemer"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.Kelvins">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureUnit.Kelvin"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.MillidegreesCelsius">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureUnit.MillidegreeCelsius"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.SolarTemperatures">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureUnit.SolarTemperature"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Temperature.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Temperature.GetAbbreviation(UnitsNet.Units.TemperatureUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Temperature.GetAbbreviation(UnitsNet.Units.TemperatureUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Temperature.FromDegreesCelsius(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Temperature"/> from <see cref="F:UnitsNet.Units.TemperatureUnit.DegreeCelsius"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Temperature.FromDegreesDelisle(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Temperature"/> from <see cref="F:UnitsNet.Units.TemperatureUnit.DegreeDelisle"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Temperature.FromDegreesFahrenheit(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Temperature"/> from <see cref="F:UnitsNet.Units.TemperatureUnit.DegreeFahrenheit"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Temperature.FromDegreesNewton(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Temperature"/> from <see cref="F:UnitsNet.Units.TemperatureUnit.DegreeNewton"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Temperature.FromDegreesRankine(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Temperature"/> from <see cref="F:UnitsNet.Units.TemperatureUnit.DegreeRankine"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Temperature.FromDegreesReaumur(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Temperature"/> from <see cref="F:UnitsNet.Units.TemperatureUnit.DegreeReaumur"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Temperature.FromDegreesRoemer(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Temperature"/> from <see cref="F:UnitsNet.Units.TemperatureUnit.DegreeRoemer"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Temperature.FromKelvins(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Temperature"/> from <see cref="F:UnitsNet.Units.TemperatureUnit.Kelvin"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Temperature.FromMillidegreesCelsius(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Temperature"/> from <see cref="F:UnitsNet.Units.TemperatureUnit.MillidegreeCelsius"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Temperature.FromSolarTemperatures(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Temperature"/> from <see cref="F:UnitsNet.Units.TemperatureUnit.SolarTemperature"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Temperature.From(UnitsNet.QuantityValue,UnitsNet.Units.TemperatureUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.TemperatureUnit" /> to <see cref="T:UnitsNet.Temperature" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Temperature unit value.</returns>
        </member>
        <member name="M:UnitsNet.Temperature.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Temperature.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Temperature.TryParse(System.String,UnitsNet.Temperature@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Temperature.TryParse(System.String,System.IFormatProvider,UnitsNet.Temperature@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Temperature.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Temperature.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Temperature.TryParseUnit(System.String,UnitsNet.Units.TemperatureUnit@)">
            <inheritdoc cref="M:UnitsNet.Temperature.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.TemperatureUnit@)"/>
        </member>
        <member name="M:UnitsNet.Temperature.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.TemperatureUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Temperature.op_LessThanOrEqual(UnitsNet.Temperature,UnitsNet.Temperature)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Temperature.op_GreaterThanOrEqual(UnitsNet.Temperature,UnitsNet.Temperature)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Temperature.op_LessThan(UnitsNet.Temperature,UnitsNet.Temperature)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Temperature.op_GreaterThan(UnitsNet.Temperature,UnitsNet.Temperature)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Temperature.op_Equality(UnitsNet.Temperature,UnitsNet.Temperature)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Temperature.Equals(UnitsNet.Temperature,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Temperature.op_Inequality(UnitsNet.Temperature,UnitsNet.Temperature)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Temperature.Equals(UnitsNet.Temperature,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Temperature.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Temperature.CompareTo(UnitsNet.Temperature)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Temperature.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Temperature.Equals(UnitsNet.Temperature,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Temperature.Equals(UnitsNet.Temperature)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Temperature.Equals(UnitsNet.Temperature,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Temperature.Equals(UnitsNet.Temperature,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Temperature within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Temperature.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Temperature.</returns>
        </member>
        <member name="M:UnitsNet.Temperature.As(UnitsNet.Units.TemperatureUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Temperature.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Temperature.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Temperature.ToUnit(UnitsNet.Units.TemperatureUnit)">
            <summary>
                Converts this Temperature to another Temperature with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Temperature with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Temperature.ToUnit(UnitsNet.Units.TemperatureUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Temperature to another Temperature using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Temperature with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Temperature.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Temperature.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Temperature.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Temperature.UnitsNet#IQuantity{UnitsNet#Units#TemperatureUnit}#ToUnit(UnitsNet.Units.TemperatureUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Temperature.UnitsNet#IQuantity{UnitsNet#Units#TemperatureUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Temperature.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Temperature.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Temperature.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Temperature.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Temperature.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Temperature.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.TemperatureDelta">
            <inheritdoc />
            <summary>
                Difference between two temperatures. The conversions are different than for Temperature.
            </summary>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.op_Division(UnitsNet.TemperatureDelta,UnitsNet.Length)">
            <summary>Get <see cref="T:UnitsNet.TemperatureGradient"/> from <see cref="T:UnitsNet.TemperatureDelta"/> divided by <see cref="T:UnitsNet.Length"/>.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.op_Multiply(UnitsNet.SpecificEntropy,UnitsNet.TemperatureDelta)">
            <summary>Get <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="T:UnitsNet.SpecificEntropy"/> times <see cref="T:UnitsNet.TemperatureDelta"/>.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.op_Multiply(UnitsNet.TemperatureDelta,UnitsNet.SpecificEntropy)">
            <summary>Get <see cref="T:UnitsNet.SpecificEnergy"/> from <see cref="T:UnitsNet.TemperatureDelta"/> times <see cref="T:UnitsNet.SpecificEntropy"/>.</summary>
        </member>
        <member name="F:UnitsNet.TemperatureDelta._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.TemperatureDelta._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.#ctor(System.Double,UnitsNet.Units.TemperatureDeltaUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.TemperatureDelta" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.TemperatureDelta.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.BaseUnit">
            <summary>
                The base unit of TemperatureDelta, which is Kelvin. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.MaxValue">
            <summary>
            Represents the largest possible value of TemperatureDelta
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.MinValue">
            <summary>
            Represents the smallest possible value of TemperatureDelta
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.TemperatureDelta.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.Units">
            <summary>
                All units of measurement for the TemperatureDelta quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Kelvin.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.TemperatureDelta.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.TemperatureDelta.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.Type">
            <summary>
                The <see cref="P:UnitsNet.TemperatureDelta.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.TemperatureDelta.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.DegreesCelsius">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureDeltaUnit.DegreeCelsius"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.DegreesDelisle">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureDeltaUnit.DegreeDelisle"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.DegreesFahrenheit">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureDeltaUnit.DegreeFahrenheit"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.DegreesNewton">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureDeltaUnit.DegreeNewton"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.DegreesRankine">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureDeltaUnit.DegreeRankine"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.DegreesReaumur">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureDeltaUnit.DegreeReaumur"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.DegreesRoemer">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureDeltaUnit.DegreeRoemer"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.Kelvins">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureDeltaUnit.Kelvin"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.MillidegreesCelsius">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureDeltaUnit.MillidegreeCelsius"/>
            </summary>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.GetAbbreviation(UnitsNet.Units.TemperatureDeltaUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.GetAbbreviation(UnitsNet.Units.TemperatureDeltaUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.FromDegreesCelsius(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TemperatureDelta"/> from <see cref="F:UnitsNet.Units.TemperatureDeltaUnit.DegreeCelsius"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.FromDegreesDelisle(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TemperatureDelta"/> from <see cref="F:UnitsNet.Units.TemperatureDeltaUnit.DegreeDelisle"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.FromDegreesFahrenheit(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TemperatureDelta"/> from <see cref="F:UnitsNet.Units.TemperatureDeltaUnit.DegreeFahrenheit"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.FromDegreesNewton(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TemperatureDelta"/> from <see cref="F:UnitsNet.Units.TemperatureDeltaUnit.DegreeNewton"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.FromDegreesRankine(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TemperatureDelta"/> from <see cref="F:UnitsNet.Units.TemperatureDeltaUnit.DegreeRankine"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.FromDegreesReaumur(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TemperatureDelta"/> from <see cref="F:UnitsNet.Units.TemperatureDeltaUnit.DegreeReaumur"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.FromDegreesRoemer(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TemperatureDelta"/> from <see cref="F:UnitsNet.Units.TemperatureDeltaUnit.DegreeRoemer"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.FromKelvins(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TemperatureDelta"/> from <see cref="F:UnitsNet.Units.TemperatureDeltaUnit.Kelvin"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.FromMillidegreesCelsius(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TemperatureDelta"/> from <see cref="F:UnitsNet.Units.TemperatureDeltaUnit.MillidegreeCelsius"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.From(UnitsNet.QuantityValue,UnitsNet.Units.TemperatureDeltaUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.TemperatureDeltaUnit" /> to <see cref="T:UnitsNet.TemperatureDelta" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>TemperatureDelta unit value.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.TryParse(System.String,UnitsNet.TemperatureDelta@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.TryParse(System.String,System.IFormatProvider,UnitsNet.TemperatureDelta@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.TryParseUnit(System.String,UnitsNet.Units.TemperatureDeltaUnit@)">
            <inheritdoc cref="M:UnitsNet.TemperatureDelta.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.TemperatureDeltaUnit@)"/>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.TemperatureDeltaUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.op_UnaryNegation(UnitsNet.TemperatureDelta)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.op_Addition(UnitsNet.TemperatureDelta,UnitsNet.TemperatureDelta)">
            <summary>Get <see cref="T:UnitsNet.TemperatureDelta"/> from adding two <see cref="T:UnitsNet.TemperatureDelta"/>.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.op_Subtraction(UnitsNet.TemperatureDelta,UnitsNet.TemperatureDelta)">
            <summary>Get <see cref="T:UnitsNet.TemperatureDelta"/> from subtracting two <see cref="T:UnitsNet.TemperatureDelta"/>.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.op_Multiply(System.Double,UnitsNet.TemperatureDelta)">
            <summary>Get <see cref="T:UnitsNet.TemperatureDelta"/> from multiplying value and <see cref="T:UnitsNet.TemperatureDelta"/>.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.op_Multiply(UnitsNet.TemperatureDelta,System.Double)">
            <summary>Get <see cref="T:UnitsNet.TemperatureDelta"/> from multiplying value and <see cref="T:UnitsNet.TemperatureDelta"/>.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.op_Division(UnitsNet.TemperatureDelta,System.Double)">
            <summary>Get <see cref="T:UnitsNet.TemperatureDelta"/> from dividing <see cref="T:UnitsNet.TemperatureDelta"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.op_Division(UnitsNet.TemperatureDelta,UnitsNet.TemperatureDelta)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.TemperatureDelta"/> by <see cref="T:UnitsNet.TemperatureDelta"/>.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.op_LessThanOrEqual(UnitsNet.TemperatureDelta,UnitsNet.TemperatureDelta)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.op_GreaterThanOrEqual(UnitsNet.TemperatureDelta,UnitsNet.TemperatureDelta)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.op_LessThan(UnitsNet.TemperatureDelta,UnitsNet.TemperatureDelta)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.op_GreaterThan(UnitsNet.TemperatureDelta,UnitsNet.TemperatureDelta)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.op_Equality(UnitsNet.TemperatureDelta,UnitsNet.TemperatureDelta)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.TemperatureDelta.Equals(UnitsNet.TemperatureDelta,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.op_Inequality(UnitsNet.TemperatureDelta,UnitsNet.TemperatureDelta)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.TemperatureDelta.Equals(UnitsNet.TemperatureDelta,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.TemperatureDelta.CompareTo(UnitsNet.TemperatureDelta)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.TemperatureDelta.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.TemperatureDelta.Equals(UnitsNet.TemperatureDelta,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.Equals(UnitsNet.TemperatureDelta)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.TemperatureDelta.Equals(UnitsNet.TemperatureDelta,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.Equals(UnitsNet.TemperatureDelta,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another TemperatureDelta within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current TemperatureDelta.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.As(UnitsNet.Units.TemperatureDeltaUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.TemperatureDelta.ToUnit(UnitsNet.Units.TemperatureDeltaUnit)">
            <summary>
                Converts this TemperatureDelta to another TemperatureDelta with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A TemperatureDelta with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.ToUnit(UnitsNet.Units.TemperatureDeltaUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this TemperatureDelta to another TemperatureDelta using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A TemperatureDelta with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.TemperatureDelta.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.TemperatureDelta.UnitsNet#IQuantity{UnitsNet#Units#TemperatureDeltaUnit}#ToUnit(UnitsNet.Units.TemperatureDeltaUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.TemperatureDelta.UnitsNet#IQuantity{UnitsNet#Units#TemperatureDeltaUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.TemperatureDelta.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.TemperatureGradient">
            <inheritdoc />
            <summary>
                The rate of change of temperature with displacement in a given direction (as with increase of height)
            </summary>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.op_Division(UnitsNet.TemperatureDelta,UnitsNet.TemperatureGradient)">
            <summary>Get <see cref="T:UnitsNet.Length"/> from <see cref="T:UnitsNet.TemperatureDelta"/> divided by <see cref="T:UnitsNet.TemperatureGradient"/>.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.op_Multiply(UnitsNet.Length,UnitsNet.TemperatureGradient)">
            <summary>Get <see cref="T:UnitsNet.TemperatureDelta"/> from <see cref="T:UnitsNet.Length"/> times <see cref="T:UnitsNet.TemperatureGradient"/>.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.op_Multiply(UnitsNet.TemperatureGradient,UnitsNet.Length)">
            <summary>Get <see cref="T:UnitsNet.TemperatureDelta"/> from <see cref="T:UnitsNet.TemperatureGradient"/> times <see cref="T:UnitsNet.Length"/>.</summary>
        </member>
        <member name="F:UnitsNet.TemperatureGradient._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.TemperatureGradient._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.#ctor(System.Double,UnitsNet.Units.TemperatureGradientUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.TemperatureGradient.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.TemperatureGradient" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureGradient.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.TemperatureGradient.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.TemperatureGradient.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureGradient.BaseUnit">
            <summary>
                The base unit of TemperatureGradient, which is KelvinPerMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureGradient.MaxValue">
            <summary>
            Represents the largest possible value of TemperatureGradient
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureGradient.MinValue">
            <summary>
            Represents the smallest possible value of TemperatureGradient
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureGradient.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.TemperatureGradient.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureGradient.Units">
            <summary>
                All units of measurement for the TemperatureGradient quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureGradient.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit KelvinPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureGradient.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureGradient.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.TemperatureGradient.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.TemperatureGradient.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.TemperatureGradient.Type">
            <summary>
                The <see cref="P:UnitsNet.TemperatureGradient.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureGradient.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.TemperatureGradient.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureGradient.DegreesCelciusPerKilometer">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureGradientUnit.DegreeCelsiusPerKilometer"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureGradient.DegreesCelciusPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureGradientUnit.DegreeCelsiusPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureGradient.DegreesFahrenheitPerFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureGradientUnit.DegreeFahrenheitPerFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureGradient.KelvinsPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureGradientUnit.KelvinPerMeter"/>
            </summary>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.GetAbbreviation(UnitsNet.Units.TemperatureGradientUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.GetAbbreviation(UnitsNet.Units.TemperatureGradientUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.FromDegreesCelciusPerKilometer(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TemperatureGradient"/> from <see cref="F:UnitsNet.Units.TemperatureGradientUnit.DegreeCelsiusPerKilometer"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.FromDegreesCelciusPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TemperatureGradient"/> from <see cref="F:UnitsNet.Units.TemperatureGradientUnit.DegreeCelsiusPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.FromDegreesFahrenheitPerFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TemperatureGradient"/> from <see cref="F:UnitsNet.Units.TemperatureGradientUnit.DegreeFahrenheitPerFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.FromKelvinsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TemperatureGradient"/> from <see cref="F:UnitsNet.Units.TemperatureGradientUnit.KelvinPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.From(UnitsNet.QuantityValue,UnitsNet.Units.TemperatureGradientUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.TemperatureGradientUnit" /> to <see cref="T:UnitsNet.TemperatureGradient" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>TemperatureGradient unit value.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.TryParse(System.String,UnitsNet.TemperatureGradient@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.TryParse(System.String,System.IFormatProvider,UnitsNet.TemperatureGradient@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.TryParseUnit(System.String,UnitsNet.Units.TemperatureGradientUnit@)">
            <inheritdoc cref="M:UnitsNet.TemperatureGradient.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.TemperatureGradientUnit@)"/>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.TemperatureGradientUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.op_UnaryNegation(UnitsNet.TemperatureGradient)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.op_Addition(UnitsNet.TemperatureGradient,UnitsNet.TemperatureGradient)">
            <summary>Get <see cref="T:UnitsNet.TemperatureGradient"/> from adding two <see cref="T:UnitsNet.TemperatureGradient"/>.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.op_Subtraction(UnitsNet.TemperatureGradient,UnitsNet.TemperatureGradient)">
            <summary>Get <see cref="T:UnitsNet.TemperatureGradient"/> from subtracting two <see cref="T:UnitsNet.TemperatureGradient"/>.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.op_Multiply(System.Double,UnitsNet.TemperatureGradient)">
            <summary>Get <see cref="T:UnitsNet.TemperatureGradient"/> from multiplying value and <see cref="T:UnitsNet.TemperatureGradient"/>.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.op_Multiply(UnitsNet.TemperatureGradient,System.Double)">
            <summary>Get <see cref="T:UnitsNet.TemperatureGradient"/> from multiplying value and <see cref="T:UnitsNet.TemperatureGradient"/>.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.op_Division(UnitsNet.TemperatureGradient,System.Double)">
            <summary>Get <see cref="T:UnitsNet.TemperatureGradient"/> from dividing <see cref="T:UnitsNet.TemperatureGradient"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.op_Division(UnitsNet.TemperatureGradient,UnitsNet.TemperatureGradient)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.TemperatureGradient"/> by <see cref="T:UnitsNet.TemperatureGradient"/>.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.op_LessThanOrEqual(UnitsNet.TemperatureGradient,UnitsNet.TemperatureGradient)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.op_GreaterThanOrEqual(UnitsNet.TemperatureGradient,UnitsNet.TemperatureGradient)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.op_LessThan(UnitsNet.TemperatureGradient,UnitsNet.TemperatureGradient)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.op_GreaterThan(UnitsNet.TemperatureGradient,UnitsNet.TemperatureGradient)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.op_Equality(UnitsNet.TemperatureGradient,UnitsNet.TemperatureGradient)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.TemperatureGradient.Equals(UnitsNet.TemperatureGradient,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.op_Inequality(UnitsNet.TemperatureGradient,UnitsNet.TemperatureGradient)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.TemperatureGradient.Equals(UnitsNet.TemperatureGradient,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.TemperatureGradient.CompareTo(UnitsNet.TemperatureGradient)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.TemperatureGradient.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.TemperatureGradient.Equals(UnitsNet.TemperatureGradient,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.Equals(UnitsNet.TemperatureGradient)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.TemperatureGradient.Equals(UnitsNet.TemperatureGradient,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.Equals(UnitsNet.TemperatureGradient,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another TemperatureGradient within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current TemperatureGradient.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.As(UnitsNet.Units.TemperatureGradientUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.TemperatureGradient.ToUnit(UnitsNet.Units.TemperatureGradientUnit)">
            <summary>
                Converts this TemperatureGradient to another TemperatureGradient with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A TemperatureGradient with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.ToUnit(UnitsNet.Units.TemperatureGradientUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this TemperatureGradient to another TemperatureGradient using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A TemperatureGradient with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.TemperatureGradient.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.TemperatureGradient.UnitsNet#IQuantity{UnitsNet#Units#TemperatureGradientUnit}#ToUnit(UnitsNet.Units.TemperatureGradientUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.TemperatureGradient.UnitsNet#IQuantity{UnitsNet#Units#TemperatureGradientUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.TemperatureGradient.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureGradient.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Torque">
            <inheritdoc />
            <summary>
                Torque, moment or moment of force (see the terminology below), is the tendency of a force to rotate an object about an axis,[1] fulcrum, or pivot. Just as a force is a push or a pull, a torque can be thought of as a twist to an object. Mathematically, torque is defined as the cross product of the lever-arm distance and force, which tends to produce rotation. Loosely speaking, torque is a measure of the turning force on an object such as a bolt or a flywheel. For example, pushing or pulling the handle of a wrench connected to a nut or bolt produces a torque (turning force) that loosens or tightens the nut or bolt.
            </summary>
        </member>
        <member name="M:UnitsNet.Torque.op_Division(UnitsNet.Torque,UnitsNet.Length)">
            <summary>Get <see cref="T:UnitsNet.Force"/> from <see cref="T:UnitsNet.Torque"/> times <see cref="T:UnitsNet.Length"/>.</summary>
        </member>
        <member name="M:UnitsNet.Torque.op_Division(UnitsNet.Torque,UnitsNet.Force)">
            <summary>Get <see cref="T:UnitsNet.Length"/> from <see cref="T:UnitsNet.Torque"/> times <see cref="T:UnitsNet.Force"/>.</summary>
        </member>
        <member name="M:UnitsNet.Torque.op_Division(UnitsNet.Torque,UnitsNet.Angle)">
            <summary>Get <see cref="T:UnitsNet.RotationalStiffness"/> from <see cref="T:UnitsNet.Torque"/> times <see cref="T:UnitsNet.Angle"/>.</summary>
        </member>
        <member name="M:UnitsNet.Torque.op_Division(UnitsNet.Torque,UnitsNet.RotationalStiffness)">
            <summary>Get <see cref="T:UnitsNet.Angle"/> from <see cref="T:UnitsNet.Torque"/> times <see cref="T:UnitsNet.RotationalStiffness"/>.</summary>
        </member>
        <member name="F:UnitsNet.Torque._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Torque._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Torque.#ctor(System.Double,UnitsNet.Units.TorqueUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Torque.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Torque" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Torque.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Torque.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.BaseUnit">
            <summary>
                The base unit of Torque, which is NewtonMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.MaxValue">
            <summary>
            Represents the largest possible value of Torque
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.MinValue">
            <summary>
            Represents the smallest possible value of Torque
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Torque.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.Units">
            <summary>
                All units of measurement for the Torque quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit NewtonMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Torque.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Torque.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Torque.Type">
            <summary>
                The <see cref="P:UnitsNet.Torque.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Torque.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.GramForceCentimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorqueUnit.GramForceCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.GramForceMeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorqueUnit.GramForceMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.GramForceMillimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorqueUnit.GramForceMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.KilogramForceCentimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorqueUnit.KilogramForceCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.KilogramForceMeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorqueUnit.KilogramForceMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.KilogramForceMillimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorqueUnit.KilogramForceMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.KilonewtonCentimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorqueUnit.KilonewtonCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.KilonewtonMeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorqueUnit.KilonewtonMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.KilonewtonMillimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorqueUnit.KilonewtonMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.KilopoundForceFeet">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorqueUnit.KilopoundForceFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.KilopoundForceInches">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorqueUnit.KilopoundForceInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.MeganewtonCentimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorqueUnit.MeganewtonCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.MeganewtonMeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorqueUnit.MeganewtonMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.MeganewtonMillimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorqueUnit.MeganewtonMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.MegapoundForceFeet">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorqueUnit.MegapoundForceFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.MegapoundForceInches">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorqueUnit.MegapoundForceInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.NewtonCentimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorqueUnit.NewtonCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.NewtonMeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorqueUnit.NewtonMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.NewtonMillimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorqueUnit.NewtonMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.PoundalFeet">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorqueUnit.PoundalFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.PoundForceFeet">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorqueUnit.PoundForceFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.PoundForceInches">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorqueUnit.PoundForceInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.TonneForceCentimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorqueUnit.TonneForceCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.TonneForceMeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorqueUnit.TonneForceMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.TonneForceMillimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorqueUnit.TonneForceMillimeter"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Torque.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Torque.GetAbbreviation(UnitsNet.Units.TorqueUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Torque.GetAbbreviation(UnitsNet.Units.TorqueUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Torque.FromGramForceCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Torque"/> from <see cref="F:UnitsNet.Units.TorqueUnit.GramForceCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromGramForceMeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Torque"/> from <see cref="F:UnitsNet.Units.TorqueUnit.GramForceMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromGramForceMillimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Torque"/> from <see cref="F:UnitsNet.Units.TorqueUnit.GramForceMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromKilogramForceCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Torque"/> from <see cref="F:UnitsNet.Units.TorqueUnit.KilogramForceCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromKilogramForceMeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Torque"/> from <see cref="F:UnitsNet.Units.TorqueUnit.KilogramForceMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromKilogramForceMillimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Torque"/> from <see cref="F:UnitsNet.Units.TorqueUnit.KilogramForceMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromKilonewtonCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Torque"/> from <see cref="F:UnitsNet.Units.TorqueUnit.KilonewtonCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromKilonewtonMeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Torque"/> from <see cref="F:UnitsNet.Units.TorqueUnit.KilonewtonMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromKilonewtonMillimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Torque"/> from <see cref="F:UnitsNet.Units.TorqueUnit.KilonewtonMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromKilopoundForceFeet(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Torque"/> from <see cref="F:UnitsNet.Units.TorqueUnit.KilopoundForceFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromKilopoundForceInches(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Torque"/> from <see cref="F:UnitsNet.Units.TorqueUnit.KilopoundForceInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromMeganewtonCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Torque"/> from <see cref="F:UnitsNet.Units.TorqueUnit.MeganewtonCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromMeganewtonMeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Torque"/> from <see cref="F:UnitsNet.Units.TorqueUnit.MeganewtonMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromMeganewtonMillimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Torque"/> from <see cref="F:UnitsNet.Units.TorqueUnit.MeganewtonMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromMegapoundForceFeet(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Torque"/> from <see cref="F:UnitsNet.Units.TorqueUnit.MegapoundForceFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromMegapoundForceInches(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Torque"/> from <see cref="F:UnitsNet.Units.TorqueUnit.MegapoundForceInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromNewtonCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Torque"/> from <see cref="F:UnitsNet.Units.TorqueUnit.NewtonCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromNewtonMeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Torque"/> from <see cref="F:UnitsNet.Units.TorqueUnit.NewtonMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromNewtonMillimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Torque"/> from <see cref="F:UnitsNet.Units.TorqueUnit.NewtonMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromPoundalFeet(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Torque"/> from <see cref="F:UnitsNet.Units.TorqueUnit.PoundalFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromPoundForceFeet(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Torque"/> from <see cref="F:UnitsNet.Units.TorqueUnit.PoundForceFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromPoundForceInches(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Torque"/> from <see cref="F:UnitsNet.Units.TorqueUnit.PoundForceInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromTonneForceCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Torque"/> from <see cref="F:UnitsNet.Units.TorqueUnit.TonneForceCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromTonneForceMeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Torque"/> from <see cref="F:UnitsNet.Units.TorqueUnit.TonneForceMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromTonneForceMillimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Torque"/> from <see cref="F:UnitsNet.Units.TorqueUnit.TonneForceMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.From(UnitsNet.QuantityValue,UnitsNet.Units.TorqueUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.TorqueUnit" /> to <see cref="T:UnitsNet.Torque" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Torque unit value.</returns>
        </member>
        <member name="M:UnitsNet.Torque.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Torque.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Torque.TryParse(System.String,UnitsNet.Torque@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Torque.TryParse(System.String,System.IFormatProvider,UnitsNet.Torque@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Torque.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Torque.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Torque.TryParseUnit(System.String,UnitsNet.Units.TorqueUnit@)">
            <inheritdoc cref="M:UnitsNet.Torque.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.TorqueUnit@)"/>
        </member>
        <member name="M:UnitsNet.Torque.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.TorqueUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Torque.op_UnaryNegation(UnitsNet.Torque)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Torque.op_Addition(UnitsNet.Torque,UnitsNet.Torque)">
            <summary>Get <see cref="T:UnitsNet.Torque"/> from adding two <see cref="T:UnitsNet.Torque"/>.</summary>
        </member>
        <member name="M:UnitsNet.Torque.op_Subtraction(UnitsNet.Torque,UnitsNet.Torque)">
            <summary>Get <see cref="T:UnitsNet.Torque"/> from subtracting two <see cref="T:UnitsNet.Torque"/>.</summary>
        </member>
        <member name="M:UnitsNet.Torque.op_Multiply(System.Double,UnitsNet.Torque)">
            <summary>Get <see cref="T:UnitsNet.Torque"/> from multiplying value and <see cref="T:UnitsNet.Torque"/>.</summary>
        </member>
        <member name="M:UnitsNet.Torque.op_Multiply(UnitsNet.Torque,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Torque"/> from multiplying value and <see cref="T:UnitsNet.Torque"/>.</summary>
        </member>
        <member name="M:UnitsNet.Torque.op_Division(UnitsNet.Torque,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Torque"/> from dividing <see cref="T:UnitsNet.Torque"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Torque.op_Division(UnitsNet.Torque,UnitsNet.Torque)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Torque"/> by <see cref="T:UnitsNet.Torque"/>.</summary>
        </member>
        <member name="M:UnitsNet.Torque.op_LessThanOrEqual(UnitsNet.Torque,UnitsNet.Torque)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Torque.op_GreaterThanOrEqual(UnitsNet.Torque,UnitsNet.Torque)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Torque.op_LessThan(UnitsNet.Torque,UnitsNet.Torque)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Torque.op_GreaterThan(UnitsNet.Torque,UnitsNet.Torque)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Torque.op_Equality(UnitsNet.Torque,UnitsNet.Torque)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Torque.Equals(UnitsNet.Torque,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Torque.op_Inequality(UnitsNet.Torque,UnitsNet.Torque)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Torque.Equals(UnitsNet.Torque,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Torque.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Torque.CompareTo(UnitsNet.Torque)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Torque.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Torque.Equals(UnitsNet.Torque,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Torque.Equals(UnitsNet.Torque)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Torque.Equals(UnitsNet.Torque,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Torque.Equals(UnitsNet.Torque,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Torque within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Torque.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Torque.</returns>
        </member>
        <member name="M:UnitsNet.Torque.As(UnitsNet.Units.TorqueUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Torque.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Torque.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Torque.ToUnit(UnitsNet.Units.TorqueUnit)">
            <summary>
                Converts this Torque to another Torque with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Torque with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Torque.ToUnit(UnitsNet.Units.TorqueUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Torque to another Torque using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Torque with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Torque.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Torque.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Torque.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Torque.UnitsNet#IQuantity{UnitsNet#Units#TorqueUnit}#ToUnit(UnitsNet.Units.TorqueUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Torque.UnitsNet#IQuantity{UnitsNet#Units#TorqueUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Torque.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Torque.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Torque.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Torque.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Torque.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Torque.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Volume">
            <inheritdoc />
            <summary>
                Volume is the quantity of three-dimensional space enclosed by some closed boundary, for example, the space that a substance (solid, liquid, gas, or plasma) or shape occupies or contains.[1] Volume is often quantified numerically using the SI derived unit, the cubic metre. The volume of a container is generally understood to be the capacity of the container, i. e. the amount of fluid (gas or liquid) that the container could hold, rather than the amount of space the container itself displaces.
            </summary>
        </member>
        <member name="M:UnitsNet.Volume.op_Division(UnitsNet.Volume,UnitsNet.Length)">
            <summary>Get <see cref="T:UnitsNet.Area"/> from <see cref="T:UnitsNet.Volume"/> divided by <see cref="T:UnitsNet.Length"/>.</summary>
        </member>
        <member name="M:UnitsNet.Volume.op_Division(UnitsNet.Volume,UnitsNet.Area)">
            <summary>Get <see cref="T:UnitsNet.Length"/> from <see cref="T:UnitsNet.Volume"/> divided by <see cref="T:UnitsNet.Area"/>.</summary>
        </member>
        <member name="M:UnitsNet.Volume.op_Division(UnitsNet.Volume,UnitsNet.Duration)">
            <summary>Get <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="T:UnitsNet.Volume"/> divided by <see cref="T:UnitsNet.Duration"/>.</summary>
        </member>
        <member name="M:UnitsNet.Volume.op_Division(UnitsNet.Volume,System.TimeSpan)">
            <summary>Get <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="T:UnitsNet.Volume"/> divided by <see cref="T:System.TimeSpan"/>.</summary>
        </member>
        <member name="M:UnitsNet.Volume.op_Division(UnitsNet.Volume,UnitsNet.VolumeFlow)">
            <summary>Get <see cref="T:System.TimeSpan"/> from <see cref="T:UnitsNet.Volume"/> divided by <see cref="T:UnitsNet.VolumeFlow"/>.</summary>
        </member>
        <member name="F:UnitsNet.Volume._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Volume._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Volume.#ctor(System.Double,UnitsNet.Units.VolumeUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Volume.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Volume" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Volume.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Volume.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.BaseUnit">
            <summary>
                The base unit of Volume, which is CubicMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.MaxValue">
            <summary>
            Represents the largest possible value of Volume
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.MinValue">
            <summary>
            Represents the smallest possible value of Volume
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Volume.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.Units">
            <summary>
                All units of measurement for the Volume quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit CubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Volume.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Volume.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Volume.Type">
            <summary>
                The <see cref="P:UnitsNet.Volume.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Volume.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.AcreFeet">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.AcreFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.AuTablespoons">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.AuTablespoon"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.BoardFeet">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.BoardFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.Centiliters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.Centiliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.CubicCentimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.CubicCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.CubicDecimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.CubicDecimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.CubicFeet">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.CubicFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.CubicHectometers">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.CubicHectometer"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.CubicInches">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.CubicInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.CubicKilometers">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.CubicKilometer"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.CubicMeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.CubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.CubicMicrometers">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.CubicMicrometer"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.CubicMiles">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.CubicMile"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.CubicMillimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.CubicMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.CubicYards">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.CubicYard"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.Decaliters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.Decaliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.DecausGallons">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.DecausGallon"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.Deciliters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.Deciliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.DeciusGallons">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.DeciusGallon"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.HectocubicFeet">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.HectocubicFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.HectocubicMeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.HectocubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.Hectoliters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.Hectoliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.HectousGallons">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.HectousGallon"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.ImperialBeerBarrels">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.ImperialBeerBarrel"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.ImperialGallons">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.ImperialGallon"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.ImperialOunces">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.ImperialOunce"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.ImperialPints">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.ImperialPint"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.KilocubicFeet">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.KilocubicFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.KilocubicMeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.KilocubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.KiloimperialGallons">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.KiloimperialGallon"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.Kiloliters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.Kiloliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.KilousGallons">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.KilousGallon"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.Liters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.Liter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.MegacubicFeet">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.MegacubicFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.MegaimperialGallons">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.MegaimperialGallon"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.Megaliters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.Megaliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.MegausGallons">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.MegausGallon"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.MetricCups">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.MetricTeaspoons">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.MetricTeaspoon"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.Microliters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.Microliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.Milliliters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.Milliliter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.OilBarrels">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.OilBarrel"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.UkTablespoons">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.UkTablespoon"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.UsBeerBarrels">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.UsBeerBarrel"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.UsCustomaryCups">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.UsGallons">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.UsGallon"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.UsLegalCups">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.UsOunces">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.UsOunce"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.UsPints">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.UsPint"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.UsQuarts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.UsQuart"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.UsTablespoons">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.UsTablespoon"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.UsTeaspoons">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeUnit.UsTeaspoon"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Volume.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Volume.GetAbbreviation(UnitsNet.Units.VolumeUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Volume.GetAbbreviation(UnitsNet.Units.VolumeUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Volume.FromAcreFeet(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.AcreFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromAuTablespoons(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.AuTablespoon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromBoardFeet(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.BoardFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromCentiliters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.Centiliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromCubicCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.CubicCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromCubicDecimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.CubicDecimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromCubicFeet(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.CubicFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromCubicHectometers(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.CubicHectometer"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromCubicInches(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.CubicInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromCubicKilometers(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.CubicKilometer"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromCubicMeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.CubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromCubicMicrometers(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.CubicMicrometer"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromCubicMiles(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.CubicMile"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromCubicMillimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.CubicMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromCubicYards(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.CubicYard"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromDecaliters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.Decaliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromDecausGallons(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.DecausGallon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromDeciliters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.Deciliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromDeciusGallons(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.DeciusGallon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromHectocubicFeet(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.HectocubicFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromHectocubicMeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.HectocubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromHectoliters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.Hectoliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromHectousGallons(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.HectousGallon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromImperialBeerBarrels(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.ImperialBeerBarrel"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromImperialGallons(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.ImperialGallon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromImperialOunces(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.ImperialOunce"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromImperialPints(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.ImperialPint"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromKilocubicFeet(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.KilocubicFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromKilocubicMeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.KilocubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromKiloimperialGallons(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.KiloimperialGallon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromKiloliters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.Kiloliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromKilousGallons(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.KilousGallon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromLiters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.Liter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromMegacubicFeet(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.MegacubicFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromMegaimperialGallons(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.MegaimperialGallon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromMegaliters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.Megaliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromMegausGallons(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.MegausGallon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromMetricCups(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromMetricTeaspoons(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.MetricTeaspoon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromMicroliters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.Microliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromMilliliters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.Milliliter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromOilBarrels(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.OilBarrel"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromUkTablespoons(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.UkTablespoon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromUsBeerBarrels(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.UsBeerBarrel"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromUsCustomaryCups(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromUsGallons(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.UsGallon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromUsLegalCups(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromUsOunces(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.UsOunce"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromUsPints(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.UsPint"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromUsQuarts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.UsQuart"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromUsTablespoons(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.UsTablespoon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromUsTeaspoons(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Volume"/> from <see cref="F:UnitsNet.Units.VolumeUnit.UsTeaspoon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.From(UnitsNet.QuantityValue,UnitsNet.Units.VolumeUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.VolumeUnit" /> to <see cref="T:UnitsNet.Volume" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Volume unit value.</returns>
        </member>
        <member name="M:UnitsNet.Volume.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Volume.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Volume.TryParse(System.String,UnitsNet.Volume@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Volume.TryParse(System.String,System.IFormatProvider,UnitsNet.Volume@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Volume.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Volume.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Volume.TryParseUnit(System.String,UnitsNet.Units.VolumeUnit@)">
            <inheritdoc cref="M:UnitsNet.Volume.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.VolumeUnit@)"/>
        </member>
        <member name="M:UnitsNet.Volume.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.VolumeUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Volume.op_UnaryNegation(UnitsNet.Volume)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Volume.op_Addition(UnitsNet.Volume,UnitsNet.Volume)">
            <summary>Get <see cref="T:UnitsNet.Volume"/> from adding two <see cref="T:UnitsNet.Volume"/>.</summary>
        </member>
        <member name="M:UnitsNet.Volume.op_Subtraction(UnitsNet.Volume,UnitsNet.Volume)">
            <summary>Get <see cref="T:UnitsNet.Volume"/> from subtracting two <see cref="T:UnitsNet.Volume"/>.</summary>
        </member>
        <member name="M:UnitsNet.Volume.op_Multiply(System.Double,UnitsNet.Volume)">
            <summary>Get <see cref="T:UnitsNet.Volume"/> from multiplying value and <see cref="T:UnitsNet.Volume"/>.</summary>
        </member>
        <member name="M:UnitsNet.Volume.op_Multiply(UnitsNet.Volume,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Volume"/> from multiplying value and <see cref="T:UnitsNet.Volume"/>.</summary>
        </member>
        <member name="M:UnitsNet.Volume.op_Division(UnitsNet.Volume,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Volume"/> from dividing <see cref="T:UnitsNet.Volume"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Volume.op_Division(UnitsNet.Volume,UnitsNet.Volume)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Volume"/> by <see cref="T:UnitsNet.Volume"/>.</summary>
        </member>
        <member name="M:UnitsNet.Volume.op_LessThanOrEqual(UnitsNet.Volume,UnitsNet.Volume)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Volume.op_GreaterThanOrEqual(UnitsNet.Volume,UnitsNet.Volume)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Volume.op_LessThan(UnitsNet.Volume,UnitsNet.Volume)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Volume.op_GreaterThan(UnitsNet.Volume,UnitsNet.Volume)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Volume.op_Equality(UnitsNet.Volume,UnitsNet.Volume)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Volume.Equals(UnitsNet.Volume,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Volume.op_Inequality(UnitsNet.Volume,UnitsNet.Volume)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Volume.Equals(UnitsNet.Volume,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Volume.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Volume.CompareTo(UnitsNet.Volume)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Volume.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Volume.Equals(UnitsNet.Volume,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Volume.Equals(UnitsNet.Volume)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Volume.Equals(UnitsNet.Volume,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Volume.Equals(UnitsNet.Volume,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Volume within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Volume.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Volume.</returns>
        </member>
        <member name="M:UnitsNet.Volume.As(UnitsNet.Units.VolumeUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Volume.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Volume.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Volume.ToUnit(UnitsNet.Units.VolumeUnit)">
            <summary>
                Converts this Volume to another Volume with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Volume with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Volume.ToUnit(UnitsNet.Units.VolumeUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Volume to another Volume using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Volume with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Volume.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Volume.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Volume.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Volume.UnitsNet#IQuantity{UnitsNet#Units#VolumeUnit}#ToUnit(UnitsNet.Units.VolumeUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Volume.UnitsNet#IQuantity{UnitsNet#Units#VolumeUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Volume.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Volume.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Volume.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Volume.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Volume.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Volume.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.VolumeConcentration">
            <inheritdoc />
            <summary>
                The volume concentration (not to be confused with volume fraction) is defined as the volume of a constituent divided by the total volume of the mixture.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Concentration#Volume_concentration
            </remarks>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.ToMassConcentration(UnitsNet.Density)">
            <summary>
            Get <see cref="T:UnitsNet.MassConcentration" /> from this <see cref="T:UnitsNet.VolumeConcentration" /> and component <see cref="T:UnitsNet.Density" /> .
            </summary>
            <param name="componentDensity"></param>
            <returns></returns>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.ToMolarity(UnitsNet.Density,UnitsNet.MolarMass)">
            <summary>
            Get <see cref="T:UnitsNet.Molarity" /> from this <see cref="T:UnitsNet.VolumeConcentration" /> and component <see cref="T:UnitsNet.Density"/> and <see cref="T:UnitsNet.MolarMass"/> .
            </summary>
            <param name="componentDensity"></param>
            <param name="compontMolarMass"></param>
            <returns></returns>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.FromVolumes(UnitsNet.Volume,UnitsNet.Volume)">
            <summary>
                Get <see cref="T:UnitsNet.VolumeConcentration" /> from a component <see cref="T:UnitsNet.Volume" /> and total mixture <see cref="T:UnitsNet.Volume" /> .
            </summary>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.FromMolarity(UnitsNet.Molarity,UnitsNet.Density,UnitsNet.MolarMass)">
            <summary>
                Get a <see cref="T:UnitsNet.VolumeConcentration"/> from <see cref="T:UnitsNet.Molarity" /> and a component <see cref="T:UnitsNet.Density" /> and <see cref="T:UnitsNet.MolarMass" />.
            </summary>
            <param name="molarity"></param>
            <param name="componentDensity"></param>
            <param name="componentMolarMass"></param>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.op_Multiply(UnitsNet.VolumeConcentration,UnitsNet.Density)">
            <summary>Get <see cref="T:UnitsNet.MassConcentration" /> from <see cref="T:UnitsNet.VolumeConcentration" /> times the component <see cref="T:UnitsNet.Density" />.</summary>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.op_Multiply(UnitsNet.Density,UnitsNet.VolumeConcentration)">
            <summary>Get <see cref="T:UnitsNet.MassConcentration" /> from <see cref="T:UnitsNet.VolumeConcentration" /> times the component <see cref="T:UnitsNet.Density" />.</summary>
        </member>
        <member name="F:UnitsNet.VolumeConcentration._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.VolumeConcentration._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.#ctor(System.Double,UnitsNet.Units.VolumeConcentrationUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.VolumeConcentration" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.VolumeConcentration.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.BaseUnit">
            <summary>
                The base unit of VolumeConcentration, which is DecimalFraction. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.MaxValue">
            <summary>
            Represents the largest possible value of VolumeConcentration
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.MinValue">
            <summary>
            Represents the smallest possible value of VolumeConcentration
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.VolumeConcentration.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.Units">
            <summary>
                All units of measurement for the VolumeConcentration quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit DecimalFraction.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.VolumeConcentration.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.VolumeConcentration.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.Type">
            <summary>
                The <see cref="P:UnitsNet.VolumeConcentration.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.VolumeConcentration.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.CentilitersPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.CentilitersPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.CentilitersPerMililiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.CentilitersPerMililiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.DecilitersPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.DecilitersPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.DecilitersPerMililiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.DecilitersPerMililiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.DecimalFractions">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.DecimalFraction"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.LitersPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.LitersPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.LitersPerMililiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.LitersPerMililiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.MicrolitersPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.MicrolitersPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.MicrolitersPerMililiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.MicrolitersPerMililiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.MillilitersPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.MillilitersPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.MillilitersPerMililiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.MillilitersPerMililiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.NanolitersPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.NanolitersPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.NanolitersPerMililiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.NanolitersPerMililiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.PartsPerBillion">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.PartPerBillion"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.PartsPerMillion">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.PartPerMillion"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.PartsPerThousand">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.PartPerThousand"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.PartsPerTrillion">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.PartPerTrillion"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.Percent">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.Percent"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.PicolitersPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.PicolitersPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeConcentration.PicolitersPerMililiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.PicolitersPerMililiter"/>
            </summary>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.GetAbbreviation(UnitsNet.Units.VolumeConcentrationUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.GetAbbreviation(UnitsNet.Units.VolumeConcentrationUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.FromCentilitersPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeConcentration"/> from <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.CentilitersPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.FromCentilitersPerMililiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeConcentration"/> from <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.CentilitersPerMililiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.FromDecilitersPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeConcentration"/> from <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.DecilitersPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.FromDecilitersPerMililiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeConcentration"/> from <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.DecilitersPerMililiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.FromDecimalFractions(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeConcentration"/> from <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.DecimalFraction"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.FromLitersPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeConcentration"/> from <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.LitersPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.FromLitersPerMililiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeConcentration"/> from <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.LitersPerMililiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.FromMicrolitersPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeConcentration"/> from <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.MicrolitersPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.FromMicrolitersPerMililiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeConcentration"/> from <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.MicrolitersPerMililiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.FromMillilitersPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeConcentration"/> from <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.MillilitersPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.FromMillilitersPerMililiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeConcentration"/> from <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.MillilitersPerMililiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.FromNanolitersPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeConcentration"/> from <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.NanolitersPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.FromNanolitersPerMililiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeConcentration"/> from <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.NanolitersPerMililiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.FromPartsPerBillion(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeConcentration"/> from <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.PartPerBillion"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.FromPartsPerMillion(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeConcentration"/> from <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.PartPerMillion"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.FromPartsPerThousand(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeConcentration"/> from <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.PartPerThousand"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.FromPartsPerTrillion(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeConcentration"/> from <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.PartPerTrillion"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.FromPercent(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeConcentration"/> from <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.Percent"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.FromPicolitersPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeConcentration"/> from <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.PicolitersPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.FromPicolitersPerMililiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeConcentration"/> from <see cref="F:UnitsNet.Units.VolumeConcentrationUnit.PicolitersPerMililiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.From(UnitsNet.QuantityValue,UnitsNet.Units.VolumeConcentrationUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.VolumeConcentrationUnit" /> to <see cref="T:UnitsNet.VolumeConcentration" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>VolumeConcentration unit value.</returns>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.TryParse(System.String,UnitsNet.VolumeConcentration@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.TryParse(System.String,System.IFormatProvider,UnitsNet.VolumeConcentration@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.TryParseUnit(System.String,UnitsNet.Units.VolumeConcentrationUnit@)">
            <inheritdoc cref="M:UnitsNet.VolumeConcentration.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.VolumeConcentrationUnit@)"/>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.VolumeConcentrationUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.op_UnaryNegation(UnitsNet.VolumeConcentration)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.op_Addition(UnitsNet.VolumeConcentration,UnitsNet.VolumeConcentration)">
            <summary>Get <see cref="T:UnitsNet.VolumeConcentration"/> from adding two <see cref="T:UnitsNet.VolumeConcentration"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.op_Subtraction(UnitsNet.VolumeConcentration,UnitsNet.VolumeConcentration)">
            <summary>Get <see cref="T:UnitsNet.VolumeConcentration"/> from subtracting two <see cref="T:UnitsNet.VolumeConcentration"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.op_Multiply(System.Double,UnitsNet.VolumeConcentration)">
            <summary>Get <see cref="T:UnitsNet.VolumeConcentration"/> from multiplying value and <see cref="T:UnitsNet.VolumeConcentration"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.op_Multiply(UnitsNet.VolumeConcentration,System.Double)">
            <summary>Get <see cref="T:UnitsNet.VolumeConcentration"/> from multiplying value and <see cref="T:UnitsNet.VolumeConcentration"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.op_Division(UnitsNet.VolumeConcentration,System.Double)">
            <summary>Get <see cref="T:UnitsNet.VolumeConcentration"/> from dividing <see cref="T:UnitsNet.VolumeConcentration"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.op_Division(UnitsNet.VolumeConcentration,UnitsNet.VolumeConcentration)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.VolumeConcentration"/> by <see cref="T:UnitsNet.VolumeConcentration"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.op_LessThanOrEqual(UnitsNet.VolumeConcentration,UnitsNet.VolumeConcentration)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.op_GreaterThanOrEqual(UnitsNet.VolumeConcentration,UnitsNet.VolumeConcentration)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.op_LessThan(UnitsNet.VolumeConcentration,UnitsNet.VolumeConcentration)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.op_GreaterThan(UnitsNet.VolumeConcentration,UnitsNet.VolumeConcentration)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.op_Equality(UnitsNet.VolumeConcentration,UnitsNet.VolumeConcentration)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.VolumeConcentration.Equals(UnitsNet.VolumeConcentration,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.op_Inequality(UnitsNet.VolumeConcentration,UnitsNet.VolumeConcentration)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.VolumeConcentration.Equals(UnitsNet.VolumeConcentration,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumeConcentration.CompareTo(UnitsNet.VolumeConcentration)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumeConcentration.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.VolumeConcentration.Equals(UnitsNet.VolumeConcentration,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.Equals(UnitsNet.VolumeConcentration)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.VolumeConcentration.Equals(UnitsNet.VolumeConcentration,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.Equals(UnitsNet.VolumeConcentration,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another VolumeConcentration within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current VolumeConcentration.</returns>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.As(UnitsNet.Units.VolumeConcentrationUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumeConcentration.ToUnit(UnitsNet.Units.VolumeConcentrationUnit)">
            <summary>
                Converts this VolumeConcentration to another VolumeConcentration with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A VolumeConcentration with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.ToUnit(UnitsNet.Units.VolumeConcentrationUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this VolumeConcentration to another VolumeConcentration using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A VolumeConcentration with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumeConcentration.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumeConcentration.UnitsNet#IQuantity{UnitsNet#Units#VolumeConcentrationUnit}#ToUnit(UnitsNet.Units.VolumeConcentrationUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumeConcentration.UnitsNet#IQuantity{UnitsNet#Units#VolumeConcentrationUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumeConcentration.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.VolumeConcentration.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.VolumeFlow">
            <inheritdoc />
            <summary>
                In physics and engineering, in particular fluid dynamics and hydrometry, the volumetric flow rate, (also known as volume flow rate, rate of fluid flow or volume velocity) is the volume of fluid which passes through a given surface per unit time. The SI unit is m³/s (cubic meters per second). In US Customary Units and British Imperial Units, volumetric flow rate is often expressed as ft³/s (cubic feet per second). It is usually represented by the symbol Q.
            </summary>
        </member>
        <member name="M:UnitsNet.VolumeFlow.op_Multiply(UnitsNet.VolumeFlow,System.TimeSpan)">
            <summary>Get <see cref="T:UnitsNet.Volume"/> from <see cref="T:UnitsNet.VolumeFlow"/> times <see cref="T:System.TimeSpan"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumeFlow.op_Multiply(UnitsNet.VolumeFlow,UnitsNet.Duration)">
            <summary>Get <see cref="T:UnitsNet.Volume"/> from <see cref="T:UnitsNet.VolumeFlow"/> times <see cref="T:UnitsNet.Duration"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumeFlow.op_Division(UnitsNet.VolumeFlow,UnitsNet.Area)">
            <summary>Get <see cref="T:UnitsNet.Speed"/> from <see cref="T:UnitsNet.VolumeFlow"/> divided by <see cref="T:UnitsNet.Area"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumeFlow.op_Division(UnitsNet.VolumeFlow,UnitsNet.Speed)">
            <summary>Get <see cref="T:UnitsNet.Area"/> from <see cref="T:UnitsNet.VolumeFlow"/> divided by <see cref="T:UnitsNet.Speed"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumeFlow.op_Multiply(UnitsNet.VolumeFlow,UnitsNet.Density)">
            <summary>Get <see cref="T:UnitsNet.MassFlow"/> from <see cref="T:UnitsNet.VolumeFlow"/> times <see cref="T:UnitsNet.Density"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumeFlow.op_Multiply(UnitsNet.Density,UnitsNet.VolumeFlow)">
            <summary>Get <see cref="T:UnitsNet.MassFlow"/> from <see cref="T:UnitsNet.Density"/> times <see cref="T:UnitsNet.VolumeFlow"/>.</summary>
        </member>
        <member name="F:UnitsNet.VolumeFlow._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.VolumeFlow._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.VolumeFlow.#ctor(System.Double,UnitsNet.Units.VolumeFlowUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.VolumeFlow.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.VolumeFlow" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.VolumeFlow.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.VolumeFlow.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.BaseUnit">
            <summary>
                The base unit of VolumeFlow, which is CubicMeterPerSecond. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.MaxValue">
            <summary>
            Represents the largest possible value of VolumeFlow
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.MinValue">
            <summary>
            Represents the smallest possible value of VolumeFlow
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.VolumeFlow.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.Units">
            <summary>
                All units of measurement for the VolumeFlow quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit CubicMeterPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.VolumeFlow.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.VolumeFlow.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.VolumeFlow.Type">
            <summary>
                The <see cref="P:UnitsNet.VolumeFlow.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.VolumeFlow.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.AcreFeetPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.AcreFootPerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.AcreFeetPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.AcreFootPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.AcreFeetPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.AcreFootPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.AcreFeetPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.AcreFootPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CentilitersPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.CentiliterPerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CentilitersPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.CentiliterPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CentilitersPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.CentiliterPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CentilitersPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.CentiliterPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CubicCentimetersPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.CubicCentimeterPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CubicDecimetersPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.CubicDecimeterPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CubicFeetPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.CubicFootPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CubicFeetPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.CubicFootPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CubicFeetPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.CubicFootPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CubicMetersPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.CubicMeterPerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CubicMetersPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.CubicMeterPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CubicMetersPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.CubicMeterPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CubicMetersPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.CubicMeterPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CubicMillimetersPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.CubicMillimeterPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CubicYardsPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.CubicYardPerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CubicYardsPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.CubicYardPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CubicYardsPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.CubicYardPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CubicYardsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.CubicYardPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.DecilitersPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.DeciliterPerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.DecilitersPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.DeciliterPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.DecilitersPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.DeciliterPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.DecilitersPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.DeciliterPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.KilolitersPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.KiloliterPerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.KilolitersPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.KiloliterPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.KilolitersPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.KiloliterPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.KilolitersPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.KiloliterPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.KilousGallonsPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.KilousGallonPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.LitersPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.LiterPerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.LitersPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.LiterPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.LitersPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.LiterPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.LitersPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.LiterPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.MegalitersPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.MegaliterPerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.MegaukGallonsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.MegaukGallonPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.MicrolitersPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.MicroliterPerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.MicrolitersPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.MicroliterPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.MicrolitersPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.MicroliterPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.MicrolitersPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.MicroliterPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.MillilitersPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.MilliliterPerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.MillilitersPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.MilliliterPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.MillilitersPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.MilliliterPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.MillilitersPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.MilliliterPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.MillionUsGallonsPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.MillionUsGallonsPerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.NanolitersPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.NanoliterPerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.NanolitersPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.NanoliterPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.NanolitersPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.NanoliterPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.NanolitersPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.NanoliterPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.OilBarrelsPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.OilBarrelPerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.OilBarrelsPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.OilBarrelPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.OilBarrelsPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.OilBarrelPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.OilBarrelsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.OilBarrelPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.UkGallonsPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.UkGallonPerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.UkGallonsPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.UkGallonPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.UkGallonsPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.UkGallonPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.UkGallonsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.UkGallonPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.UsGallonsPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.UsGallonPerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.UsGallonsPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.UsGallonPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.UsGallonsPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.UsGallonPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.UsGallonsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowUnit.UsGallonPerSecond"/>
            </summary>
        </member>
        <member name="M:UnitsNet.VolumeFlow.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.VolumeFlow.GetAbbreviation(UnitsNet.Units.VolumeFlowUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlow.GetAbbreviation(UnitsNet.Units.VolumeFlowUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromAcreFeetPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.AcreFootPerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromAcreFeetPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.AcreFootPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromAcreFeetPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.AcreFootPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromAcreFeetPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.AcreFootPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCentilitersPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.CentiliterPerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCentilitersPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.CentiliterPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCentilitersPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.CentiliterPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCentilitersPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.CentiliterPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCubicCentimetersPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.CubicCentimeterPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCubicDecimetersPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.CubicDecimeterPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCubicFeetPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.CubicFootPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCubicFeetPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.CubicFootPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCubicFeetPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.CubicFootPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCubicMetersPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.CubicMeterPerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCubicMetersPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.CubicMeterPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCubicMetersPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.CubicMeterPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCubicMetersPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.CubicMeterPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCubicMillimetersPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.CubicMillimeterPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCubicYardsPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.CubicYardPerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCubicYardsPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.CubicYardPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCubicYardsPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.CubicYardPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCubicYardsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.CubicYardPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromDecilitersPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.DeciliterPerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromDecilitersPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.DeciliterPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromDecilitersPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.DeciliterPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromDecilitersPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.DeciliterPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromKilolitersPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.KiloliterPerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromKilolitersPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.KiloliterPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromKilolitersPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.KiloliterPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromKilolitersPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.KiloliterPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromKilousGallonsPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.KilousGallonPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromLitersPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.LiterPerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromLitersPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.LiterPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromLitersPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.LiterPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromLitersPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.LiterPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromMegalitersPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.MegaliterPerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromMegaukGallonsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.MegaukGallonPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromMicrolitersPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.MicroliterPerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromMicrolitersPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.MicroliterPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromMicrolitersPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.MicroliterPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromMicrolitersPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.MicroliterPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromMillilitersPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.MilliliterPerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromMillilitersPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.MilliliterPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromMillilitersPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.MilliliterPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromMillilitersPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.MilliliterPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromMillionUsGallonsPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.MillionUsGallonsPerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromNanolitersPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.NanoliterPerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromNanolitersPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.NanoliterPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromNanolitersPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.NanoliterPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromNanolitersPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.NanoliterPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromOilBarrelsPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.OilBarrelPerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromOilBarrelsPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.OilBarrelPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromOilBarrelsPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.OilBarrelPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromOilBarrelsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.OilBarrelPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromUkGallonsPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.UkGallonPerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromUkGallonsPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.UkGallonPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromUkGallonsPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.UkGallonPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromUkGallonsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.UkGallonPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromUsGallonsPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.UsGallonPerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromUsGallonsPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.UsGallonPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromUsGallonsPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.UsGallonPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromUsGallonsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlow"/> from <see cref="F:UnitsNet.Units.VolumeFlowUnit.UsGallonPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.From(UnitsNet.QuantityValue,UnitsNet.Units.VolumeFlowUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.VolumeFlowUnit" /> to <see cref="T:UnitsNet.VolumeFlow" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>VolumeFlow unit value.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlow.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumeFlow.TryParse(System.String,UnitsNet.VolumeFlow@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.VolumeFlow.TryParse(System.String,System.IFormatProvider,UnitsNet.VolumeFlow@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumeFlow.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.TryParseUnit(System.String,UnitsNet.Units.VolumeFlowUnit@)">
            <inheritdoc cref="M:UnitsNet.VolumeFlow.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.VolumeFlowUnit@)"/>
        </member>
        <member name="M:UnitsNet.VolumeFlow.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.VolumeFlowUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumeFlow.op_UnaryNegation(UnitsNet.VolumeFlow)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.VolumeFlow.op_Addition(UnitsNet.VolumeFlow,UnitsNet.VolumeFlow)">
            <summary>Get <see cref="T:UnitsNet.VolumeFlow"/> from adding two <see cref="T:UnitsNet.VolumeFlow"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumeFlow.op_Subtraction(UnitsNet.VolumeFlow,UnitsNet.VolumeFlow)">
            <summary>Get <see cref="T:UnitsNet.VolumeFlow"/> from subtracting two <see cref="T:UnitsNet.VolumeFlow"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumeFlow.op_Multiply(System.Double,UnitsNet.VolumeFlow)">
            <summary>Get <see cref="T:UnitsNet.VolumeFlow"/> from multiplying value and <see cref="T:UnitsNet.VolumeFlow"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumeFlow.op_Multiply(UnitsNet.VolumeFlow,System.Double)">
            <summary>Get <see cref="T:UnitsNet.VolumeFlow"/> from multiplying value and <see cref="T:UnitsNet.VolumeFlow"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumeFlow.op_Division(UnitsNet.VolumeFlow,System.Double)">
            <summary>Get <see cref="T:UnitsNet.VolumeFlow"/> from dividing <see cref="T:UnitsNet.VolumeFlow"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.VolumeFlow.op_Division(UnitsNet.VolumeFlow,UnitsNet.VolumeFlow)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.VolumeFlow"/> by <see cref="T:UnitsNet.VolumeFlow"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumeFlow.op_LessThanOrEqual(UnitsNet.VolumeFlow,UnitsNet.VolumeFlow)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.VolumeFlow.op_GreaterThanOrEqual(UnitsNet.VolumeFlow,UnitsNet.VolumeFlow)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.VolumeFlow.op_LessThan(UnitsNet.VolumeFlow,UnitsNet.VolumeFlow)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.VolumeFlow.op_GreaterThan(UnitsNet.VolumeFlow,UnitsNet.VolumeFlow)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.VolumeFlow.op_Equality(UnitsNet.VolumeFlow,UnitsNet.VolumeFlow)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.VolumeFlow.Equals(UnitsNet.VolumeFlow,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.VolumeFlow.op_Inequality(UnitsNet.VolumeFlow,UnitsNet.VolumeFlow)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.VolumeFlow.Equals(UnitsNet.VolumeFlow,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.VolumeFlow.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumeFlow.CompareTo(UnitsNet.VolumeFlow)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumeFlow.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.VolumeFlow.Equals(UnitsNet.VolumeFlow,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.VolumeFlow.Equals(UnitsNet.VolumeFlow)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.VolumeFlow.Equals(UnitsNet.VolumeFlow,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.VolumeFlow.Equals(UnitsNet.VolumeFlow,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another VolumeFlow within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlow.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current VolumeFlow.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlow.As(UnitsNet.Units.VolumeFlowUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlow.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.VolumeFlow.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumeFlow.ToUnit(UnitsNet.Units.VolumeFlowUnit)">
            <summary>
                Converts this VolumeFlow to another VolumeFlow with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A VolumeFlow with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlow.ToUnit(UnitsNet.Units.VolumeFlowUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this VolumeFlow to another VolumeFlow using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A VolumeFlow with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlow.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumeFlow.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.VolumeFlow.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumeFlow.UnitsNet#IQuantity{UnitsNet#Units#VolumeFlowUnit}#ToUnit(UnitsNet.Units.VolumeFlowUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumeFlow.UnitsNet#IQuantity{UnitsNet#Units#VolumeFlowUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumeFlow.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlow.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumeFlow.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumeFlow.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumeFlow.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlow.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Quantity">
            <summary>
                Dynamically parse or construct quantities when types are only known at runtime.
            </summary>
        </member>
        <member name="P:UnitsNet.Quantity.Types">
            <summary>
            All enum values of <see cref="T:UnitsNet.QuantityType"/>, such as <see cref="F:UnitsNet.QuantityType.Length"/> and <see cref="F:UnitsNet.QuantityType.Mass"/>.
            </summary>
        </member>
        <member name="P:UnitsNet.Quantity.Names">
            <summary>
            All enum value names of <see cref="P:UnitsNet.Quantity.Infos"/>, such as "Length" and "Mass".
            </summary>
        </member>
        <member name="P:UnitsNet.Quantity.Infos">
            <summary>
            All quantity information objects, such as <see cref="P:UnitsNet.Length.Info"/> and <see cref="P:UnitsNet.Mass.Info"/>.
            </summary>
        </member>
        <member name="M:UnitsNet.Quantity.GetUnitInfo(System.Enum)">
            <summary>
            Get <see cref="T:UnitsNet.UnitInfo"/> for a given unit enum value.
            </summary>
        </member>
        <member name="M:UnitsNet.Quantity.TryGetUnitInfo(System.Enum,UnitsNet.UnitInfo@)">
            <summary>
            Try to get <see cref="T:UnitsNet.UnitInfo"/> for a given unit enum value.
            </summary>
        </member>
        <member name="M:UnitsNet.Quantity.From(UnitsNet.QuantityValue,System.Enum)">
            <summary>
                Dynamically construct a quantity.
            </summary>
            <param name="value">Numeric value.</param>
            <param name="unit">Unit enum value.</param>
            <returns>An <see cref="T:UnitsNet.IQuantity"/> object.</returns>
            <exception cref="T:System.ArgumentException">Unit value is not a know unit enum type.</exception>
        </member>
        <member name="M:UnitsNet.Quantity.TryFrom(System.Double,System.Enum,UnitsNet.IQuantity@)">
            <inheritdoc cref="M:UnitsNet.Quantity.TryFrom(UnitsNet.QuantityValue,System.Enum,UnitsNet.IQuantity@)"/>
        </member>
        <member name="M:UnitsNet.Quantity.Parse(System.Type,System.String)">
            <inheritdoc cref="M:UnitsNet.Quantity.Parse(System.IFormatProvider,System.Type,System.String)"/>
        </member>
        <member name="M:UnitsNet.Quantity.Parse(System.IFormatProvider,System.Type,System.String)">
            <summary>
                Dynamically parse a quantity string representation.
            </summary>
            <param name="formatProvider">The format provider to use for lookup. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <param name="quantityType">Type of quantity, such as <see cref="T:UnitsNet.Length"/>.</param>
            <param name="quantityString">Quantity string representation, such as "1.5 kg". Must be compatible with given quantity type.</param>
            <returns>The parsed quantity.</returns>
            <exception cref="T:System.ArgumentException">Type must be of type UnitsNet.IQuantity -or- Type is not a known quantity type.</exception>
        </member>
        <member name="M:UnitsNet.Quantity.TryParse(System.Type,System.String,UnitsNet.IQuantity@)">
            <inheritdoc cref="M:UnitsNet.Quantity.TryParse(System.IFormatProvider,System.Type,System.String,UnitsNet.IQuantity@)"/>
        </member>
        <member name="M:UnitsNet.Quantity.GetInfo(UnitsNet.QuantityType)">
            <summary>
                Get information about the given quantity type.
            </summary>
            <param name="quantityType">The quantity type enum value.</param>
            <returns>Information about the quantity and its units.</returns>
        </member>
        <member name="M:UnitsNet.Quantity.GetQuantitiesWithBaseDimensions(UnitsNet.BaseDimensions)">
            <summary>
                Get a list of quantities that has the given base dimensions.
            </summary>
            <param name="baseDimensions">The base dimensions to match.</param>
        </member>
        <member name="F:UnitsNet.Quantity.ByName">
            <summary>
            All QuantityInfo instances mapped by quantity name that are present in UnitsNet by default.
            </summary>
        </member>
        <member name="M:UnitsNet.Quantity.FromQuantityType(UnitsNet.QuantityType,UnitsNet.QuantityValue)">
            <summary>
            Dynamically constructs a quantity of the given <see cref="T:UnitsNet.QuantityType"/> with the value in the quantity's base units.
            </summary>
            <param name="quantityType">The <see cref="T:UnitsNet.QuantityType"/> of the quantity to create.</param>
            <param name="value">The value to construct the quantity with.</param>
            <returns>The created quantity.</returns>
        </member>
        <member name="M:UnitsNet.Quantity.FromQuantityInfo(UnitsNet.QuantityInfo,UnitsNet.QuantityValue)">
            <summary>
            Dynamically constructs a quantity of the given <see cref="T:UnitsNet.QuantityInfo"/> with the value in the quantity's base units.
            </summary>
            <param name="quantityInfo">The <see cref="T:UnitsNet.QuantityInfo"/> of the quantity to create.</param>
            <param name="value">The value to construct the quantity with.</param>
            <returns>The created quantity.</returns>
        </member>
        <member name="M:UnitsNet.Quantity.TryFrom(UnitsNet.QuantityValue,System.Enum,UnitsNet.IQuantity@)">
            <summary>
                Try to dynamically construct a quantity.
            </summary>
            <param name="value">Numeric value.</param>
            <param name="unit">Unit enum value.</param>
            <param name="quantity">The resulting quantity if successful, otherwise <c>default</c>.</param>
            <returns><c>True</c> if successful with <paramref name="quantity"/> assigned the value, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:UnitsNet.Quantity.TryParse(System.IFormatProvider,System.Type,System.String,UnitsNet.IQuantity@)">
            <summary>
                Try to dynamically parse a quantity string representation.
            </summary>
            <param name="formatProvider">The format provider to use for lookup. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <param name="quantityType">Type of quantity, such as <see cref="T:UnitsNet.Length"/>.</param>
            <param name="quantityString">Quantity string representation, such as "1.5 kg". Must be compatible with given quantity type.</param>
            <param name="quantity">The resulting quantity if successful, otherwise <c>default</c>.</param>
            <returns>The parsed quantity.</returns>
        </member>
        <member name="F:UnitsNet.QuantityParser.ParseNumberStyles">
            <summary>
            Allow integer, floating point or exponential number formats.
            </summary>
        </member>
        <member name="M:UnitsNet.QuantityParser.TryParse``2(System.String,System.IFormatProvider,UnitsNet.QuantityFromDelegate{``0,``1},UnitsNet.IQuantity@)">
            <summary>
                Workaround for C# not allowing to pass on 'out' param from type Length to IQuantity, even though the are compatible.
            </summary>
        </member>
        <member name="M:UnitsNet.QuantityParser.ParseWithRegex``2(System.String,System.String,UnitsNet.QuantityFromDelegate{``0,``1},System.IFormatProvider)">
            <summary>
                Parse a string given a particular regular expression.
            </summary>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.QuantityParser.TryParseWithRegex``2(System.String,System.String,UnitsNet.QuantityFromDelegate{``0,``1},System.IFormatProvider,``0@)">
            <summary>
                Parse a string given a particular regular expression.
            </summary>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="T:UnitsNet.UnitAbbreviationsCache">
            <summary>
                Cache of the mapping between unit enum values and unit abbreviation strings for one or more cultures.
                A static instance <see cref="P:UnitsNet.UnitAbbreviationsCache.Default"/> is used internally for ToString() and Parse() of quantities and units.
            </summary>
        </member>
        <member name="F:UnitsNet.UnitAbbreviationsCache.FallbackCulture">
            <summary>
                Fallback culture used by <see cref="M:UnitsNet.UnitAbbreviationsCache.GetUnitAbbreviations``1(``0,System.IFormatProvider)" /> and <see cref="M:UnitsNet.UnitAbbreviationsCache.GetDefaultAbbreviation``1(``0,System.IFormatProvider)" />
                if no abbreviations are found with a given culture.
            </summary>
            <example>
                User wants to call <see cref="M:UnitsNet.UnitParser.Parse``1(System.String,System.IFormatProvider)" /> or <see cref="M:UnitsNet.Length.ToString" /> with Russian
                culture, but no translation is defined, so we return the US English definition as a last resort. If it's not
                defined there either, an exception is thrown.
            </example>
        </member>
        <member name="P:UnitsNet.UnitAbbreviationsCache.Default">
            <summary>
                The static instance used internally for ToString() and Parse() of quantities and units.
            </summary>
        </member>
        <member name="M:UnitsNet.UnitAbbreviationsCache.#ctor">
            <summary>
                Create an instance of the cache and load all the abbreviations defined in the library.
            </summary>
        </member>
        <member name="M:UnitsNet.UnitAbbreviationsCache.MapUnitToAbbreviation``1(``0,System.String[])">
            <summary>
            Adds one or more unit abbreviation for the given unit enum value.
            This is used to dynamically add abbreviations for existing unit enums such as <see cref="T:UnitsNet.Units.LengthUnit"/> or to extend with third-party unit enums
            in order to <see cref="M:UnitsNet.UnitParser.Parse``1(System.String,System.IFormatProvider)"/> or <see cref="M:UnitsNet.UnitAbbreviationsCache.GetDefaultAbbreviation``1(``0,System.IFormatProvider)"/> on them later.
            </summary>
            <param name="unit">The unit enum value.</param>
            <param name="abbreviations">Unit abbreviations to add.</param>
            <typeparam name="TUnitType">The type of unit enum.</typeparam>
        </member>
        <member name="M:UnitsNet.UnitAbbreviationsCache.MapUnitToDefaultAbbreviation``1(``0,System.String)">
            <summary>
            Adds a unit abbreviation for the given unit enum value and sets it as the default.
            This is used to dynamically add abbreviations for existing unit enums such as <see cref="T:UnitsNet.Units.LengthUnit"/> or to extend with third-party unit enums
            in order to <see cref="M:UnitsNet.UnitParser.Parse``1(System.String,System.IFormatProvider)"/> or <see cref="M:UnitsNet.UnitAbbreviationsCache.GetDefaultAbbreviation``1(``0,System.IFormatProvider)"/> on them later.
            </summary>
            <param name="unit">The unit enum value.</param>
            <param name="abbreviation">Unit abbreviations to add as default.</param>
            <typeparam name="TUnitType">The type of unit enum.</typeparam>
        </member>
        <member name="M:UnitsNet.UnitAbbreviationsCache.MapUnitToAbbreviation``1(``0,System.IFormatProvider,System.String[])">
            <summary>
            Adds one or more unit abbreviation for the given unit enum value.
            This is used to dynamically add abbreviations for existing unit enums such as <see cref="T:UnitsNet.Units.LengthUnit"/> or to extend with third-party unit enums
            in order to <see cref="M:UnitsNet.UnitParser.Parse``1(System.String,System.IFormatProvider)"/> or <see cref="M:UnitsNet.UnitAbbreviationsCache.GetDefaultAbbreviation``1(``0,System.IFormatProvider)"/> on them later.
            </summary>
            <param name="unit">The unit enum value.</param>
            <param name="formatProvider">The format provider to use for lookup. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <param name="abbreviations">Unit abbreviations to add.</param>
            <typeparam name="TUnitType">The type of unit enum.</typeparam>
        </member>
        <member name="M:UnitsNet.UnitAbbreviationsCache.MapUnitToDefaultAbbreviation``1(``0,System.IFormatProvider,System.String)">
            <summary>
            Adds a unit abbreviation for the given unit enum value and sets it as the default.
            This is used to dynamically add abbreviations for existing unit enums such as <see cref="T:UnitsNet.Units.LengthUnit"/> or to extend with third-party unit enums
            in order to <see cref="M:UnitsNet.UnitParser.Parse``1(System.String,System.IFormatProvider)"/> or <see cref="M:UnitsNet.UnitAbbreviationsCache.GetDefaultAbbreviation``1(``0,System.IFormatProvider)"/> on them later.
            </summary>
            <param name="unit">The unit enum value.</param>
            <param name="formatProvider">The format provider to use for lookup. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <param name="abbreviation">Unit abbreviation to add as default.</param>
            <typeparam name="TUnitType">The type of unit enum.</typeparam>
        </member>
        <member name="M:UnitsNet.UnitAbbreviationsCache.MapUnitToAbbreviation(System.Type,System.Int32,System.IFormatProvider,System.String[])">
            <summary>
            Adds one or more unit abbreviation for the given unit enum value.
            This is used to dynamically add abbreviations for existing unit enums such as <see cref="T:UnitsNet.Units.LengthUnit"/> or to extend with third-party unit enums
            in order to <see cref="M:UnitsNet.UnitParser.Parse``1(System.String,System.IFormatProvider)"/> or <see cref="M:UnitsNet.UnitAbbreviationsCache.GetDefaultAbbreviation``1(``0,System.IFormatProvider)"/> on them later.
            </summary>
            <param name="unitType">The unit enum type.</param>
            <param name="unitValue">The unit enum value.</param>
            <param name="formatProvider">The format provider to use for lookup. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <param name="abbreviations">Unit abbreviations to add.</param>
        </member>
        <member name="M:UnitsNet.UnitAbbreviationsCache.MapUnitToDefaultAbbreviation(System.Type,System.Int32,System.IFormatProvider,System.String)">
            <summary>
            Adds a unit abbreviation for the given unit enum value and sets it as the default.
            This is used to dynamically add abbreviations for existing unit enums such as <see cref="T:UnitsNet.Units.LengthUnit"/> or to extend with third-party unit enums
            in order to <see cref="M:UnitsNet.UnitParser.Parse``1(System.String,System.IFormatProvider)"/> or <see cref="M:UnitsNet.UnitAbbreviationsCache.GetDefaultAbbreviation``1(``0,System.IFormatProvider)"/> on them later.
            </summary>
            <param name="unitType">The unit enum type.</param>
            <param name="unitValue">The unit enum value.</param>
            <param name="formatProvider">The format provider to use for lookup. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <param name="abbreviation">Unit abbreviation to add as default.</param>
        </member>
        <member name="M:UnitsNet.UnitAbbreviationsCache.GetDefaultAbbreviation``1(``0,System.IFormatProvider)">
            <summary>
            Gets the default abbreviation for a given unit. If a unit has more than one abbreviation defined, then it returns the first one.
            Example: GetDefaultAbbreviation&lt;LengthUnit&gt;(LengthUnit.Kilometer) => "km"
            </summary>
            <param name="unit">The unit enum value.</param>
            <param name="formatProvider">The format provider to use for lookup. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <typeparam name="TUnitType">The type of unit enum.</typeparam>
            <returns>The default unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.UnitAbbreviationsCache.GetDefaultAbbreviation(System.Type,System.Int32,System.IFormatProvider)">
            <summary>
            Gets the default abbreviation for a given unit type and its numeric enum value.
            If a unit has more than one abbreviation defined, then it returns the first one.
            Example: GetDefaultAbbreviation&lt;LengthUnit&gt;(typeof(LengthUnit), 1) => "cm"
            </summary>
            <param name="unitType">The unit enum type.</param>
            <param name="unitValue">The unit enum value.</param>
            <param name="formatProvider">The format provider to use for lookup. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The default unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.UnitAbbreviationsCache.GetUnitAbbreviations``1(``0,System.IFormatProvider)">
            <summary>
                Get all abbreviations for unit.
            </summary>
            <typeparam name="TUnitType">Enum type for units.</typeparam>
            <param name="unit">Enum value for unit.</param>
            <param name="formatProvider">The format provider to use for lookup. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>Unit abbreviations associated with unit.</returns>
        </member>
        <member name="M:UnitsNet.UnitAbbreviationsCache.GetUnitAbbreviations(System.Type,System.Int32,System.IFormatProvider)">
            <summary>
                Get all abbreviations for unit.
            </summary>
            <param name="unitType">Enum type for unit.</param>
            <param name="unitValue">Enum value for unit.</param>
            <param name="formatProvider">The format provider to use for lookup. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>Unit abbreviations associated with unit.</returns>
        </member>
        <member name="M:UnitsNet.UnitAbbreviationsCache.GetAllUnitAbbreviationsForQuantity(System.Type,System.IFormatProvider)">
            <summary>
                Get all abbreviations for all units of a quantity.
            </summary>
            <param name="unitEnumType">Enum type for unit.</param>
            <param name="formatProvider">The format provider to use for lookup. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>Unit abbreviations associated with unit.</returns>
        </member>
        <member name="T:UnitsNet.UnitParser">
            <summary>
                Parses units given a unit abbreviations cache.
                The static instance <see cref="P:UnitsNet.UnitParser.Default"/> is used internally to parse quantities and units using the
                default abbreviations cache for all units and abbreviations defined in the library.
            </summary>
        </member>
        <member name="P:UnitsNet.UnitParser.Default">
            <summary>
                The default static instance used internally to parse quantities and units using the
                default abbreviations cache for all units and abbreviations defined in the library.
            </summary>
        </member>
        <member name="M:UnitsNet.UnitParser.#ctor(UnitsNet.UnitAbbreviationsCache)">
            <summary>
                Create a parser using the given unit abbreviations cache.
            </summary>
            <param name="unitAbbreviationsCache"></param>
        </member>
        <member name="M:UnitsNet.UnitParser.Parse``1(System.String,System.IFormatProvider)">
            <summary>
            Parses a unit abbreviation for a given unit enumeration type.
            Example: Parse&lt;LengthUnit&gt;("km") => LengthUnit.Kilometer
            </summary>
            <param name="unitAbbreviation"></param>
            <param name="formatProvider">The format provider to use for lookup. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <typeparam name="TUnitType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:UnitsNet.UnitParser.Parse(System.String,System.Type,System.IFormatProvider)">
            <summary>
                Parse a unit abbreviation, such as "kg" or "m", to the unit enum value of the enum type
                <paramref name="unitType" />.
            </summary>
            <param name="unitAbbreviation">
                Unit abbreviation, such as "kg" or "m" for <see cref="F:UnitsNet.Units.MassUnit.Kilogram" /> and
                <see cref="F:UnitsNet.Units.LengthUnit.Meter" /> respectively.
            </param>
            <param name="unitType">Unit enum type, such as <see cref="T:UnitsNet.Units.MassUnit" /> and <see cref="T:UnitsNet.Units.LengthUnit" />.</param>
            <param name="formatProvider">The format provider to use for lookup. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>Unit enum value, such as <see cref="F:UnitsNet.Units.MassUnit.Kilogram" />.</returns>
            <exception cref="T:UnitsNet.UnitNotFoundException">No units match the abbreviation.</exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">More than one unit matches the abbreviation.</exception>
        </member>
        <member name="M:UnitsNet.UnitParser.TryParse``1(System.String,``0@)">
            <summary>
            Try to parse a unit abbreviation.
            </summary>
            <param name="unitAbbreviation">The string value.</param>
            <param name="unit">The unit enum value as out result.</param>
            <typeparam name="TUnitType">Type of unit enum.</typeparam>
            <returns>True if successful.</returns>
        </member>
        <member name="M:UnitsNet.UnitParser.TryParse``1(System.String,System.IFormatProvider,``0@)">
            <summary>
            Try to parse a unit abbreviation.
            </summary>
            <param name="unitAbbreviation">The string value.</param>
            <param name="formatProvider">The format provider to use for lookup. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <param name="unit">The unit enum value as out result.</param>
            <typeparam name="TUnitType">Type of unit enum.</typeparam>
            <returns>True if successful.</returns>
        </member>
        <member name="M:UnitsNet.UnitParser.TryParse(System.String,System.Type,System.Enum@)">
            <summary>
            Try to parse a unit abbreviation.
            </summary>
            <param name="unitAbbreviation">The string value.</param>
            <param name="unitType">Type of unit enum.</param>
            <param name="unit">The unit enum value as out result.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:UnitsNet.UnitParser.TryParse(System.String,System.Type,System.IFormatProvider,System.Enum@)">
            <summary>
            Try to parse a unit abbreviation.
            </summary>
            <param name="unitAbbreviation">The string value.</param>
            <param name="unitType">Type of unit enum.</param>
            <param name="formatProvider">The format provider to use for lookup. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <param name="unit">The unit enum value as out result.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="T:UnitsNet.CustomCode.Wrappers.ReferencePressure">
            <summary>
                Pressure tied to a real-world reference, allowing conversion between references.
                <list type="bullet">
                    <item>
                        <description>Absolute is referenced to true vacuum.</description>
                    </item>
                    <item>
                        <description>Gauge references the local atmospheric pressure.</description>
                    </item>
                    <item>
                        <description>Vacuum is the negative of the gauge.</description>
                    </item>
                </list>
            </summary>
        </member>
        <member name="P:UnitsNet.CustomCode.Wrappers.ReferencePressure.AtmosphericPressure">
            <summary>
                Represents the pressure at which _pressure is referenced (1 atm default)
            </summary>
        </member>
        <member name="P:UnitsNet.CustomCode.Wrappers.ReferencePressure.References">
            <summary>
                Gets a list of <see cref="T:UnitsNet.CustomCode.Units.PressureReference" /> options: <see cref="F:UnitsNet.CustomCode.Units.PressureReference.Gauge" />,
                <see cref="F:UnitsNet.CustomCode.Units.PressureReference.Absolute" />, and <see cref="F:UnitsNet.CustomCode.Units.PressureReference.Vacuum" />
            </summary>
        </member>
        <member name="M:UnitsNet.CustomCode.Wrappers.ReferencePressure.#ctor(UnitsNet.Pressure)">
            <summary>
                Initializes a new instance of the <see cref="T:UnitsNet.CustomCode.Wrappers.ReferencePressure" /> struct requiring measured
                <see cref="T:UnitsNet.Pressure" />
                parameter. Assumes the <see cref="T:UnitsNet.CustomCode.Units.PressureReference" /> to <see cref="F:UnitsNet.CustomCode.Units.PressureReference.Absolute" />, with 1 atm as
                the atmospheric <see cref="T:UnitsNet.Pressure" />.
            </summary>
            <param name="pressure">The measured absolute <see cref="T:UnitsNet.Pressure" /></param>
        </member>
        <member name="M:UnitsNet.CustomCode.Wrappers.ReferencePressure.#ctor(UnitsNet.Pressure,UnitsNet.CustomCode.Units.PressureReference)">
            <summary>
                Initializes a new instance of the <see cref="T:UnitsNet.CustomCode.Wrappers.ReferencePressure" /> struct requiring
                measured <see cref="T:UnitsNet.Pressure" /> and <see cref="T:UnitsNet.CustomCode.Units.PressureReference" /> parameters. Assumes 1 atm as the atmospheric
                <see cref="T:UnitsNet.Pressure" />.
            </summary>
            <param name="pressure">The measured <see cref="T:UnitsNet.Pressure" /></param>
            <param name="reference">
                The referenced <see cref="T:UnitsNet.CustomCode.Units.PressureReference" /> for the measured <see cref="T:UnitsNet.Pressure" />
            </param>
        </member>
        <member name="M:UnitsNet.CustomCode.Wrappers.ReferencePressure.#ctor(UnitsNet.Pressure,UnitsNet.CustomCode.Units.PressureReference,UnitsNet.Pressure)">
            <summary>
                Initializes a new instance of the <see cref="T:UnitsNet.CustomCode.Wrappers.ReferencePressure" /> struct requiring
                measured <see cref="T:UnitsNet.Pressure" />, <see cref="T:UnitsNet.CustomCode.Units.PressureReference" />, and atmospheric <see cref="T:UnitsNet.Pressure" />
                parameters
            </summary>
            <param name="pressure">The measured <see cref="T:UnitsNet.Pressure" /></param>
            <param name="reference">
                The referenced <see cref="T:UnitsNet.CustomCode.Units.PressureReference" /> for the measured <see cref="T:UnitsNet.Pressure" />
            </param>
            <param name="atmosphericPressure">The atmospheric <see cref="T:UnitsNet.Pressure" /> where the measurement was taken.</param>
        </member>
        <member name="P:UnitsNet.CustomCode.Wrappers.ReferencePressure.Reference">
            <summary>
                Gets the <see cref="T:UnitsNet.CustomCode.Units.PressureReference" /> of the <see cref="T:UnitsNet.CustomCode.Wrappers.ReferencePressure" />
            </summary>
        </member>
        <member name="F:UnitsNet.CustomCode.Wrappers.ReferencePressure.BaseReference">
            <summary>
                The base reference representation of <see cref="T:UnitsNet.CustomCode.Wrappers.ReferencePressure" /> for the numeric value stored internally. All
                conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.CustomCode.Wrappers.ReferencePressure.Pressure">
            <summary>
            The <see cref="P:UnitsNet.CustomCode.Wrappers.ReferencePressure.Pressure"/> at the given <see cref="T:UnitsNet.CustomCode.Units.PressureReference"/>.
            </summary>
        </member>
        <member name="P:UnitsNet.CustomCode.Wrappers.ReferencePressure.Gauge">
            <summary>
                Get Gauge <see cref="T:UnitsNet.Pressure" />.
                It references pressure level above Atmospheric pressure.
            </summary>
        </member>
        <member name="P:UnitsNet.CustomCode.Wrappers.ReferencePressure.Absolute">
            <summary>
                Get Absolute <see cref="T:UnitsNet.Pressure" />.
                It is zero-referenced pressure to the perfect vacuum.
            </summary>
        </member>
        <member name="P:UnitsNet.CustomCode.Wrappers.ReferencePressure.Vacuum">
            <summary>
                Get Vacuum <see cref="T:UnitsNet.Pressure" />.
                It is a negative Gauge pressure when Absolute pressure is below Atmospheric pressure.
            </summary>
        </member>
        <member name="M:UnitsNet.CustomCode.Wrappers.ReferencePressure.As(UnitsNet.CustomCode.Units.PressureReference)">
            <summary>
                Converts <see cref="T:UnitsNet.CustomCode.Wrappers.ReferencePressure" /> to <see cref="T:UnitsNet.Pressure" /> at <see cref="T:UnitsNet.CustomCode.Units.PressureReference" />
            </summary>
            <param name="reference">The <see cref="T:UnitsNet.CustomCode.Units.PressureReference" /> to convert <see cref="T:UnitsNet.CustomCode.Wrappers.ReferencePressure" /> to.</param>
            <returns>The <see cref="T:UnitsNet.Pressure" /> at the specified <see cref="T:UnitsNet.CustomCode.Units.PressureReference" /></returns>
        </member>
        <member name="M:UnitsNet.CustomCode.Wrappers.ReferencePressure.AsBaseNumericType(UnitsNet.CustomCode.Units.PressureReference)">
            <summary>
                Converts <see cref="P:UnitsNet.Pressure.Value" /> to <see cref="T:System.Double" /> at <see cref="T:UnitsNet.CustomCode.Units.PressureReference" />
            </summary>
            <param name="reference">The <see cref="T:UnitsNet.CustomCode.Units.PressureReference" /> to convert <see cref="T:UnitsNet.CustomCode.Wrappers.ReferencePressure" /> to.</param>
            <returns>The value of pressure at <see cref="T:UnitsNet.CustomCode.Units.PressureReference" /></returns>
        </member>
        <member name="M:UnitsNet.CustomCode.Wrappers.ReferencePressure.AsBaseReference">
            <summary>
                Converts <see cref="P:UnitsNet.Pressure.Value" /> at <see cref="P:UnitsNet.CustomCode.Wrappers.ReferencePressure.Reference" /> to <see cref="T:System.Double" /> at
                <see cref="F:UnitsNet.CustomCode.Wrappers.ReferencePressure.BaseReference" />
            </summary>
            <returns>The value of pressure at the <see cref="F:UnitsNet.CustomCode.Wrappers.ReferencePressure.BaseReference" /></returns>
        </member>
        <member name="T:UnitsNet.ApparentEnergy">
            <inheritdoc />
            <summary>
                A unit for expressing the integral of apparent power over time, equal to the product of 1 volt-ampere and 1 hour, or to 3600 joules.
            </summary>
        </member>
        <member name="F:UnitsNet.ApparentEnergy._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ApparentEnergy._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.#ctor(System.Double,UnitsNet.Units.ApparentEnergyUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.ApparentEnergy" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ApparentEnergy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.BaseUnit">
            <summary>
                The base unit of ApparentEnergy, which is VoltampereHour. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.MaxValue">
            <summary>
            Represents the largest possible value of ApparentEnergy
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.MinValue">
            <summary>
            Represents the smallest possible value of ApparentEnergy
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ApparentEnergy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.Units">
            <summary>
                All units of measurement for the ApparentEnergy quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit VoltampereHour.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ApparentEnergy.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ApparentEnergy.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.Type">
            <summary>
                The <see cref="P:UnitsNet.ApparentEnergy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ApparentEnergy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.KilovoltampereHours">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ApparentEnergyUnit.KilovoltampereHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.MegavoltampereHours">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ApparentEnergyUnit.MegavoltampereHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.VoltampereHours">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ApparentEnergyUnit.VoltampereHour"/>
            </summary>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.GetAbbreviation(UnitsNet.Units.ApparentEnergyUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.GetAbbreviation(UnitsNet.Units.ApparentEnergyUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.FromKilovoltampereHours(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ApparentEnergy"/> from <see cref="F:UnitsNet.Units.ApparentEnergyUnit.KilovoltampereHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.FromMegavoltampereHours(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ApparentEnergy"/> from <see cref="F:UnitsNet.Units.ApparentEnergyUnit.MegavoltampereHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.FromVoltampereHours(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ApparentEnergy"/> from <see cref="F:UnitsNet.Units.ApparentEnergyUnit.VoltampereHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.From(UnitsNet.QuantityValue,UnitsNet.Units.ApparentEnergyUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ApparentEnergyUnit" /> to <see cref="T:UnitsNet.ApparentEnergy" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ApparentEnergy unit value.</returns>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.TryParse(System.String,UnitsNet.ApparentEnergy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.TryParse(System.String,System.IFormatProvider,UnitsNet.ApparentEnergy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.TryParseUnit(System.String,UnitsNet.Units.ApparentEnergyUnit@)">
            <inheritdoc cref="M:UnitsNet.ApparentEnergy.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ApparentEnergyUnit@)"/>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ApparentEnergyUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.op_UnaryNegation(UnitsNet.ApparentEnergy)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.op_Addition(UnitsNet.ApparentEnergy,UnitsNet.ApparentEnergy)">
            <summary>Get <see cref="T:UnitsNet.ApparentEnergy"/> from adding two <see cref="T:UnitsNet.ApparentEnergy"/>.</summary>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.op_Subtraction(UnitsNet.ApparentEnergy,UnitsNet.ApparentEnergy)">
            <summary>Get <see cref="T:UnitsNet.ApparentEnergy"/> from subtracting two <see cref="T:UnitsNet.ApparentEnergy"/>.</summary>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.op_Multiply(System.Double,UnitsNet.ApparentEnergy)">
            <summary>Get <see cref="T:UnitsNet.ApparentEnergy"/> from multiplying value and <see cref="T:UnitsNet.ApparentEnergy"/>.</summary>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.op_Multiply(UnitsNet.ApparentEnergy,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ApparentEnergy"/> from multiplying value and <see cref="T:UnitsNet.ApparentEnergy"/>.</summary>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.op_Division(UnitsNet.ApparentEnergy,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ApparentEnergy"/> from dividing <see cref="T:UnitsNet.ApparentEnergy"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.op_Division(UnitsNet.ApparentEnergy,UnitsNet.ApparentEnergy)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.ApparentEnergy"/> by <see cref="T:UnitsNet.ApparentEnergy"/>.</summary>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.op_LessThanOrEqual(UnitsNet.ApparentEnergy,UnitsNet.ApparentEnergy)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.op_GreaterThanOrEqual(UnitsNet.ApparentEnergy,UnitsNet.ApparentEnergy)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.op_LessThan(UnitsNet.ApparentEnergy,UnitsNet.ApparentEnergy)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.op_GreaterThan(UnitsNet.ApparentEnergy,UnitsNet.ApparentEnergy)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.op_Equality(UnitsNet.ApparentEnergy,UnitsNet.ApparentEnergy)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ApparentEnergy.Equals(UnitsNet.ApparentEnergy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.op_Inequality(UnitsNet.ApparentEnergy,UnitsNet.ApparentEnergy)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ApparentEnergy.Equals(UnitsNet.ApparentEnergy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ApparentEnergy.CompareTo(UnitsNet.ApparentEnergy)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ApparentEnergy.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ApparentEnergy.Equals(UnitsNet.ApparentEnergy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.Equals(UnitsNet.ApparentEnergy)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ApparentEnergy.Equals(UnitsNet.ApparentEnergy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.Equals(UnitsNet.ApparentEnergy,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ApparentEnergy within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ApparentEnergy.</returns>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.As(UnitsNet.Units.ApparentEnergyUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ApparentEnergy.ToUnit(UnitsNet.Units.ApparentEnergyUnit)">
            <summary>
                Converts this ApparentEnergy to another ApparentEnergy with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A ApparentEnergy with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.ToUnit(UnitsNet.Units.ApparentEnergyUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this ApparentEnergy to another ApparentEnergy using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A ApparentEnergy with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ApparentEnergy.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ApparentEnergy.UnitsNet#IQuantity{UnitsNet#Units#ApparentEnergyUnit}#ToUnit(UnitsNet.Units.ApparentEnergyUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ApparentEnergy.UnitsNet#IQuantity{UnitsNet#Units#ApparentEnergyUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ApparentEnergy.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.ApparentPower">
            <inheritdoc />
            <summary>
                Power engineers measure apparent power as the magnitude of the vector sum of active and reactive power. Apparent power is the product of the root-mean-square of voltage and current.
            </summary>
        </member>
        <member name="F:UnitsNet.ApparentPower._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ApparentPower._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ApparentPower.#ctor(System.Double,UnitsNet.Units.ApparentPowerUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ApparentPower.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.ApparentPower.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.ApparentPower" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentPower.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ApparentPower.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ApparentPower.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentPower.BaseUnit">
            <summary>
                The base unit of ApparentPower, which is Voltampere. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentPower.MaxValue">
            <summary>
            Represents the largest possible value of ApparentPower
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentPower.MinValue">
            <summary>
            Represents the smallest possible value of ApparentPower
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentPower.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ApparentPower.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentPower.Units">
            <summary>
                All units of measurement for the ApparentPower quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentPower.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Voltampere.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentPower.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentPower.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ApparentPower.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ApparentPower.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ApparentPower.Type">
            <summary>
                The <see cref="P:UnitsNet.ApparentPower.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentPower.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ApparentPower.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentPower.Gigavoltamperes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ApparentPowerUnit.Gigavoltampere"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentPower.Kilovoltamperes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ApparentPowerUnit.Kilovoltampere"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentPower.Megavoltamperes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ApparentPowerUnit.Megavoltampere"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentPower.Voltamperes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ApparentPowerUnit.Voltampere"/>
            </summary>
        </member>
        <member name="M:UnitsNet.ApparentPower.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.ApparentPower.GetAbbreviation(UnitsNet.Units.ApparentPowerUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ApparentPower.GetAbbreviation(UnitsNet.Units.ApparentPowerUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ApparentPower.FromGigavoltamperes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ApparentPower"/> from <see cref="F:UnitsNet.Units.ApparentPowerUnit.Gigavoltampere"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ApparentPower.FromKilovoltamperes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ApparentPower"/> from <see cref="F:UnitsNet.Units.ApparentPowerUnit.Kilovoltampere"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ApparentPower.FromMegavoltamperes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ApparentPower"/> from <see cref="F:UnitsNet.Units.ApparentPowerUnit.Megavoltampere"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ApparentPower.FromVoltamperes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ApparentPower"/> from <see cref="F:UnitsNet.Units.ApparentPowerUnit.Voltampere"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ApparentPower.From(UnitsNet.QuantityValue,UnitsNet.Units.ApparentPowerUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ApparentPowerUnit" /> to <see cref="T:UnitsNet.ApparentPower" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ApparentPower unit value.</returns>
        </member>
        <member name="M:UnitsNet.ApparentPower.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ApparentPower.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ApparentPower.TryParse(System.String,UnitsNet.ApparentPower@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ApparentPower.TryParse(System.String,System.IFormatProvider,UnitsNet.ApparentPower@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ApparentPower.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ApparentPower.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ApparentPower.TryParseUnit(System.String,UnitsNet.Units.ApparentPowerUnit@)">
            <inheritdoc cref="M:UnitsNet.ApparentPower.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ApparentPowerUnit@)"/>
        </member>
        <member name="M:UnitsNet.ApparentPower.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ApparentPowerUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ApparentPower.op_UnaryNegation(UnitsNet.ApparentPower)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.ApparentPower.op_Addition(UnitsNet.ApparentPower,UnitsNet.ApparentPower)">
            <summary>Get <see cref="T:UnitsNet.ApparentPower"/> from adding two <see cref="T:UnitsNet.ApparentPower"/>.</summary>
        </member>
        <member name="M:UnitsNet.ApparentPower.op_Subtraction(UnitsNet.ApparentPower,UnitsNet.ApparentPower)">
            <summary>Get <see cref="T:UnitsNet.ApparentPower"/> from subtracting two <see cref="T:UnitsNet.ApparentPower"/>.</summary>
        </member>
        <member name="M:UnitsNet.ApparentPower.op_Multiply(System.Double,UnitsNet.ApparentPower)">
            <summary>Get <see cref="T:UnitsNet.ApparentPower"/> from multiplying value and <see cref="T:UnitsNet.ApparentPower"/>.</summary>
        </member>
        <member name="M:UnitsNet.ApparentPower.op_Multiply(UnitsNet.ApparentPower,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ApparentPower"/> from multiplying value and <see cref="T:UnitsNet.ApparentPower"/>.</summary>
        </member>
        <member name="M:UnitsNet.ApparentPower.op_Division(UnitsNet.ApparentPower,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ApparentPower"/> from dividing <see cref="T:UnitsNet.ApparentPower"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.ApparentPower.op_Division(UnitsNet.ApparentPower,UnitsNet.ApparentPower)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.ApparentPower"/> by <see cref="T:UnitsNet.ApparentPower"/>.</summary>
        </member>
        <member name="M:UnitsNet.ApparentPower.op_LessThanOrEqual(UnitsNet.ApparentPower,UnitsNet.ApparentPower)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ApparentPower.op_GreaterThanOrEqual(UnitsNet.ApparentPower,UnitsNet.ApparentPower)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ApparentPower.op_LessThan(UnitsNet.ApparentPower,UnitsNet.ApparentPower)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.ApparentPower.op_GreaterThan(UnitsNet.ApparentPower,UnitsNet.ApparentPower)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.ApparentPower.op_Equality(UnitsNet.ApparentPower,UnitsNet.ApparentPower)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ApparentPower.Equals(UnitsNet.ApparentPower,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ApparentPower.op_Inequality(UnitsNet.ApparentPower,UnitsNet.ApparentPower)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ApparentPower.Equals(UnitsNet.ApparentPower,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ApparentPower.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ApparentPower.CompareTo(UnitsNet.ApparentPower)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ApparentPower.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ApparentPower.Equals(UnitsNet.ApparentPower,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ApparentPower.Equals(UnitsNet.ApparentPower)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ApparentPower.Equals(UnitsNet.ApparentPower,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ApparentPower.Equals(UnitsNet.ApparentPower,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ApparentPower within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ApparentPower.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ApparentPower.</returns>
        </member>
        <member name="M:UnitsNet.ApparentPower.As(UnitsNet.Units.ApparentPowerUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ApparentPower.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ApparentPower.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ApparentPower.ToUnit(UnitsNet.Units.ApparentPowerUnit)">
            <summary>
                Converts this ApparentPower to another ApparentPower with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A ApparentPower with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ApparentPower.ToUnit(UnitsNet.Units.ApparentPowerUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this ApparentPower to another ApparentPower using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A ApparentPower with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ApparentPower.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ApparentPower.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ApparentPower.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ApparentPower.UnitsNet#IQuantity{UnitsNet#Units#ApparentPowerUnit}#ToUnit(UnitsNet.Units.ApparentPowerUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ApparentPower.UnitsNet#IQuantity{UnitsNet#Units#ApparentPowerUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ApparentPower.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ApparentPower.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ApparentPower.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ApparentPower.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ApparentPower.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.ApparentPower.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.AreaDensity">
            <inheritdoc />
            <summary>
                The area density of a two-dimensional object is calculated as the mass per unit area.
            </summary>
        </member>
        <member name="F:UnitsNet.AreaDensity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.AreaDensity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.AreaDensity.#ctor(System.Double,UnitsNet.Units.AreaDensityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AreaDensity.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.AreaDensity.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.AreaDensity" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaDensity.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.AreaDensity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.AreaDensity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaDensity.BaseUnit">
            <summary>
                The base unit of AreaDensity, which is KilogramPerSquareMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaDensity.MaxValue">
            <summary>
            Represents the largest possible value of AreaDensity
            </summary>
        </member>
        <member name="P:UnitsNet.AreaDensity.MinValue">
            <summary>
            Represents the smallest possible value of AreaDensity
            </summary>
        </member>
        <member name="P:UnitsNet.AreaDensity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.AreaDensity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaDensity.Units">
            <summary>
                All units of measurement for the AreaDensity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaDensity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit KilogramPerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaDensity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaDensity.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.AreaDensity.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.AreaDensity.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.AreaDensity.Type">
            <summary>
                The <see cref="P:UnitsNet.AreaDensity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaDensity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.AreaDensity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaDensity.KilogramsPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.AreaDensityUnit.KilogramPerSquareMeter"/>
            </summary>
        </member>
        <member name="M:UnitsNet.AreaDensity.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.AreaDensity.GetAbbreviation(UnitsNet.Units.AreaDensityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.AreaDensity.GetAbbreviation(UnitsNet.Units.AreaDensityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.AreaDensity.FromKilogramsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.AreaDensity"/> from <see cref="F:UnitsNet.Units.AreaDensityUnit.KilogramPerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AreaDensity.From(UnitsNet.QuantityValue,UnitsNet.Units.AreaDensityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.AreaDensityUnit" /> to <see cref="T:UnitsNet.AreaDensity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>AreaDensity unit value.</returns>
        </member>
        <member name="M:UnitsNet.AreaDensity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.AreaDensity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.AreaDensity.TryParse(System.String,UnitsNet.AreaDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.AreaDensity.TryParse(System.String,System.IFormatProvider,UnitsNet.AreaDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.AreaDensity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.AreaDensity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.AreaDensity.TryParseUnit(System.String,UnitsNet.Units.AreaDensityUnit@)">
            <inheritdoc cref="M:UnitsNet.AreaDensity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.AreaDensityUnit@)"/>
        </member>
        <member name="M:UnitsNet.AreaDensity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.AreaDensityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.AreaDensity.op_UnaryNegation(UnitsNet.AreaDensity)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.AreaDensity.op_Addition(UnitsNet.AreaDensity,UnitsNet.AreaDensity)">
            <summary>Get <see cref="T:UnitsNet.AreaDensity"/> from adding two <see cref="T:UnitsNet.AreaDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.AreaDensity.op_Subtraction(UnitsNet.AreaDensity,UnitsNet.AreaDensity)">
            <summary>Get <see cref="T:UnitsNet.AreaDensity"/> from subtracting two <see cref="T:UnitsNet.AreaDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.AreaDensity.op_Multiply(System.Double,UnitsNet.AreaDensity)">
            <summary>Get <see cref="T:UnitsNet.AreaDensity"/> from multiplying value and <see cref="T:UnitsNet.AreaDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.AreaDensity.op_Multiply(UnitsNet.AreaDensity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.AreaDensity"/> from multiplying value and <see cref="T:UnitsNet.AreaDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.AreaDensity.op_Division(UnitsNet.AreaDensity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.AreaDensity"/> from dividing <see cref="T:UnitsNet.AreaDensity"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.AreaDensity.op_Division(UnitsNet.AreaDensity,UnitsNet.AreaDensity)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.AreaDensity"/> by <see cref="T:UnitsNet.AreaDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.AreaDensity.op_LessThanOrEqual(UnitsNet.AreaDensity,UnitsNet.AreaDensity)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.AreaDensity.op_GreaterThanOrEqual(UnitsNet.AreaDensity,UnitsNet.AreaDensity)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.AreaDensity.op_LessThan(UnitsNet.AreaDensity,UnitsNet.AreaDensity)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.AreaDensity.op_GreaterThan(UnitsNet.AreaDensity,UnitsNet.AreaDensity)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.AreaDensity.op_Equality(UnitsNet.AreaDensity,UnitsNet.AreaDensity)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.AreaDensity.Equals(UnitsNet.AreaDensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.AreaDensity.op_Inequality(UnitsNet.AreaDensity,UnitsNet.AreaDensity)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.AreaDensity.Equals(UnitsNet.AreaDensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.AreaDensity.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AreaDensity.CompareTo(UnitsNet.AreaDensity)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AreaDensity.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.AreaDensity.Equals(UnitsNet.AreaDensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.AreaDensity.Equals(UnitsNet.AreaDensity)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.AreaDensity.Equals(UnitsNet.AreaDensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.AreaDensity.Equals(UnitsNet.AreaDensity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another AreaDensity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.AreaDensity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current AreaDensity.</returns>
        </member>
        <member name="M:UnitsNet.AreaDensity.As(UnitsNet.Units.AreaDensityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.AreaDensity.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.AreaDensity.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AreaDensity.ToUnit(UnitsNet.Units.AreaDensityUnit)">
            <summary>
                Converts this AreaDensity to another AreaDensity with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A AreaDensity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.AreaDensity.ToUnit(UnitsNet.Units.AreaDensityUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this AreaDensity to another AreaDensity using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A AreaDensity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.AreaDensity.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AreaDensity.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.AreaDensity.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AreaDensity.UnitsNet#IQuantity{UnitsNet#Units#AreaDensityUnit}#ToUnit(UnitsNet.Units.AreaDensityUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AreaDensity.UnitsNet#IQuantity{UnitsNet#Units#AreaDensityUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AreaDensity.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.AreaDensity.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.AreaDensity.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.AreaDensity.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.AreaDensity.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.AreaDensity.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.BitRate">
            <inheritdoc />
            <summary>
                In telecommunications and computing, bit rate is the number of bits that are conveyed or processed per unit of time.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Bit_rate
            </remarks>
        </member>
        <member name="F:UnitsNet.BitRate._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.BitRate._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.BitRate.#ctor(System.Decimal,UnitsNet.Units.BitRateUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.#ctor(System.Decimal,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.BitRate.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.BitRate" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.BitRate.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.BitRate.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.BaseUnit">
            <summary>
                The base unit of BitRate, which is BitPerSecond. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.MaxValue">
            <summary>
            Represents the largest possible value of BitRate
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.MinValue">
            <summary>
            Represents the smallest possible value of BitRate
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.BitRate.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.Units">
            <summary>
                All units of measurement for the BitRate quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit BitPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.UnitsNet#IDecimalQuantity#Value">
            <inheritdoc cref="P:UnitsNet.IDecimalQuantity.Value"/>
        </member>
        <member name="P:UnitsNet.BitRate.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.BitRate.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.BitRate.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.BitRate.Type">
            <summary>
                The <see cref="P:UnitsNet.BitRate.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.BitRate.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.BitsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BitRateUnit.BitPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.BytesPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BitRateUnit.BytePerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.ExabitsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BitRateUnit.ExabitPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.ExabytesPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BitRateUnit.ExabytePerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.ExbibitsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BitRateUnit.ExbibitPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.ExbibytesPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BitRateUnit.ExbibytePerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.GibibitsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BitRateUnit.GibibitPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.GibibytesPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BitRateUnit.GibibytePerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.GigabitsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BitRateUnit.GigabitPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.GigabytesPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BitRateUnit.GigabytePerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.KibibitsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BitRateUnit.KibibitPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.KibibytesPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BitRateUnit.KibibytePerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.KilobitsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BitRateUnit.KilobitPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.KilobytesPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BitRateUnit.KilobytePerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.MebibitsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BitRateUnit.MebibitPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.MebibytesPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BitRateUnit.MebibytePerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.MegabitsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BitRateUnit.MegabitPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.MegabytesPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BitRateUnit.MegabytePerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.PebibitsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BitRateUnit.PebibitPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.PebibytesPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BitRateUnit.PebibytePerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.PetabitsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BitRateUnit.PetabitPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.PetabytesPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BitRateUnit.PetabytePerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.TebibitsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BitRateUnit.TebibitPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.TebibytesPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BitRateUnit.TebibytePerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.TerabitsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BitRateUnit.TerabitPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.TerabytesPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.BitRateUnit.TerabytePerSecond"/>
            </summary>
        </member>
        <member name="M:UnitsNet.BitRate.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.BitRate.GetAbbreviation(UnitsNet.Units.BitRateUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.BitRate.GetAbbreviation(UnitsNet.Units.BitRateUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.BitRate.FromBitsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BitRate"/> from <see cref="F:UnitsNet.Units.BitRateUnit.BitPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromBytesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BitRate"/> from <see cref="F:UnitsNet.Units.BitRateUnit.BytePerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromExabitsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BitRate"/> from <see cref="F:UnitsNet.Units.BitRateUnit.ExabitPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromExabytesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BitRate"/> from <see cref="F:UnitsNet.Units.BitRateUnit.ExabytePerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromExbibitsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BitRate"/> from <see cref="F:UnitsNet.Units.BitRateUnit.ExbibitPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromExbibytesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BitRate"/> from <see cref="F:UnitsNet.Units.BitRateUnit.ExbibytePerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromGibibitsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BitRate"/> from <see cref="F:UnitsNet.Units.BitRateUnit.GibibitPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromGibibytesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BitRate"/> from <see cref="F:UnitsNet.Units.BitRateUnit.GibibytePerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromGigabitsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BitRate"/> from <see cref="F:UnitsNet.Units.BitRateUnit.GigabitPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromGigabytesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BitRate"/> from <see cref="F:UnitsNet.Units.BitRateUnit.GigabytePerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromKibibitsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BitRate"/> from <see cref="F:UnitsNet.Units.BitRateUnit.KibibitPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromKibibytesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BitRate"/> from <see cref="F:UnitsNet.Units.BitRateUnit.KibibytePerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromKilobitsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BitRate"/> from <see cref="F:UnitsNet.Units.BitRateUnit.KilobitPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromKilobytesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BitRate"/> from <see cref="F:UnitsNet.Units.BitRateUnit.KilobytePerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromMebibitsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BitRate"/> from <see cref="F:UnitsNet.Units.BitRateUnit.MebibitPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromMebibytesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BitRate"/> from <see cref="F:UnitsNet.Units.BitRateUnit.MebibytePerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromMegabitsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BitRate"/> from <see cref="F:UnitsNet.Units.BitRateUnit.MegabitPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromMegabytesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BitRate"/> from <see cref="F:UnitsNet.Units.BitRateUnit.MegabytePerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromPebibitsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BitRate"/> from <see cref="F:UnitsNet.Units.BitRateUnit.PebibitPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromPebibytesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BitRate"/> from <see cref="F:UnitsNet.Units.BitRateUnit.PebibytePerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromPetabitsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BitRate"/> from <see cref="F:UnitsNet.Units.BitRateUnit.PetabitPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromPetabytesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BitRate"/> from <see cref="F:UnitsNet.Units.BitRateUnit.PetabytePerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromTebibitsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BitRate"/> from <see cref="F:UnitsNet.Units.BitRateUnit.TebibitPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromTebibytesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BitRate"/> from <see cref="F:UnitsNet.Units.BitRateUnit.TebibytePerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromTerabitsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BitRate"/> from <see cref="F:UnitsNet.Units.BitRateUnit.TerabitPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromTerabytesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.BitRate"/> from <see cref="F:UnitsNet.Units.BitRateUnit.TerabytePerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.From(UnitsNet.QuantityValue,UnitsNet.Units.BitRateUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.BitRateUnit" /> to <see cref="T:UnitsNet.BitRate" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>BitRate unit value.</returns>
        </member>
        <member name="M:UnitsNet.BitRate.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.BitRate.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.BitRate.TryParse(System.String,UnitsNet.BitRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.BitRate.TryParse(System.String,System.IFormatProvider,UnitsNet.BitRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.BitRate.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.TryParseUnit(System.String,UnitsNet.Units.BitRateUnit@)">
            <inheritdoc cref="M:UnitsNet.BitRate.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.BitRateUnit@)"/>
        </member>
        <member name="M:UnitsNet.BitRate.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.BitRateUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.BitRate.op_UnaryNegation(UnitsNet.BitRate)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.BitRate.op_Addition(UnitsNet.BitRate,UnitsNet.BitRate)">
            <summary>Get <see cref="T:UnitsNet.BitRate"/> from adding two <see cref="T:UnitsNet.BitRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.BitRate.op_Subtraction(UnitsNet.BitRate,UnitsNet.BitRate)">
            <summary>Get <see cref="T:UnitsNet.BitRate"/> from subtracting two <see cref="T:UnitsNet.BitRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.BitRate.op_Multiply(System.Decimal,UnitsNet.BitRate)">
            <summary>Get <see cref="T:UnitsNet.BitRate"/> from multiplying value and <see cref="T:UnitsNet.BitRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.BitRate.op_Multiply(UnitsNet.BitRate,System.Decimal)">
            <summary>Get <see cref="T:UnitsNet.BitRate"/> from multiplying value and <see cref="T:UnitsNet.BitRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.BitRate.op_Division(UnitsNet.BitRate,System.Decimal)">
            <summary>Get <see cref="T:UnitsNet.BitRate"/> from dividing <see cref="T:UnitsNet.BitRate"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.BitRate.op_Division(UnitsNet.BitRate,UnitsNet.BitRate)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.BitRate"/> by <see cref="T:UnitsNet.BitRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.BitRate.op_LessThanOrEqual(UnitsNet.BitRate,UnitsNet.BitRate)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.BitRate.op_GreaterThanOrEqual(UnitsNet.BitRate,UnitsNet.BitRate)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.BitRate.op_LessThan(UnitsNet.BitRate,UnitsNet.BitRate)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.BitRate.op_GreaterThan(UnitsNet.BitRate,UnitsNet.BitRate)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.BitRate.op_Equality(UnitsNet.BitRate,UnitsNet.BitRate)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.BitRate.Equals(UnitsNet.BitRate,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.BitRate.op_Inequality(UnitsNet.BitRate,UnitsNet.BitRate)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.BitRate.Equals(UnitsNet.BitRate,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.BitRate.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.BitRate.CompareTo(UnitsNet.BitRate)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.BitRate.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.BitRate.Equals(UnitsNet.BitRate,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.BitRate.Equals(UnitsNet.BitRate)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.BitRate.Equals(UnitsNet.BitRate,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.BitRate.Equals(UnitsNet.BitRate,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another BitRate within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.BitRate.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current BitRate.</returns>
        </member>
        <member name="M:UnitsNet.BitRate.As(UnitsNet.Units.BitRateUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.BitRate.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.BitRate.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.BitRate.ToUnit(UnitsNet.Units.BitRateUnit)">
            <summary>
                Converts this BitRate to another BitRate with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A BitRate with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.BitRate.ToUnit(UnitsNet.Units.BitRateUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this BitRate to another BitRate using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A BitRate with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.BitRate.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.BitRate.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.BitRate.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.BitRate.UnitsNet#IQuantity{UnitsNet#Units#BitRateUnit}#ToUnit(UnitsNet.Units.BitRateUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.BitRate.UnitsNet#IQuantity{UnitsNet#Units#BitRateUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.BitRate.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.BitRate.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.BitRate.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.BitRate.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.BitRate.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.BitRate.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Capacitance">
            <inheritdoc />
            <summary>
                Capacitance is the ability of a body to store an electric charge.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Capacitance
            </remarks>
        </member>
        <member name="F:UnitsNet.Capacitance._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Capacitance._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Capacitance.#ctor(System.Double,UnitsNet.Units.CapacitanceUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Capacitance.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Capacitance.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Capacitance" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Capacitance.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Capacitance.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Capacitance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Capacitance.BaseUnit">
            <summary>
                The base unit of Capacitance, which is Farad. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Capacitance.MaxValue">
            <summary>
            Represents the largest possible value of Capacitance
            </summary>
        </member>
        <member name="P:UnitsNet.Capacitance.MinValue">
            <summary>
            Represents the smallest possible value of Capacitance
            </summary>
        </member>
        <member name="P:UnitsNet.Capacitance.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Capacitance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Capacitance.Units">
            <summary>
                All units of measurement for the Capacitance quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Capacitance.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Farad.
            </summary>
        </member>
        <member name="P:UnitsNet.Capacitance.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Capacitance.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Capacitance.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Capacitance.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Capacitance.Type">
            <summary>
                The <see cref="P:UnitsNet.Capacitance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Capacitance.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Capacitance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Capacitance.Farads">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.CapacitanceUnit.Farad"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Capacitance.Kilofarads">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.CapacitanceUnit.Kilofarad"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Capacitance.Megafarads">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.CapacitanceUnit.Megafarad"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Capacitance.Microfarads">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.CapacitanceUnit.Microfarad"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Capacitance.Millifarads">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.CapacitanceUnit.Millifarad"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Capacitance.Nanofarads">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.CapacitanceUnit.Nanofarad"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Capacitance.Picofarads">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.CapacitanceUnit.Picofarad"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Capacitance.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Capacitance.GetAbbreviation(UnitsNet.Units.CapacitanceUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Capacitance.GetAbbreviation(UnitsNet.Units.CapacitanceUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Capacitance.FromFarads(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Capacitance"/> from <see cref="F:UnitsNet.Units.CapacitanceUnit.Farad"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Capacitance.FromKilofarads(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Capacitance"/> from <see cref="F:UnitsNet.Units.CapacitanceUnit.Kilofarad"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Capacitance.FromMegafarads(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Capacitance"/> from <see cref="F:UnitsNet.Units.CapacitanceUnit.Megafarad"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Capacitance.FromMicrofarads(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Capacitance"/> from <see cref="F:UnitsNet.Units.CapacitanceUnit.Microfarad"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Capacitance.FromMillifarads(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Capacitance"/> from <see cref="F:UnitsNet.Units.CapacitanceUnit.Millifarad"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Capacitance.FromNanofarads(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Capacitance"/> from <see cref="F:UnitsNet.Units.CapacitanceUnit.Nanofarad"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Capacitance.FromPicofarads(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Capacitance"/> from <see cref="F:UnitsNet.Units.CapacitanceUnit.Picofarad"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Capacitance.From(UnitsNet.QuantityValue,UnitsNet.Units.CapacitanceUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.CapacitanceUnit" /> to <see cref="T:UnitsNet.Capacitance" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Capacitance unit value.</returns>
        </member>
        <member name="M:UnitsNet.Capacitance.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Capacitance.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Capacitance.TryParse(System.String,UnitsNet.Capacitance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Capacitance.TryParse(System.String,System.IFormatProvider,UnitsNet.Capacitance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Capacitance.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Capacitance.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Capacitance.TryParseUnit(System.String,UnitsNet.Units.CapacitanceUnit@)">
            <inheritdoc cref="M:UnitsNet.Capacitance.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.CapacitanceUnit@)"/>
        </member>
        <member name="M:UnitsNet.Capacitance.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.CapacitanceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Capacitance.op_UnaryNegation(UnitsNet.Capacitance)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Capacitance.op_Addition(UnitsNet.Capacitance,UnitsNet.Capacitance)">
            <summary>Get <see cref="T:UnitsNet.Capacitance"/> from adding two <see cref="T:UnitsNet.Capacitance"/>.</summary>
        </member>
        <member name="M:UnitsNet.Capacitance.op_Subtraction(UnitsNet.Capacitance,UnitsNet.Capacitance)">
            <summary>Get <see cref="T:UnitsNet.Capacitance"/> from subtracting two <see cref="T:UnitsNet.Capacitance"/>.</summary>
        </member>
        <member name="M:UnitsNet.Capacitance.op_Multiply(System.Double,UnitsNet.Capacitance)">
            <summary>Get <see cref="T:UnitsNet.Capacitance"/> from multiplying value and <see cref="T:UnitsNet.Capacitance"/>.</summary>
        </member>
        <member name="M:UnitsNet.Capacitance.op_Multiply(UnitsNet.Capacitance,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Capacitance"/> from multiplying value and <see cref="T:UnitsNet.Capacitance"/>.</summary>
        </member>
        <member name="M:UnitsNet.Capacitance.op_Division(UnitsNet.Capacitance,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Capacitance"/> from dividing <see cref="T:UnitsNet.Capacitance"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Capacitance.op_Division(UnitsNet.Capacitance,UnitsNet.Capacitance)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Capacitance"/> by <see cref="T:UnitsNet.Capacitance"/>.</summary>
        </member>
        <member name="M:UnitsNet.Capacitance.op_LessThanOrEqual(UnitsNet.Capacitance,UnitsNet.Capacitance)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Capacitance.op_GreaterThanOrEqual(UnitsNet.Capacitance,UnitsNet.Capacitance)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Capacitance.op_LessThan(UnitsNet.Capacitance,UnitsNet.Capacitance)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Capacitance.op_GreaterThan(UnitsNet.Capacitance,UnitsNet.Capacitance)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Capacitance.op_Equality(UnitsNet.Capacitance,UnitsNet.Capacitance)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Capacitance.Equals(UnitsNet.Capacitance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Capacitance.op_Inequality(UnitsNet.Capacitance,UnitsNet.Capacitance)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Capacitance.Equals(UnitsNet.Capacitance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Capacitance.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Capacitance.CompareTo(UnitsNet.Capacitance)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Capacitance.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Capacitance.Equals(UnitsNet.Capacitance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Capacitance.Equals(UnitsNet.Capacitance)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Capacitance.Equals(UnitsNet.Capacitance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Capacitance.Equals(UnitsNet.Capacitance,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Capacitance within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Capacitance.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Capacitance.</returns>
        </member>
        <member name="M:UnitsNet.Capacitance.As(UnitsNet.Units.CapacitanceUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Capacitance.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Capacitance.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Capacitance.ToUnit(UnitsNet.Units.CapacitanceUnit)">
            <summary>
                Converts this Capacitance to another Capacitance with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Capacitance with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Capacitance.ToUnit(UnitsNet.Units.CapacitanceUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Capacitance to another Capacitance using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Capacitance with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Capacitance.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Capacitance.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Capacitance.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Capacitance.UnitsNet#IQuantity{UnitsNet#Units#CapacitanceUnit}#ToUnit(UnitsNet.Units.CapacitanceUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Capacitance.UnitsNet#IQuantity{UnitsNet#Units#CapacitanceUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Capacitance.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Capacitance.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Capacitance.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Capacitance.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Capacitance.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Capacitance.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.CoefficientOfThermalExpansion">
            <inheritdoc />
            <summary>
                A unit that represents a fractional change in size in response to a change in temperature.
            </summary>
        </member>
        <member name="F:UnitsNet.CoefficientOfThermalExpansion._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.CoefficientOfThermalExpansion._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.#ctor(System.Double,UnitsNet.Units.CoefficientOfThermalExpansionUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.CoefficientOfThermalExpansion.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.CoefficientOfThermalExpansion" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.CoefficientOfThermalExpansion.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.CoefficientOfThermalExpansion.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.CoefficientOfThermalExpansion.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.CoefficientOfThermalExpansion.BaseUnit">
            <summary>
                The base unit of CoefficientOfThermalExpansion, which is InverseKelvin. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.CoefficientOfThermalExpansion.MaxValue">
            <summary>
            Represents the largest possible value of CoefficientOfThermalExpansion
            </summary>
        </member>
        <member name="P:UnitsNet.CoefficientOfThermalExpansion.MinValue">
            <summary>
            Represents the smallest possible value of CoefficientOfThermalExpansion
            </summary>
        </member>
        <member name="P:UnitsNet.CoefficientOfThermalExpansion.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.CoefficientOfThermalExpansion.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.CoefficientOfThermalExpansion.Units">
            <summary>
                All units of measurement for the CoefficientOfThermalExpansion quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.CoefficientOfThermalExpansion.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit InverseKelvin.
            </summary>
        </member>
        <member name="P:UnitsNet.CoefficientOfThermalExpansion.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.CoefficientOfThermalExpansion.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.CoefficientOfThermalExpansion.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.CoefficientOfThermalExpansion.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.CoefficientOfThermalExpansion.Type">
            <summary>
                The <see cref="P:UnitsNet.CoefficientOfThermalExpansion.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.CoefficientOfThermalExpansion.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.CoefficientOfThermalExpansion.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.CoefficientOfThermalExpansion.InverseDegreeCelsius">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.CoefficientOfThermalExpansionUnit.InverseDegreeCelsius"/>
            </summary>
        </member>
        <member name="P:UnitsNet.CoefficientOfThermalExpansion.InverseDegreeFahrenheit">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.CoefficientOfThermalExpansionUnit.InverseDegreeFahrenheit"/>
            </summary>
        </member>
        <member name="P:UnitsNet.CoefficientOfThermalExpansion.InverseKelvin">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.CoefficientOfThermalExpansionUnit.InverseKelvin"/>
            </summary>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.GetAbbreviation(UnitsNet.Units.CoefficientOfThermalExpansionUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.GetAbbreviation(UnitsNet.Units.CoefficientOfThermalExpansionUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.FromInverseDegreeCelsius(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.CoefficientOfThermalExpansion"/> from <see cref="F:UnitsNet.Units.CoefficientOfThermalExpansionUnit.InverseDegreeCelsius"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.FromInverseDegreeFahrenheit(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.CoefficientOfThermalExpansion"/> from <see cref="F:UnitsNet.Units.CoefficientOfThermalExpansionUnit.InverseDegreeFahrenheit"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.FromInverseKelvin(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.CoefficientOfThermalExpansion"/> from <see cref="F:UnitsNet.Units.CoefficientOfThermalExpansionUnit.InverseKelvin"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.From(UnitsNet.QuantityValue,UnitsNet.Units.CoefficientOfThermalExpansionUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.CoefficientOfThermalExpansionUnit" /> to <see cref="T:UnitsNet.CoefficientOfThermalExpansion" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>CoefficientOfThermalExpansion unit value.</returns>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.TryParse(System.String,UnitsNet.CoefficientOfThermalExpansion@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.TryParse(System.String,System.IFormatProvider,UnitsNet.CoefficientOfThermalExpansion@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.TryParseUnit(System.String,UnitsNet.Units.CoefficientOfThermalExpansionUnit@)">
            <inheritdoc cref="M:UnitsNet.CoefficientOfThermalExpansion.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.CoefficientOfThermalExpansionUnit@)"/>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.CoefficientOfThermalExpansionUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.op_UnaryNegation(UnitsNet.CoefficientOfThermalExpansion)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.op_Addition(UnitsNet.CoefficientOfThermalExpansion,UnitsNet.CoefficientOfThermalExpansion)">
            <summary>Get <see cref="T:UnitsNet.CoefficientOfThermalExpansion"/> from adding two <see cref="T:UnitsNet.CoefficientOfThermalExpansion"/>.</summary>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.op_Subtraction(UnitsNet.CoefficientOfThermalExpansion,UnitsNet.CoefficientOfThermalExpansion)">
            <summary>Get <see cref="T:UnitsNet.CoefficientOfThermalExpansion"/> from subtracting two <see cref="T:UnitsNet.CoefficientOfThermalExpansion"/>.</summary>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.op_Multiply(System.Double,UnitsNet.CoefficientOfThermalExpansion)">
            <summary>Get <see cref="T:UnitsNet.CoefficientOfThermalExpansion"/> from multiplying value and <see cref="T:UnitsNet.CoefficientOfThermalExpansion"/>.</summary>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.op_Multiply(UnitsNet.CoefficientOfThermalExpansion,System.Double)">
            <summary>Get <see cref="T:UnitsNet.CoefficientOfThermalExpansion"/> from multiplying value and <see cref="T:UnitsNet.CoefficientOfThermalExpansion"/>.</summary>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.op_Division(UnitsNet.CoefficientOfThermalExpansion,System.Double)">
            <summary>Get <see cref="T:UnitsNet.CoefficientOfThermalExpansion"/> from dividing <see cref="T:UnitsNet.CoefficientOfThermalExpansion"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.op_Division(UnitsNet.CoefficientOfThermalExpansion,UnitsNet.CoefficientOfThermalExpansion)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.CoefficientOfThermalExpansion"/> by <see cref="T:UnitsNet.CoefficientOfThermalExpansion"/>.</summary>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.op_LessThanOrEqual(UnitsNet.CoefficientOfThermalExpansion,UnitsNet.CoefficientOfThermalExpansion)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.op_GreaterThanOrEqual(UnitsNet.CoefficientOfThermalExpansion,UnitsNet.CoefficientOfThermalExpansion)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.op_LessThan(UnitsNet.CoefficientOfThermalExpansion,UnitsNet.CoefficientOfThermalExpansion)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.op_GreaterThan(UnitsNet.CoefficientOfThermalExpansion,UnitsNet.CoefficientOfThermalExpansion)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.op_Equality(UnitsNet.CoefficientOfThermalExpansion,UnitsNet.CoefficientOfThermalExpansion)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.CoefficientOfThermalExpansion.Equals(UnitsNet.CoefficientOfThermalExpansion,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.op_Inequality(UnitsNet.CoefficientOfThermalExpansion,UnitsNet.CoefficientOfThermalExpansion)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.CoefficientOfThermalExpansion.Equals(UnitsNet.CoefficientOfThermalExpansion,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.CompareTo(UnitsNet.CoefficientOfThermalExpansion)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.CoefficientOfThermalExpansion.Equals(UnitsNet.CoefficientOfThermalExpansion,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.Equals(UnitsNet.CoefficientOfThermalExpansion)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.CoefficientOfThermalExpansion.Equals(UnitsNet.CoefficientOfThermalExpansion,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.Equals(UnitsNet.CoefficientOfThermalExpansion,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another CoefficientOfThermalExpansion within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current CoefficientOfThermalExpansion.</returns>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.As(UnitsNet.Units.CoefficientOfThermalExpansionUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.ToUnit(UnitsNet.Units.CoefficientOfThermalExpansionUnit)">
            <summary>
                Converts this CoefficientOfThermalExpansion to another CoefficientOfThermalExpansion with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A CoefficientOfThermalExpansion with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.ToUnit(UnitsNet.Units.CoefficientOfThermalExpansionUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this CoefficientOfThermalExpansion to another CoefficientOfThermalExpansion using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A CoefficientOfThermalExpansion with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.UnitsNet#IQuantity{UnitsNet#Units#CoefficientOfThermalExpansionUnit}#ToUnit(UnitsNet.Units.CoefficientOfThermalExpansionUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.UnitsNet#IQuantity{UnitsNet#Units#CoefficientOfThermalExpansionUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.CoefficientOfThermalExpansion.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.ElectricAdmittance">
            <inheritdoc />
            <summary>
                Electric admittance is a measure of how easily a circuit or device will allow a current to flow. It is defined as the inverse of impedance. The SI unit of admittance is the siemens (symbol S).
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricAdmittance._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricAdmittance._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.#ctor(System.Double,UnitsNet.Units.ElectricAdmittanceUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.ElectricAdmittance" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricAdmittance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.BaseUnit">
            <summary>
                The base unit of ElectricAdmittance, which is Siemens. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.MaxValue">
            <summary>
            Represents the largest possible value of ElectricAdmittance
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.MinValue">
            <summary>
            Represents the smallest possible value of ElectricAdmittance
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricAdmittance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.Units">
            <summary>
                All units of measurement for the ElectricAdmittance quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Siemens.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricAdmittance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricAdmittance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.Microsiemens">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricAdmittanceUnit.Microsiemens"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.Millisiemens">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricAdmittanceUnit.Millisiemens"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.Nanosiemens">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricAdmittanceUnit.Nanosiemens"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.Siemens">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricAdmittanceUnit.Siemens"/>
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.GetAbbreviation(UnitsNet.Units.ElectricAdmittanceUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.GetAbbreviation(UnitsNet.Units.ElectricAdmittanceUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.FromMicrosiemens(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricAdmittance"/> from <see cref="F:UnitsNet.Units.ElectricAdmittanceUnit.Microsiemens"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.FromMillisiemens(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricAdmittance"/> from <see cref="F:UnitsNet.Units.ElectricAdmittanceUnit.Millisiemens"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.FromNanosiemens(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricAdmittance"/> from <see cref="F:UnitsNet.Units.ElectricAdmittanceUnit.Nanosiemens"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.FromSiemens(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricAdmittance"/> from <see cref="F:UnitsNet.Units.ElectricAdmittanceUnit.Siemens"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricAdmittanceUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricAdmittanceUnit" /> to <see cref="T:UnitsNet.ElectricAdmittance" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricAdmittance unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.TryParse(System.String,UnitsNet.ElectricAdmittance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricAdmittance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.TryParseUnit(System.String,UnitsNet.Units.ElectricAdmittanceUnit@)">
            <inheritdoc cref="M:UnitsNet.ElectricAdmittance.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricAdmittanceUnit@)"/>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricAdmittanceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.op_UnaryNegation(UnitsNet.ElectricAdmittance)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.op_Addition(UnitsNet.ElectricAdmittance,UnitsNet.ElectricAdmittance)">
            <summary>Get <see cref="T:UnitsNet.ElectricAdmittance"/> from adding two <see cref="T:UnitsNet.ElectricAdmittance"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.op_Subtraction(UnitsNet.ElectricAdmittance,UnitsNet.ElectricAdmittance)">
            <summary>Get <see cref="T:UnitsNet.ElectricAdmittance"/> from subtracting two <see cref="T:UnitsNet.ElectricAdmittance"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.op_Multiply(System.Double,UnitsNet.ElectricAdmittance)">
            <summary>Get <see cref="T:UnitsNet.ElectricAdmittance"/> from multiplying value and <see cref="T:UnitsNet.ElectricAdmittance"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.op_Multiply(UnitsNet.ElectricAdmittance,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricAdmittance"/> from multiplying value and <see cref="T:UnitsNet.ElectricAdmittance"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.op_Division(UnitsNet.ElectricAdmittance,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricAdmittance"/> from dividing <see cref="T:UnitsNet.ElectricAdmittance"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.op_Division(UnitsNet.ElectricAdmittance,UnitsNet.ElectricAdmittance)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.ElectricAdmittance"/> by <see cref="T:UnitsNet.ElectricAdmittance"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.op_LessThanOrEqual(UnitsNet.ElectricAdmittance,UnitsNet.ElectricAdmittance)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.op_GreaterThanOrEqual(UnitsNet.ElectricAdmittance,UnitsNet.ElectricAdmittance)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.op_LessThan(UnitsNet.ElectricAdmittance,UnitsNet.ElectricAdmittance)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.op_GreaterThan(UnitsNet.ElectricAdmittance,UnitsNet.ElectricAdmittance)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.op_Equality(UnitsNet.ElectricAdmittance,UnitsNet.ElectricAdmittance)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricAdmittance.Equals(UnitsNet.ElectricAdmittance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.op_Inequality(UnitsNet.ElectricAdmittance,UnitsNet.ElectricAdmittance)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricAdmittance.Equals(UnitsNet.ElectricAdmittance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.CompareTo(UnitsNet.ElectricAdmittance)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricAdmittance.Equals(UnitsNet.ElectricAdmittance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.Equals(UnitsNet.ElectricAdmittance)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricAdmittance.Equals(UnitsNet.ElectricAdmittance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.Equals(UnitsNet.ElectricAdmittance,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricAdmittance within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricAdmittance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.As(UnitsNet.Units.ElectricAdmittanceUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.ToUnit(UnitsNet.Units.ElectricAdmittanceUnit)">
            <summary>
                Converts this ElectricAdmittance to another ElectricAdmittance with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A ElectricAdmittance with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.ToUnit(UnitsNet.Units.ElectricAdmittanceUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this ElectricAdmittance to another ElectricAdmittance using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A ElectricAdmittance with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.UnitsNet#IQuantity{UnitsNet#Units#ElectricAdmittanceUnit}#ToUnit(UnitsNet.Units.ElectricAdmittanceUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.UnitsNet#IQuantity{UnitsNet#Units#ElectricAdmittanceUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.ElectricChargeDensity">
            <inheritdoc />
            <summary>
                In electromagnetism, charge density is a measure of the amount of electric charge per volume.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Charge_density
            </remarks>
        </member>
        <member name="F:UnitsNet.ElectricChargeDensity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricChargeDensity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.#ctor(System.Double,UnitsNet.Units.ElectricChargeDensityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.ElectricChargeDensity.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.ElectricChargeDensity" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricChargeDensity.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricChargeDensity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricChargeDensity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricChargeDensity.BaseUnit">
            <summary>
                The base unit of ElectricChargeDensity, which is CoulombPerCubicMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricChargeDensity.MaxValue">
            <summary>
            Represents the largest possible value of ElectricChargeDensity
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricChargeDensity.MinValue">
            <summary>
            Represents the smallest possible value of ElectricChargeDensity
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricChargeDensity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricChargeDensity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricChargeDensity.Units">
            <summary>
                All units of measurement for the ElectricChargeDensity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricChargeDensity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit CoulombPerCubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricChargeDensity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricChargeDensity.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricChargeDensity.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricChargeDensity.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricChargeDensity.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricChargeDensity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricChargeDensity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricChargeDensity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricChargeDensity.CoulombsPerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricChargeDensityUnit.CoulombPerCubicMeter"/>
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.GetAbbreviation(UnitsNet.Units.ElectricChargeDensityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.GetAbbreviation(UnitsNet.Units.ElectricChargeDensityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.FromCoulombsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricChargeDensity"/> from <see cref="F:UnitsNet.Units.ElectricChargeDensityUnit.CoulombPerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricChargeDensityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricChargeDensityUnit" /> to <see cref="T:UnitsNet.ElectricChargeDensity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricChargeDensity unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.TryParse(System.String,UnitsNet.ElectricChargeDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricChargeDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.TryParseUnit(System.String,UnitsNet.Units.ElectricChargeDensityUnit@)">
            <inheritdoc cref="M:UnitsNet.ElectricChargeDensity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricChargeDensityUnit@)"/>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricChargeDensityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.op_UnaryNegation(UnitsNet.ElectricChargeDensity)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.op_Addition(UnitsNet.ElectricChargeDensity,UnitsNet.ElectricChargeDensity)">
            <summary>Get <see cref="T:UnitsNet.ElectricChargeDensity"/> from adding two <see cref="T:UnitsNet.ElectricChargeDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.op_Subtraction(UnitsNet.ElectricChargeDensity,UnitsNet.ElectricChargeDensity)">
            <summary>Get <see cref="T:UnitsNet.ElectricChargeDensity"/> from subtracting two <see cref="T:UnitsNet.ElectricChargeDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.op_Multiply(System.Double,UnitsNet.ElectricChargeDensity)">
            <summary>Get <see cref="T:UnitsNet.ElectricChargeDensity"/> from multiplying value and <see cref="T:UnitsNet.ElectricChargeDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.op_Multiply(UnitsNet.ElectricChargeDensity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricChargeDensity"/> from multiplying value and <see cref="T:UnitsNet.ElectricChargeDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.op_Division(UnitsNet.ElectricChargeDensity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricChargeDensity"/> from dividing <see cref="T:UnitsNet.ElectricChargeDensity"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.op_Division(UnitsNet.ElectricChargeDensity,UnitsNet.ElectricChargeDensity)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.ElectricChargeDensity"/> by <see cref="T:UnitsNet.ElectricChargeDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.op_LessThanOrEqual(UnitsNet.ElectricChargeDensity,UnitsNet.ElectricChargeDensity)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.op_GreaterThanOrEqual(UnitsNet.ElectricChargeDensity,UnitsNet.ElectricChargeDensity)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.op_LessThan(UnitsNet.ElectricChargeDensity,UnitsNet.ElectricChargeDensity)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.op_GreaterThan(UnitsNet.ElectricChargeDensity,UnitsNet.ElectricChargeDensity)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.op_Equality(UnitsNet.ElectricChargeDensity,UnitsNet.ElectricChargeDensity)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricChargeDensity.Equals(UnitsNet.ElectricChargeDensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.op_Inequality(UnitsNet.ElectricChargeDensity,UnitsNet.ElectricChargeDensity)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricChargeDensity.Equals(UnitsNet.ElectricChargeDensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.CompareTo(UnitsNet.ElectricChargeDensity)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricChargeDensity.Equals(UnitsNet.ElectricChargeDensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.Equals(UnitsNet.ElectricChargeDensity)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricChargeDensity.Equals(UnitsNet.ElectricChargeDensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.Equals(UnitsNet.ElectricChargeDensity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricChargeDensity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricChargeDensity.</returns>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.As(UnitsNet.Units.ElectricChargeDensityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.ToUnit(UnitsNet.Units.ElectricChargeDensityUnit)">
            <summary>
                Converts this ElectricChargeDensity to another ElectricChargeDensity with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A ElectricChargeDensity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.ToUnit(UnitsNet.Units.ElectricChargeDensityUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this ElectricChargeDensity to another ElectricChargeDensity using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A ElectricChargeDensity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.UnitsNet#IQuantity{UnitsNet#Units#ElectricChargeDensityUnit}#ToUnit(UnitsNet.Units.ElectricChargeDensityUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.UnitsNet#IQuantity{UnitsNet#Units#ElectricChargeDensityUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.ElectricConductance">
            <inheritdoc />
            <summary>
                The electrical conductance of an electrical conductor is a measure of the easeness to pass an electric current through that conductor.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Electrical_resistance_and_conductance
            </remarks>
        </member>
        <member name="F:UnitsNet.ElectricConductance._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricConductance._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricConductance.#ctor(System.Double,UnitsNet.Units.ElectricConductanceUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricConductance.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.ElectricConductance.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.ElectricConductance" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductance.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricConductance.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricConductance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductance.BaseUnit">
            <summary>
                The base unit of ElectricConductance, which is Siemens. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductance.MaxValue">
            <summary>
            Represents the largest possible value of ElectricConductance
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductance.MinValue">
            <summary>
            Represents the smallest possible value of ElectricConductance
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductance.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricConductance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductance.Units">
            <summary>
                All units of measurement for the ElectricConductance quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductance.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Siemens.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductance.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductance.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricConductance.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricConductance.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricConductance.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricConductance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductance.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricConductance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductance.Microsiemens">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricConductanceUnit.Microsiemens"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductance.Millisiemens">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricConductanceUnit.Millisiemens"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductance.Siemens">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricConductanceUnit.Siemens"/>
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricConductance.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.ElectricConductance.GetAbbreviation(UnitsNet.Units.ElectricConductanceUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductance.GetAbbreviation(UnitsNet.Units.ElectricConductanceUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricConductance.FromMicrosiemens(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricConductance"/> from <see cref="F:UnitsNet.Units.ElectricConductanceUnit.Microsiemens"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricConductance.FromMillisiemens(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricConductance"/> from <see cref="F:UnitsNet.Units.ElectricConductanceUnit.Millisiemens"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricConductance.FromSiemens(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricConductance"/> from <see cref="F:UnitsNet.Units.ElectricConductanceUnit.Siemens"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricConductance.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricConductanceUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricConductanceUnit" /> to <see cref="T:UnitsNet.ElectricConductance" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricConductance unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductance.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricConductance.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricConductance.TryParse(System.String,UnitsNet.ElectricConductance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricConductance.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricConductance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricConductance.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricConductance.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricConductance.TryParseUnit(System.String,UnitsNet.Units.ElectricConductanceUnit@)">
            <inheritdoc cref="M:UnitsNet.ElectricConductance.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricConductanceUnit@)"/>
        </member>
        <member name="M:UnitsNet.ElectricConductance.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricConductanceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricConductance.op_UnaryNegation(UnitsNet.ElectricConductance)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricConductance.op_Addition(UnitsNet.ElectricConductance,UnitsNet.ElectricConductance)">
            <summary>Get <see cref="T:UnitsNet.ElectricConductance"/> from adding two <see cref="T:UnitsNet.ElectricConductance"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricConductance.op_Subtraction(UnitsNet.ElectricConductance,UnitsNet.ElectricConductance)">
            <summary>Get <see cref="T:UnitsNet.ElectricConductance"/> from subtracting two <see cref="T:UnitsNet.ElectricConductance"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricConductance.op_Multiply(System.Double,UnitsNet.ElectricConductance)">
            <summary>Get <see cref="T:UnitsNet.ElectricConductance"/> from multiplying value and <see cref="T:UnitsNet.ElectricConductance"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricConductance.op_Multiply(UnitsNet.ElectricConductance,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricConductance"/> from multiplying value and <see cref="T:UnitsNet.ElectricConductance"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricConductance.op_Division(UnitsNet.ElectricConductance,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricConductance"/> from dividing <see cref="T:UnitsNet.ElectricConductance"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricConductance.op_Division(UnitsNet.ElectricConductance,UnitsNet.ElectricConductance)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.ElectricConductance"/> by <see cref="T:UnitsNet.ElectricConductance"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricConductance.op_LessThanOrEqual(UnitsNet.ElectricConductance,UnitsNet.ElectricConductance)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricConductance.op_GreaterThanOrEqual(UnitsNet.ElectricConductance,UnitsNet.ElectricConductance)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricConductance.op_LessThan(UnitsNet.ElectricConductance,UnitsNet.ElectricConductance)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricConductance.op_GreaterThan(UnitsNet.ElectricConductance,UnitsNet.ElectricConductance)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricConductance.op_Equality(UnitsNet.ElectricConductance,UnitsNet.ElectricConductance)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricConductance.Equals(UnitsNet.ElectricConductance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricConductance.op_Inequality(UnitsNet.ElectricConductance,UnitsNet.ElectricConductance)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricConductance.Equals(UnitsNet.ElectricConductance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricConductance.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricConductance.CompareTo(UnitsNet.ElectricConductance)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricConductance.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricConductance.Equals(UnitsNet.ElectricConductance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricConductance.Equals(UnitsNet.ElectricConductance)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricConductance.Equals(UnitsNet.ElectricConductance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricConductance.Equals(UnitsNet.ElectricConductance,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricConductance within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductance.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricConductance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductance.As(UnitsNet.Units.ElectricConductanceUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductance.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricConductance.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricConductance.ToUnit(UnitsNet.Units.ElectricConductanceUnit)">
            <summary>
                Converts this ElectricConductance to another ElectricConductance with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A ElectricConductance with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductance.ToUnit(UnitsNet.Units.ElectricConductanceUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this ElectricConductance to another ElectricConductance using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A ElectricConductance with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductance.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricConductance.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricConductance.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricConductance.UnitsNet#IQuantity{UnitsNet#Units#ElectricConductanceUnit}#ToUnit(UnitsNet.Units.ElectricConductanceUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricConductance.UnitsNet#IQuantity{UnitsNet#Units#ElectricConductanceUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricConductance.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductance.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricConductance.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricConductance.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricConductance.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductance.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.ElectricCurrentDensity">
            <inheritdoc />
            <summary>
                In electromagnetism, current density is the electric current per unit area of cross section.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Current_density
            </remarks>
        </member>
        <member name="F:UnitsNet.ElectricCurrentDensity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricCurrentDensity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.#ctor(System.Double,UnitsNet.Units.ElectricCurrentDensityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.ElectricCurrentDensity" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricCurrentDensity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.BaseUnit">
            <summary>
                The base unit of ElectricCurrentDensity, which is AmperePerSquareMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.MaxValue">
            <summary>
            Represents the largest possible value of ElectricCurrentDensity
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.MinValue">
            <summary>
            Represents the smallest possible value of ElectricCurrentDensity
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricCurrentDensity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.Units">
            <summary>
                All units of measurement for the ElectricCurrentDensity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit AmperePerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricCurrentDensity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricCurrentDensity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.AmperesPerSquareFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricCurrentDensityUnit.AmperePerSquareFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.AmperesPerSquareInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricCurrentDensityUnit.AmperePerSquareInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.AmperesPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricCurrentDensityUnit.AmperePerSquareMeter"/>
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.GetAbbreviation(UnitsNet.Units.ElectricCurrentDensityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.GetAbbreviation(UnitsNet.Units.ElectricCurrentDensityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.FromAmperesPerSquareFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricCurrentDensity"/> from <see cref="F:UnitsNet.Units.ElectricCurrentDensityUnit.AmperePerSquareFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.FromAmperesPerSquareInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricCurrentDensity"/> from <see cref="F:UnitsNet.Units.ElectricCurrentDensityUnit.AmperePerSquareInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.FromAmperesPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricCurrentDensity"/> from <see cref="F:UnitsNet.Units.ElectricCurrentDensityUnit.AmperePerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricCurrentDensityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricCurrentDensityUnit" /> to <see cref="T:UnitsNet.ElectricCurrentDensity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricCurrentDensity unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.TryParse(System.String,UnitsNet.ElectricCurrentDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricCurrentDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.TryParseUnit(System.String,UnitsNet.Units.ElectricCurrentDensityUnit@)">
            <inheritdoc cref="M:UnitsNet.ElectricCurrentDensity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricCurrentDensityUnit@)"/>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricCurrentDensityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.op_UnaryNegation(UnitsNet.ElectricCurrentDensity)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.op_Addition(UnitsNet.ElectricCurrentDensity,UnitsNet.ElectricCurrentDensity)">
            <summary>Get <see cref="T:UnitsNet.ElectricCurrentDensity"/> from adding two <see cref="T:UnitsNet.ElectricCurrentDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.op_Subtraction(UnitsNet.ElectricCurrentDensity,UnitsNet.ElectricCurrentDensity)">
            <summary>Get <see cref="T:UnitsNet.ElectricCurrentDensity"/> from subtracting two <see cref="T:UnitsNet.ElectricCurrentDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.op_Multiply(System.Double,UnitsNet.ElectricCurrentDensity)">
            <summary>Get <see cref="T:UnitsNet.ElectricCurrentDensity"/> from multiplying value and <see cref="T:UnitsNet.ElectricCurrentDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.op_Multiply(UnitsNet.ElectricCurrentDensity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricCurrentDensity"/> from multiplying value and <see cref="T:UnitsNet.ElectricCurrentDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.op_Division(UnitsNet.ElectricCurrentDensity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricCurrentDensity"/> from dividing <see cref="T:UnitsNet.ElectricCurrentDensity"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.op_Division(UnitsNet.ElectricCurrentDensity,UnitsNet.ElectricCurrentDensity)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.ElectricCurrentDensity"/> by <see cref="T:UnitsNet.ElectricCurrentDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.op_LessThanOrEqual(UnitsNet.ElectricCurrentDensity,UnitsNet.ElectricCurrentDensity)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.op_GreaterThanOrEqual(UnitsNet.ElectricCurrentDensity,UnitsNet.ElectricCurrentDensity)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.op_LessThan(UnitsNet.ElectricCurrentDensity,UnitsNet.ElectricCurrentDensity)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.op_GreaterThan(UnitsNet.ElectricCurrentDensity,UnitsNet.ElectricCurrentDensity)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.op_Equality(UnitsNet.ElectricCurrentDensity,UnitsNet.ElectricCurrentDensity)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricCurrentDensity.Equals(UnitsNet.ElectricCurrentDensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.op_Inequality(UnitsNet.ElectricCurrentDensity,UnitsNet.ElectricCurrentDensity)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricCurrentDensity.Equals(UnitsNet.ElectricCurrentDensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.CompareTo(UnitsNet.ElectricCurrentDensity)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricCurrentDensity.Equals(UnitsNet.ElectricCurrentDensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.Equals(UnitsNet.ElectricCurrentDensity)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricCurrentDensity.Equals(UnitsNet.ElectricCurrentDensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.Equals(UnitsNet.ElectricCurrentDensity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricCurrentDensity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricCurrentDensity.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.As(UnitsNet.Units.ElectricCurrentDensityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.ToUnit(UnitsNet.Units.ElectricCurrentDensityUnit)">
            <summary>
                Converts this ElectricCurrentDensity to another ElectricCurrentDensity with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A ElectricCurrentDensity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.ToUnit(UnitsNet.Units.ElectricCurrentDensityUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this ElectricCurrentDensity to another ElectricCurrentDensity using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A ElectricCurrentDensity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.UnitsNet#IQuantity{UnitsNet#Units#ElectricCurrentDensityUnit}#ToUnit(UnitsNet.Units.ElectricCurrentDensityUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.UnitsNet#IQuantity{UnitsNet#Units#ElectricCurrentDensityUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.ElectricCurrentGradient">
            <inheritdoc />
            <summary>
                In electromagnetism, the current gradient describes how the current changes in time.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricCurrentGradient._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricCurrentGradient._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.#ctor(System.Double,UnitsNet.Units.ElectricCurrentGradientUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.ElectricCurrentGradient" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricCurrentGradient.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.BaseUnit">
            <summary>
                The base unit of ElectricCurrentGradient, which is AmperePerSecond. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.MaxValue">
            <summary>
            Represents the largest possible value of ElectricCurrentGradient
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.MinValue">
            <summary>
            Represents the smallest possible value of ElectricCurrentGradient
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricCurrentGradient.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.Units">
            <summary>
                All units of measurement for the ElectricCurrentGradient quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit AmperePerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricCurrentGradient.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricCurrentGradient.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.AmperesPerMicrosecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricCurrentGradientUnit.AmperePerMicrosecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.AmperesPerMillisecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricCurrentGradientUnit.AmperePerMillisecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.AmperesPerNanosecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricCurrentGradientUnit.AmperePerNanosecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.AmperesPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricCurrentGradientUnit.AmperePerSecond"/>
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.GetAbbreviation(UnitsNet.Units.ElectricCurrentGradientUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.GetAbbreviation(UnitsNet.Units.ElectricCurrentGradientUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.FromAmperesPerMicrosecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricCurrentGradient"/> from <see cref="F:UnitsNet.Units.ElectricCurrentGradientUnit.AmperePerMicrosecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.FromAmperesPerMillisecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricCurrentGradient"/> from <see cref="F:UnitsNet.Units.ElectricCurrentGradientUnit.AmperePerMillisecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.FromAmperesPerNanosecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricCurrentGradient"/> from <see cref="F:UnitsNet.Units.ElectricCurrentGradientUnit.AmperePerNanosecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.FromAmperesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricCurrentGradient"/> from <see cref="F:UnitsNet.Units.ElectricCurrentGradientUnit.AmperePerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricCurrentGradientUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricCurrentGradientUnit" /> to <see cref="T:UnitsNet.ElectricCurrentGradient" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricCurrentGradient unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.TryParse(System.String,UnitsNet.ElectricCurrentGradient@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricCurrentGradient@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.TryParseUnit(System.String,UnitsNet.Units.ElectricCurrentGradientUnit@)">
            <inheritdoc cref="M:UnitsNet.ElectricCurrentGradient.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricCurrentGradientUnit@)"/>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricCurrentGradientUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.op_UnaryNegation(UnitsNet.ElectricCurrentGradient)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.op_Addition(UnitsNet.ElectricCurrentGradient,UnitsNet.ElectricCurrentGradient)">
            <summary>Get <see cref="T:UnitsNet.ElectricCurrentGradient"/> from adding two <see cref="T:UnitsNet.ElectricCurrentGradient"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.op_Subtraction(UnitsNet.ElectricCurrentGradient,UnitsNet.ElectricCurrentGradient)">
            <summary>Get <see cref="T:UnitsNet.ElectricCurrentGradient"/> from subtracting two <see cref="T:UnitsNet.ElectricCurrentGradient"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.op_Multiply(System.Double,UnitsNet.ElectricCurrentGradient)">
            <summary>Get <see cref="T:UnitsNet.ElectricCurrentGradient"/> from multiplying value and <see cref="T:UnitsNet.ElectricCurrentGradient"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.op_Multiply(UnitsNet.ElectricCurrentGradient,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricCurrentGradient"/> from multiplying value and <see cref="T:UnitsNet.ElectricCurrentGradient"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.op_Division(UnitsNet.ElectricCurrentGradient,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricCurrentGradient"/> from dividing <see cref="T:UnitsNet.ElectricCurrentGradient"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.op_Division(UnitsNet.ElectricCurrentGradient,UnitsNet.ElectricCurrentGradient)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.ElectricCurrentGradient"/> by <see cref="T:UnitsNet.ElectricCurrentGradient"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.op_LessThanOrEqual(UnitsNet.ElectricCurrentGradient,UnitsNet.ElectricCurrentGradient)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.op_GreaterThanOrEqual(UnitsNet.ElectricCurrentGradient,UnitsNet.ElectricCurrentGradient)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.op_LessThan(UnitsNet.ElectricCurrentGradient,UnitsNet.ElectricCurrentGradient)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.op_GreaterThan(UnitsNet.ElectricCurrentGradient,UnitsNet.ElectricCurrentGradient)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.op_Equality(UnitsNet.ElectricCurrentGradient,UnitsNet.ElectricCurrentGradient)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricCurrentGradient.Equals(UnitsNet.ElectricCurrentGradient,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.op_Inequality(UnitsNet.ElectricCurrentGradient,UnitsNet.ElectricCurrentGradient)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricCurrentGradient.Equals(UnitsNet.ElectricCurrentGradient,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.CompareTo(UnitsNet.ElectricCurrentGradient)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricCurrentGradient.Equals(UnitsNet.ElectricCurrentGradient,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.Equals(UnitsNet.ElectricCurrentGradient)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricCurrentGradient.Equals(UnitsNet.ElectricCurrentGradient,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.Equals(UnitsNet.ElectricCurrentGradient,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricCurrentGradient within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricCurrentGradient.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.As(UnitsNet.Units.ElectricCurrentGradientUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.ToUnit(UnitsNet.Units.ElectricCurrentGradientUnit)">
            <summary>
                Converts this ElectricCurrentGradient to another ElectricCurrentGradient with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A ElectricCurrentGradient with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.ToUnit(UnitsNet.Units.ElectricCurrentGradientUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this ElectricCurrentGradient to another ElectricCurrentGradient using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A ElectricCurrentGradient with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.UnitsNet#IQuantity{UnitsNet#Units#ElectricCurrentGradientUnit}#ToUnit(UnitsNet.Units.ElectricCurrentGradientUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.UnitsNet#IQuantity{UnitsNet#Units#ElectricCurrentGradientUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.ElectricField">
            <inheritdoc />
            <summary>
                An electric field is a force field that surrounds electric charges that attracts or repels other electric charges.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Electric_field
            </remarks>
        </member>
        <member name="F:UnitsNet.ElectricField._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricField._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricField.#ctor(System.Double,UnitsNet.Units.ElectricFieldUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricField.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.ElectricField.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.ElectricField" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricField.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricField.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricField.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricField.BaseUnit">
            <summary>
                The base unit of ElectricField, which is VoltPerMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricField.MaxValue">
            <summary>
            Represents the largest possible value of ElectricField
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricField.MinValue">
            <summary>
            Represents the smallest possible value of ElectricField
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricField.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricField.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricField.Units">
            <summary>
                All units of measurement for the ElectricField quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricField.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit VoltPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricField.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricField.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricField.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricField.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricField.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricField.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricField.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricField.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricField.VoltsPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricFieldUnit.VoltPerMeter"/>
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricField.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.ElectricField.GetAbbreviation(UnitsNet.Units.ElectricFieldUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricField.GetAbbreviation(UnitsNet.Units.ElectricFieldUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricField.FromVoltsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricField"/> from <see cref="F:UnitsNet.Units.ElectricFieldUnit.VoltPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricField.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricFieldUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricFieldUnit" /> to <see cref="T:UnitsNet.ElectricField" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricField unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricField.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricField.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricField.TryParse(System.String,UnitsNet.ElectricField@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricField.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricField@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricField.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricField.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricField.TryParseUnit(System.String,UnitsNet.Units.ElectricFieldUnit@)">
            <inheritdoc cref="M:UnitsNet.ElectricField.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricFieldUnit@)"/>
        </member>
        <member name="M:UnitsNet.ElectricField.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricFieldUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricField.op_UnaryNegation(UnitsNet.ElectricField)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricField.op_Addition(UnitsNet.ElectricField,UnitsNet.ElectricField)">
            <summary>Get <see cref="T:UnitsNet.ElectricField"/> from adding two <see cref="T:UnitsNet.ElectricField"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricField.op_Subtraction(UnitsNet.ElectricField,UnitsNet.ElectricField)">
            <summary>Get <see cref="T:UnitsNet.ElectricField"/> from subtracting two <see cref="T:UnitsNet.ElectricField"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricField.op_Multiply(System.Double,UnitsNet.ElectricField)">
            <summary>Get <see cref="T:UnitsNet.ElectricField"/> from multiplying value and <see cref="T:UnitsNet.ElectricField"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricField.op_Multiply(UnitsNet.ElectricField,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricField"/> from multiplying value and <see cref="T:UnitsNet.ElectricField"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricField.op_Division(UnitsNet.ElectricField,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricField"/> from dividing <see cref="T:UnitsNet.ElectricField"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricField.op_Division(UnitsNet.ElectricField,UnitsNet.ElectricField)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.ElectricField"/> by <see cref="T:UnitsNet.ElectricField"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricField.op_LessThanOrEqual(UnitsNet.ElectricField,UnitsNet.ElectricField)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricField.op_GreaterThanOrEqual(UnitsNet.ElectricField,UnitsNet.ElectricField)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricField.op_LessThan(UnitsNet.ElectricField,UnitsNet.ElectricField)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricField.op_GreaterThan(UnitsNet.ElectricField,UnitsNet.ElectricField)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricField.op_Equality(UnitsNet.ElectricField,UnitsNet.ElectricField)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricField.Equals(UnitsNet.ElectricField,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricField.op_Inequality(UnitsNet.ElectricField,UnitsNet.ElectricField)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricField.Equals(UnitsNet.ElectricField,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricField.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricField.CompareTo(UnitsNet.ElectricField)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricField.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricField.Equals(UnitsNet.ElectricField,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricField.Equals(UnitsNet.ElectricField)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricField.Equals(UnitsNet.ElectricField,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricField.Equals(UnitsNet.ElectricField,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricField within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricField.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricField.</returns>
        </member>
        <member name="M:UnitsNet.ElectricField.As(UnitsNet.Units.ElectricFieldUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricField.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricField.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricField.ToUnit(UnitsNet.Units.ElectricFieldUnit)">
            <summary>
                Converts this ElectricField to another ElectricField with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A ElectricField with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricField.ToUnit(UnitsNet.Units.ElectricFieldUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this ElectricField to another ElectricField using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A ElectricField with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricField.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricField.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricField.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricField.UnitsNet#IQuantity{UnitsNet#Units#ElectricFieldUnit}#ToUnit(UnitsNet.Units.ElectricFieldUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricField.UnitsNet#IQuantity{UnitsNet#Units#ElectricFieldUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricField.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricField.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricField.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricField.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricField.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricField.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.ElectricInductance">
            <inheritdoc />
            <summary>
                Inductance is a property of an electrical conductor which opposes a change in current.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Inductance
            </remarks>
        </member>
        <member name="F:UnitsNet.ElectricInductance._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricInductance._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricInductance.#ctor(System.Double,UnitsNet.Units.ElectricInductanceUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricInductance.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.ElectricInductance.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.ElectricInductance" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricInductance.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricInductance.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricInductance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricInductance.BaseUnit">
            <summary>
                The base unit of ElectricInductance, which is Henry. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricInductance.MaxValue">
            <summary>
            Represents the largest possible value of ElectricInductance
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricInductance.MinValue">
            <summary>
            Represents the smallest possible value of ElectricInductance
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricInductance.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricInductance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricInductance.Units">
            <summary>
                All units of measurement for the ElectricInductance quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricInductance.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Henry.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricInductance.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricInductance.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricInductance.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricInductance.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricInductance.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricInductance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricInductance.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricInductance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricInductance.Henries">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricInductanceUnit.Henry"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricInductance.Microhenries">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricInductanceUnit.Microhenry"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricInductance.Millihenries">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricInductanceUnit.Millihenry"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricInductance.Nanohenries">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricInductanceUnit.Nanohenry"/>
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricInductance.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.ElectricInductance.GetAbbreviation(UnitsNet.Units.ElectricInductanceUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricInductance.GetAbbreviation(UnitsNet.Units.ElectricInductanceUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricInductance.FromHenries(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricInductance"/> from <see cref="F:UnitsNet.Units.ElectricInductanceUnit.Henry"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricInductance.FromMicrohenries(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricInductance"/> from <see cref="F:UnitsNet.Units.ElectricInductanceUnit.Microhenry"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricInductance.FromMillihenries(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricInductance"/> from <see cref="F:UnitsNet.Units.ElectricInductanceUnit.Millihenry"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricInductance.FromNanohenries(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricInductance"/> from <see cref="F:UnitsNet.Units.ElectricInductanceUnit.Nanohenry"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricInductance.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricInductanceUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricInductanceUnit" /> to <see cref="T:UnitsNet.ElectricInductance" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricInductance unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricInductance.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricInductance.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricInductance.TryParse(System.String,UnitsNet.ElectricInductance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricInductance.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricInductance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricInductance.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricInductance.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricInductance.TryParseUnit(System.String,UnitsNet.Units.ElectricInductanceUnit@)">
            <inheritdoc cref="M:UnitsNet.ElectricInductance.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricInductanceUnit@)"/>
        </member>
        <member name="M:UnitsNet.ElectricInductance.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricInductanceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricInductance.op_UnaryNegation(UnitsNet.ElectricInductance)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricInductance.op_Addition(UnitsNet.ElectricInductance,UnitsNet.ElectricInductance)">
            <summary>Get <see cref="T:UnitsNet.ElectricInductance"/> from adding two <see cref="T:UnitsNet.ElectricInductance"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricInductance.op_Subtraction(UnitsNet.ElectricInductance,UnitsNet.ElectricInductance)">
            <summary>Get <see cref="T:UnitsNet.ElectricInductance"/> from subtracting two <see cref="T:UnitsNet.ElectricInductance"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricInductance.op_Multiply(System.Double,UnitsNet.ElectricInductance)">
            <summary>Get <see cref="T:UnitsNet.ElectricInductance"/> from multiplying value and <see cref="T:UnitsNet.ElectricInductance"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricInductance.op_Multiply(UnitsNet.ElectricInductance,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricInductance"/> from multiplying value and <see cref="T:UnitsNet.ElectricInductance"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricInductance.op_Division(UnitsNet.ElectricInductance,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricInductance"/> from dividing <see cref="T:UnitsNet.ElectricInductance"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricInductance.op_Division(UnitsNet.ElectricInductance,UnitsNet.ElectricInductance)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.ElectricInductance"/> by <see cref="T:UnitsNet.ElectricInductance"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricInductance.op_LessThanOrEqual(UnitsNet.ElectricInductance,UnitsNet.ElectricInductance)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricInductance.op_GreaterThanOrEqual(UnitsNet.ElectricInductance,UnitsNet.ElectricInductance)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricInductance.op_LessThan(UnitsNet.ElectricInductance,UnitsNet.ElectricInductance)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricInductance.op_GreaterThan(UnitsNet.ElectricInductance,UnitsNet.ElectricInductance)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricInductance.op_Equality(UnitsNet.ElectricInductance,UnitsNet.ElectricInductance)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricInductance.Equals(UnitsNet.ElectricInductance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricInductance.op_Inequality(UnitsNet.ElectricInductance,UnitsNet.ElectricInductance)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricInductance.Equals(UnitsNet.ElectricInductance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricInductance.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricInductance.CompareTo(UnitsNet.ElectricInductance)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricInductance.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricInductance.Equals(UnitsNet.ElectricInductance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricInductance.Equals(UnitsNet.ElectricInductance)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricInductance.Equals(UnitsNet.ElectricInductance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricInductance.Equals(UnitsNet.ElectricInductance,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricInductance within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricInductance.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricInductance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricInductance.As(UnitsNet.Units.ElectricInductanceUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricInductance.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricInductance.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricInductance.ToUnit(UnitsNet.Units.ElectricInductanceUnit)">
            <summary>
                Converts this ElectricInductance to another ElectricInductance with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A ElectricInductance with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricInductance.ToUnit(UnitsNet.Units.ElectricInductanceUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this ElectricInductance to another ElectricInductance using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A ElectricInductance with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricInductance.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricInductance.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricInductance.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricInductance.UnitsNet#IQuantity{UnitsNet#Units#ElectricInductanceUnit}#ToUnit(UnitsNet.Units.ElectricInductanceUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricInductance.UnitsNet#IQuantity{UnitsNet#Units#ElectricInductanceUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricInductance.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricInductance.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricInductance.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricInductance.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricInductance.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricInductance.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.ElectricPotentialAc">
            <inheritdoc />
            <summary>
                The Electric Potential of a system known to use Alternating Current.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricPotentialAc._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricPotentialAc._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.#ctor(System.Double,UnitsNet.Units.ElectricPotentialAcUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.ElectricPotentialAc" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricPotentialAc.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.BaseUnit">
            <summary>
                The base unit of ElectricPotentialAc, which is VoltAc. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.MaxValue">
            <summary>
            Represents the largest possible value of ElectricPotentialAc
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.MinValue">
            <summary>
            Represents the smallest possible value of ElectricPotentialAc
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricPotentialAc.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.Units">
            <summary>
                All units of measurement for the ElectricPotentialAc quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit VoltAc.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricPotentialAc.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricPotentialAc.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.KilovoltsAc">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialAcUnit.KilovoltAc"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.MegavoltsAc">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialAcUnit.MegavoltAc"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.MicrovoltsAc">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialAcUnit.MicrovoltAc"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.MillivoltsAc">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialAcUnit.MillivoltAc"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.VoltsAc">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialAcUnit.VoltAc"/>
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.GetAbbreviation(UnitsNet.Units.ElectricPotentialAcUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.GetAbbreviation(UnitsNet.Units.ElectricPotentialAcUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.FromKilovoltsAc(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialAc"/> from <see cref="F:UnitsNet.Units.ElectricPotentialAcUnit.KilovoltAc"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.FromMegavoltsAc(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialAc"/> from <see cref="F:UnitsNet.Units.ElectricPotentialAcUnit.MegavoltAc"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.FromMicrovoltsAc(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialAc"/> from <see cref="F:UnitsNet.Units.ElectricPotentialAcUnit.MicrovoltAc"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.FromMillivoltsAc(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialAc"/> from <see cref="F:UnitsNet.Units.ElectricPotentialAcUnit.MillivoltAc"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.FromVoltsAc(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialAc"/> from <see cref="F:UnitsNet.Units.ElectricPotentialAcUnit.VoltAc"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricPotentialAcUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricPotentialAcUnit" /> to <see cref="T:UnitsNet.ElectricPotentialAc" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricPotentialAc unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.TryParse(System.String,UnitsNet.ElectricPotentialAc@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricPotentialAc@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.TryParseUnit(System.String,UnitsNet.Units.ElectricPotentialAcUnit@)">
            <inheritdoc cref="M:UnitsNet.ElectricPotentialAc.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricPotentialAcUnit@)"/>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricPotentialAcUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.op_UnaryNegation(UnitsNet.ElectricPotentialAc)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.op_Addition(UnitsNet.ElectricPotentialAc,UnitsNet.ElectricPotentialAc)">
            <summary>Get <see cref="T:UnitsNet.ElectricPotentialAc"/> from adding two <see cref="T:UnitsNet.ElectricPotentialAc"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.op_Subtraction(UnitsNet.ElectricPotentialAc,UnitsNet.ElectricPotentialAc)">
            <summary>Get <see cref="T:UnitsNet.ElectricPotentialAc"/> from subtracting two <see cref="T:UnitsNet.ElectricPotentialAc"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.op_Multiply(System.Double,UnitsNet.ElectricPotentialAc)">
            <summary>Get <see cref="T:UnitsNet.ElectricPotentialAc"/> from multiplying value and <see cref="T:UnitsNet.ElectricPotentialAc"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.op_Multiply(UnitsNet.ElectricPotentialAc,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricPotentialAc"/> from multiplying value and <see cref="T:UnitsNet.ElectricPotentialAc"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.op_Division(UnitsNet.ElectricPotentialAc,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricPotentialAc"/> from dividing <see cref="T:UnitsNet.ElectricPotentialAc"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.op_Division(UnitsNet.ElectricPotentialAc,UnitsNet.ElectricPotentialAc)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.ElectricPotentialAc"/> by <see cref="T:UnitsNet.ElectricPotentialAc"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.op_LessThanOrEqual(UnitsNet.ElectricPotentialAc,UnitsNet.ElectricPotentialAc)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.op_GreaterThanOrEqual(UnitsNet.ElectricPotentialAc,UnitsNet.ElectricPotentialAc)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.op_LessThan(UnitsNet.ElectricPotentialAc,UnitsNet.ElectricPotentialAc)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.op_GreaterThan(UnitsNet.ElectricPotentialAc,UnitsNet.ElectricPotentialAc)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.op_Equality(UnitsNet.ElectricPotentialAc,UnitsNet.ElectricPotentialAc)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricPotentialAc.Equals(UnitsNet.ElectricPotentialAc,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.op_Inequality(UnitsNet.ElectricPotentialAc,UnitsNet.ElectricPotentialAc)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricPotentialAc.Equals(UnitsNet.ElectricPotentialAc,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.CompareTo(UnitsNet.ElectricPotentialAc)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricPotentialAc.Equals(UnitsNet.ElectricPotentialAc,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.Equals(UnitsNet.ElectricPotentialAc)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricPotentialAc.Equals(UnitsNet.ElectricPotentialAc,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.Equals(UnitsNet.ElectricPotentialAc,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricPotentialAc within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricPotentialAc.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.As(UnitsNet.Units.ElectricPotentialAcUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.ToUnit(UnitsNet.Units.ElectricPotentialAcUnit)">
            <summary>
                Converts this ElectricPotentialAc to another ElectricPotentialAc with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A ElectricPotentialAc with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.ToUnit(UnitsNet.Units.ElectricPotentialAcUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this ElectricPotentialAc to another ElectricPotentialAc using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A ElectricPotentialAc with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.UnitsNet#IQuantity{UnitsNet#Units#ElectricPotentialAcUnit}#ToUnit(UnitsNet.Units.ElectricPotentialAcUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.UnitsNet#IQuantity{UnitsNet#Units#ElectricPotentialAcUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.ElectricPotentialChangeRate">
            <inheritdoc />
            <summary>
                ElectricPotential change rate is the ratio of the electric potential change to the time during which the change occurred (value of electric potential changes per unit time).
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricPotentialChangeRate._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricPotentialChangeRate._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.#ctor(System.Double,UnitsNet.Units.ElectricPotentialChangeRateUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.ElectricPotentialChangeRate" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricPotentialChangeRate.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.BaseUnit">
            <summary>
                The base unit of ElectricPotentialChangeRate, which is VoltPerSecond. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.MaxValue">
            <summary>
            Represents the largest possible value of ElectricPotentialChangeRate
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.MinValue">
            <summary>
            Represents the smallest possible value of ElectricPotentialChangeRate
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricPotentialChangeRate.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.Units">
            <summary>
                All units of measurement for the ElectricPotentialChangeRate quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit VoltPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricPotentialChangeRate.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricPotentialChangeRate.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.KilovoltsPerHours">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.KilovoltPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.KilovoltsPerMicroseconds">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.KilovoltPerMicrosecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.KilovoltsPerMinutes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.KilovoltPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.KilovoltsPerSeconds">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.KilovoltPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.MegavoltsPerHours">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.MegavoltPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.MegavoltsPerMicroseconds">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.MegavoltPerMicrosecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.MegavoltsPerMinutes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.MegavoltPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.MegavoltsPerSeconds">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.MegavoltPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.MicrovoltsPerHours">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.MicrovoltPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.MicrovoltsPerMicroseconds">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.MicrovoltPerMicrosecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.MicrovoltsPerMinutes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.MicrovoltPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.MicrovoltsPerSeconds">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.MicrovoltPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.MillivoltsPerHours">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.MillivoltPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.MillivoltsPerMicroseconds">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.MillivoltPerMicrosecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.MillivoltsPerMinutes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.MillivoltPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.MillivoltsPerSeconds">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.MillivoltPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.VoltsPerHours">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.VoltPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.VoltsPerMicroseconds">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.VoltPerMicrosecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.VoltsPerMinutes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.VoltPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialChangeRate.VoltsPerSeconds">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.VoltPerSecond"/>
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.GetAbbreviation(UnitsNet.Units.ElectricPotentialChangeRateUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.GetAbbreviation(UnitsNet.Units.ElectricPotentialChangeRateUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.FromKilovoltsPerHours(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialChangeRate"/> from <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.KilovoltPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.FromKilovoltsPerMicroseconds(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialChangeRate"/> from <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.KilovoltPerMicrosecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.FromKilovoltsPerMinutes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialChangeRate"/> from <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.KilovoltPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.FromKilovoltsPerSeconds(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialChangeRate"/> from <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.KilovoltPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.FromMegavoltsPerHours(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialChangeRate"/> from <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.MegavoltPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.FromMegavoltsPerMicroseconds(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialChangeRate"/> from <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.MegavoltPerMicrosecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.FromMegavoltsPerMinutes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialChangeRate"/> from <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.MegavoltPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.FromMegavoltsPerSeconds(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialChangeRate"/> from <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.MegavoltPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.FromMicrovoltsPerHours(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialChangeRate"/> from <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.MicrovoltPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.FromMicrovoltsPerMicroseconds(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialChangeRate"/> from <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.MicrovoltPerMicrosecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.FromMicrovoltsPerMinutes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialChangeRate"/> from <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.MicrovoltPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.FromMicrovoltsPerSeconds(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialChangeRate"/> from <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.MicrovoltPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.FromMillivoltsPerHours(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialChangeRate"/> from <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.MillivoltPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.FromMillivoltsPerMicroseconds(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialChangeRate"/> from <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.MillivoltPerMicrosecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.FromMillivoltsPerMinutes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialChangeRate"/> from <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.MillivoltPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.FromMillivoltsPerSeconds(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialChangeRate"/> from <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.MillivoltPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.FromVoltsPerHours(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialChangeRate"/> from <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.VoltPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.FromVoltsPerMicroseconds(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialChangeRate"/> from <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.VoltPerMicrosecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.FromVoltsPerMinutes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialChangeRate"/> from <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.VoltPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.FromVoltsPerSeconds(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialChangeRate"/> from <see cref="F:UnitsNet.Units.ElectricPotentialChangeRateUnit.VoltPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricPotentialChangeRateUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricPotentialChangeRateUnit" /> to <see cref="T:UnitsNet.ElectricPotentialChangeRate" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricPotentialChangeRate unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.TryParse(System.String,UnitsNet.ElectricPotentialChangeRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricPotentialChangeRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.TryParseUnit(System.String,UnitsNet.Units.ElectricPotentialChangeRateUnit@)">
            <inheritdoc cref="M:UnitsNet.ElectricPotentialChangeRate.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricPotentialChangeRateUnit@)"/>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricPotentialChangeRateUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.op_UnaryNegation(UnitsNet.ElectricPotentialChangeRate)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.op_Addition(UnitsNet.ElectricPotentialChangeRate,UnitsNet.ElectricPotentialChangeRate)">
            <summary>Get <see cref="T:UnitsNet.ElectricPotentialChangeRate"/> from adding two <see cref="T:UnitsNet.ElectricPotentialChangeRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.op_Subtraction(UnitsNet.ElectricPotentialChangeRate,UnitsNet.ElectricPotentialChangeRate)">
            <summary>Get <see cref="T:UnitsNet.ElectricPotentialChangeRate"/> from subtracting two <see cref="T:UnitsNet.ElectricPotentialChangeRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.op_Multiply(System.Double,UnitsNet.ElectricPotentialChangeRate)">
            <summary>Get <see cref="T:UnitsNet.ElectricPotentialChangeRate"/> from multiplying value and <see cref="T:UnitsNet.ElectricPotentialChangeRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.op_Multiply(UnitsNet.ElectricPotentialChangeRate,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricPotentialChangeRate"/> from multiplying value and <see cref="T:UnitsNet.ElectricPotentialChangeRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.op_Division(UnitsNet.ElectricPotentialChangeRate,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricPotentialChangeRate"/> from dividing <see cref="T:UnitsNet.ElectricPotentialChangeRate"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.op_Division(UnitsNet.ElectricPotentialChangeRate,UnitsNet.ElectricPotentialChangeRate)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.ElectricPotentialChangeRate"/> by <see cref="T:UnitsNet.ElectricPotentialChangeRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.op_LessThanOrEqual(UnitsNet.ElectricPotentialChangeRate,UnitsNet.ElectricPotentialChangeRate)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.op_GreaterThanOrEqual(UnitsNet.ElectricPotentialChangeRate,UnitsNet.ElectricPotentialChangeRate)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.op_LessThan(UnitsNet.ElectricPotentialChangeRate,UnitsNet.ElectricPotentialChangeRate)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.op_GreaterThan(UnitsNet.ElectricPotentialChangeRate,UnitsNet.ElectricPotentialChangeRate)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.op_Equality(UnitsNet.ElectricPotentialChangeRate,UnitsNet.ElectricPotentialChangeRate)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricPotentialChangeRate.Equals(UnitsNet.ElectricPotentialChangeRate,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.op_Inequality(UnitsNet.ElectricPotentialChangeRate,UnitsNet.ElectricPotentialChangeRate)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricPotentialChangeRate.Equals(UnitsNet.ElectricPotentialChangeRate,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.CompareTo(UnitsNet.ElectricPotentialChangeRate)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricPotentialChangeRate.Equals(UnitsNet.ElectricPotentialChangeRate,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.Equals(UnitsNet.ElectricPotentialChangeRate)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricPotentialChangeRate.Equals(UnitsNet.ElectricPotentialChangeRate,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.Equals(UnitsNet.ElectricPotentialChangeRate,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricPotentialChangeRate within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricPotentialChangeRate.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.As(UnitsNet.Units.ElectricPotentialChangeRateUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.ToUnit(UnitsNet.Units.ElectricPotentialChangeRateUnit)">
            <summary>
                Converts this ElectricPotentialChangeRate to another ElectricPotentialChangeRate with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A ElectricPotentialChangeRate with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.ToUnit(UnitsNet.Units.ElectricPotentialChangeRateUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this ElectricPotentialChangeRate to another ElectricPotentialChangeRate using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A ElectricPotentialChangeRate with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.UnitsNet#IQuantity{UnitsNet#Units#ElectricPotentialChangeRateUnit}#ToUnit(UnitsNet.Units.ElectricPotentialChangeRateUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.UnitsNet#IQuantity{UnitsNet#Units#ElectricPotentialChangeRateUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialChangeRate.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.ElectricPotentialDc">
            <inheritdoc />
            <summary>
                The Electric Potential of a system known to use Direct Current.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricPotentialDc._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricPotentialDc._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.#ctor(System.Double,UnitsNet.Units.ElectricPotentialDcUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.ElectricPotentialDc" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricPotentialDc.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.BaseUnit">
            <summary>
                The base unit of ElectricPotentialDc, which is VoltDc. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.MaxValue">
            <summary>
            Represents the largest possible value of ElectricPotentialDc
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.MinValue">
            <summary>
            Represents the smallest possible value of ElectricPotentialDc
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricPotentialDc.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.Units">
            <summary>
                All units of measurement for the ElectricPotentialDc quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit VoltDc.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricPotentialDc.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricPotentialDc.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.KilovoltsDc">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialDcUnit.KilovoltDc"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.MegavoltsDc">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialDcUnit.MegavoltDc"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.MicrovoltsDc">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialDcUnit.MicrovoltDc"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.MillivoltsDc">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialDcUnit.MillivoltDc"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.VoltsDc">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricPotentialDcUnit.VoltDc"/>
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.GetAbbreviation(UnitsNet.Units.ElectricPotentialDcUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.GetAbbreviation(UnitsNet.Units.ElectricPotentialDcUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.FromKilovoltsDc(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialDc"/> from <see cref="F:UnitsNet.Units.ElectricPotentialDcUnit.KilovoltDc"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.FromMegavoltsDc(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialDc"/> from <see cref="F:UnitsNet.Units.ElectricPotentialDcUnit.MegavoltDc"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.FromMicrovoltsDc(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialDc"/> from <see cref="F:UnitsNet.Units.ElectricPotentialDcUnit.MicrovoltDc"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.FromMillivoltsDc(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialDc"/> from <see cref="F:UnitsNet.Units.ElectricPotentialDcUnit.MillivoltDc"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.FromVoltsDc(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricPotentialDc"/> from <see cref="F:UnitsNet.Units.ElectricPotentialDcUnit.VoltDc"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricPotentialDcUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricPotentialDcUnit" /> to <see cref="T:UnitsNet.ElectricPotentialDc" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricPotentialDc unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.TryParse(System.String,UnitsNet.ElectricPotentialDc@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricPotentialDc@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.TryParseUnit(System.String,UnitsNet.Units.ElectricPotentialDcUnit@)">
            <inheritdoc cref="M:UnitsNet.ElectricPotentialDc.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricPotentialDcUnit@)"/>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricPotentialDcUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.op_UnaryNegation(UnitsNet.ElectricPotentialDc)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.op_Addition(UnitsNet.ElectricPotentialDc,UnitsNet.ElectricPotentialDc)">
            <summary>Get <see cref="T:UnitsNet.ElectricPotentialDc"/> from adding two <see cref="T:UnitsNet.ElectricPotentialDc"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.op_Subtraction(UnitsNet.ElectricPotentialDc,UnitsNet.ElectricPotentialDc)">
            <summary>Get <see cref="T:UnitsNet.ElectricPotentialDc"/> from subtracting two <see cref="T:UnitsNet.ElectricPotentialDc"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.op_Multiply(System.Double,UnitsNet.ElectricPotentialDc)">
            <summary>Get <see cref="T:UnitsNet.ElectricPotentialDc"/> from multiplying value and <see cref="T:UnitsNet.ElectricPotentialDc"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.op_Multiply(UnitsNet.ElectricPotentialDc,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricPotentialDc"/> from multiplying value and <see cref="T:UnitsNet.ElectricPotentialDc"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.op_Division(UnitsNet.ElectricPotentialDc,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricPotentialDc"/> from dividing <see cref="T:UnitsNet.ElectricPotentialDc"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.op_Division(UnitsNet.ElectricPotentialDc,UnitsNet.ElectricPotentialDc)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.ElectricPotentialDc"/> by <see cref="T:UnitsNet.ElectricPotentialDc"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.op_LessThanOrEqual(UnitsNet.ElectricPotentialDc,UnitsNet.ElectricPotentialDc)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.op_GreaterThanOrEqual(UnitsNet.ElectricPotentialDc,UnitsNet.ElectricPotentialDc)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.op_LessThan(UnitsNet.ElectricPotentialDc,UnitsNet.ElectricPotentialDc)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.op_GreaterThan(UnitsNet.ElectricPotentialDc,UnitsNet.ElectricPotentialDc)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.op_Equality(UnitsNet.ElectricPotentialDc,UnitsNet.ElectricPotentialDc)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricPotentialDc.Equals(UnitsNet.ElectricPotentialDc,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.op_Inequality(UnitsNet.ElectricPotentialDc,UnitsNet.ElectricPotentialDc)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricPotentialDc.Equals(UnitsNet.ElectricPotentialDc,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.CompareTo(UnitsNet.ElectricPotentialDc)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricPotentialDc.Equals(UnitsNet.ElectricPotentialDc,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.Equals(UnitsNet.ElectricPotentialDc)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricPotentialDc.Equals(UnitsNet.ElectricPotentialDc,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.Equals(UnitsNet.ElectricPotentialDc,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricPotentialDc within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricPotentialDc.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.As(UnitsNet.Units.ElectricPotentialDcUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.ToUnit(UnitsNet.Units.ElectricPotentialDcUnit)">
            <summary>
                Converts this ElectricPotentialDc to another ElectricPotentialDc with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A ElectricPotentialDc with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.ToUnit(UnitsNet.Units.ElectricPotentialDcUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this ElectricPotentialDc to another ElectricPotentialDc using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A ElectricPotentialDc with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.UnitsNet#IQuantity{UnitsNet#Units#ElectricPotentialDcUnit}#ToUnit(UnitsNet.Units.ElectricPotentialDcUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.UnitsNet#IQuantity{UnitsNet#Units#ElectricPotentialDcUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.ElectricSurfaceChargeDensity">
            <inheritdoc />
            <summary>
                In electromagnetism, surface charge density is a measure of the amount of electric charge per surface area.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Charge_density
            </remarks>
        </member>
        <member name="F:UnitsNet.ElectricSurfaceChargeDensity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricSurfaceChargeDensity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.#ctor(System.Double,UnitsNet.Units.ElectricSurfaceChargeDensityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.ElectricSurfaceChargeDensity.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.ElectricSurfaceChargeDensity" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricSurfaceChargeDensity.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricSurfaceChargeDensity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricSurfaceChargeDensity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricSurfaceChargeDensity.BaseUnit">
            <summary>
                The base unit of ElectricSurfaceChargeDensity, which is CoulombPerSquareMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricSurfaceChargeDensity.MaxValue">
            <summary>
            Represents the largest possible value of ElectricSurfaceChargeDensity
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricSurfaceChargeDensity.MinValue">
            <summary>
            Represents the smallest possible value of ElectricSurfaceChargeDensity
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricSurfaceChargeDensity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricSurfaceChargeDensity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricSurfaceChargeDensity.Units">
            <summary>
                All units of measurement for the ElectricSurfaceChargeDensity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricSurfaceChargeDensity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit CoulombPerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricSurfaceChargeDensity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricSurfaceChargeDensity.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricSurfaceChargeDensity.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ElectricSurfaceChargeDensity.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ElectricSurfaceChargeDensity.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricSurfaceChargeDensity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricSurfaceChargeDensity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricSurfaceChargeDensity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricSurfaceChargeDensity.CoulombsPerSquareCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricSurfaceChargeDensityUnit.CoulombPerSquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricSurfaceChargeDensity.CoulombsPerSquareInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricSurfaceChargeDensityUnit.CoulombPerSquareInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricSurfaceChargeDensity.CoulombsPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ElectricSurfaceChargeDensityUnit.CoulombPerSquareMeter"/>
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.GetAbbreviation(UnitsNet.Units.ElectricSurfaceChargeDensityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.GetAbbreviation(UnitsNet.Units.ElectricSurfaceChargeDensityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.FromCoulombsPerSquareCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricSurfaceChargeDensity"/> from <see cref="F:UnitsNet.Units.ElectricSurfaceChargeDensityUnit.CoulombPerSquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.FromCoulombsPerSquareInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricSurfaceChargeDensity"/> from <see cref="F:UnitsNet.Units.ElectricSurfaceChargeDensityUnit.CoulombPerSquareInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.FromCoulombsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ElectricSurfaceChargeDensity"/> from <see cref="F:UnitsNet.Units.ElectricSurfaceChargeDensityUnit.CoulombPerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricSurfaceChargeDensityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricSurfaceChargeDensityUnit" /> to <see cref="T:UnitsNet.ElectricSurfaceChargeDensity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricSurfaceChargeDensity unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.TryParse(System.String,UnitsNet.ElectricSurfaceChargeDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricSurfaceChargeDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.TryParseUnit(System.String,UnitsNet.Units.ElectricSurfaceChargeDensityUnit@)">
            <inheritdoc cref="M:UnitsNet.ElectricSurfaceChargeDensity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricSurfaceChargeDensityUnit@)"/>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricSurfaceChargeDensityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.op_UnaryNegation(UnitsNet.ElectricSurfaceChargeDensity)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.op_Addition(UnitsNet.ElectricSurfaceChargeDensity,UnitsNet.ElectricSurfaceChargeDensity)">
            <summary>Get <see cref="T:UnitsNet.ElectricSurfaceChargeDensity"/> from adding two <see cref="T:UnitsNet.ElectricSurfaceChargeDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.op_Subtraction(UnitsNet.ElectricSurfaceChargeDensity,UnitsNet.ElectricSurfaceChargeDensity)">
            <summary>Get <see cref="T:UnitsNet.ElectricSurfaceChargeDensity"/> from subtracting two <see cref="T:UnitsNet.ElectricSurfaceChargeDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.op_Multiply(System.Double,UnitsNet.ElectricSurfaceChargeDensity)">
            <summary>Get <see cref="T:UnitsNet.ElectricSurfaceChargeDensity"/> from multiplying value and <see cref="T:UnitsNet.ElectricSurfaceChargeDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.op_Multiply(UnitsNet.ElectricSurfaceChargeDensity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricSurfaceChargeDensity"/> from multiplying value and <see cref="T:UnitsNet.ElectricSurfaceChargeDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.op_Division(UnitsNet.ElectricSurfaceChargeDensity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ElectricSurfaceChargeDensity"/> from dividing <see cref="T:UnitsNet.ElectricSurfaceChargeDensity"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.op_Division(UnitsNet.ElectricSurfaceChargeDensity,UnitsNet.ElectricSurfaceChargeDensity)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.ElectricSurfaceChargeDensity"/> by <see cref="T:UnitsNet.ElectricSurfaceChargeDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.op_LessThanOrEqual(UnitsNet.ElectricSurfaceChargeDensity,UnitsNet.ElectricSurfaceChargeDensity)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.op_GreaterThanOrEqual(UnitsNet.ElectricSurfaceChargeDensity,UnitsNet.ElectricSurfaceChargeDensity)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.op_LessThan(UnitsNet.ElectricSurfaceChargeDensity,UnitsNet.ElectricSurfaceChargeDensity)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.op_GreaterThan(UnitsNet.ElectricSurfaceChargeDensity,UnitsNet.ElectricSurfaceChargeDensity)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.op_Equality(UnitsNet.ElectricSurfaceChargeDensity,UnitsNet.ElectricSurfaceChargeDensity)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricSurfaceChargeDensity.Equals(UnitsNet.ElectricSurfaceChargeDensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.op_Inequality(UnitsNet.ElectricSurfaceChargeDensity,UnitsNet.ElectricSurfaceChargeDensity)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ElectricSurfaceChargeDensity.Equals(UnitsNet.ElectricSurfaceChargeDensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.CompareTo(UnitsNet.ElectricSurfaceChargeDensity)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricSurfaceChargeDensity.Equals(UnitsNet.ElectricSurfaceChargeDensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.Equals(UnitsNet.ElectricSurfaceChargeDensity)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ElectricSurfaceChargeDensity.Equals(UnitsNet.ElectricSurfaceChargeDensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.Equals(UnitsNet.ElectricSurfaceChargeDensity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricSurfaceChargeDensity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricSurfaceChargeDensity.</returns>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.As(UnitsNet.Units.ElectricSurfaceChargeDensityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.ToUnit(UnitsNet.Units.ElectricSurfaceChargeDensityUnit)">
            <summary>
                Converts this ElectricSurfaceChargeDensity to another ElectricSurfaceChargeDensity with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A ElectricSurfaceChargeDensity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.ToUnit(UnitsNet.Units.ElectricSurfaceChargeDensityUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this ElectricSurfaceChargeDensity to another ElectricSurfaceChargeDensity using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A ElectricSurfaceChargeDensity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.UnitsNet#IQuantity{UnitsNet#Units#ElectricSurfaceChargeDensityUnit}#ToUnit(UnitsNet.Units.ElectricSurfaceChargeDensityUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.UnitsNet#IQuantity{UnitsNet#Units#ElectricSurfaceChargeDensityUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricSurfaceChargeDensity.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Entropy">
            <inheritdoc />
            <summary>
                Entropy is an important concept in the branch of science known as thermodynamics. The idea of "irreversibility" is central to the understanding of entropy.  It is often said that entropy is an expression of the disorder, or randomness of a system, or of our lack of information about it. Entropy is an extensive property. It has the dimension of energy divided by temperature, which has a unit of joules per kelvin (J/K) in the International System of Units
            </summary>
        </member>
        <member name="F:UnitsNet.Entropy._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Entropy._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Entropy.#ctor(System.Double,UnitsNet.Units.EntropyUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Entropy.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Entropy.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Entropy" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Entropy.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Entropy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.BaseUnit">
            <summary>
                The base unit of Entropy, which is JoulePerKelvin. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.MaxValue">
            <summary>
            Represents the largest possible value of Entropy
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.MinValue">
            <summary>
            Represents the smallest possible value of Entropy
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Entropy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.Units">
            <summary>
                All units of measurement for the Entropy quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit JoulePerKelvin.
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Entropy.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Entropy.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Entropy.Type">
            <summary>
                The <see cref="P:UnitsNet.Entropy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Entropy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.CaloriesPerKelvin">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EntropyUnit.CaloriePerKelvin"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.JoulesPerDegreeCelsius">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EntropyUnit.JoulePerDegreeCelsius"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.JoulesPerKelvin">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EntropyUnit.JoulePerKelvin"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.KilocaloriesPerKelvin">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EntropyUnit.KilocaloriePerKelvin"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.KilojoulesPerDegreeCelsius">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EntropyUnit.KilojoulePerDegreeCelsius"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.KilojoulesPerKelvin">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EntropyUnit.KilojoulePerKelvin"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.MegajoulesPerKelvin">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.EntropyUnit.MegajoulePerKelvin"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Entropy.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Entropy.GetAbbreviation(UnitsNet.Units.EntropyUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Entropy.GetAbbreviation(UnitsNet.Units.EntropyUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Entropy.FromCaloriesPerKelvin(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Entropy"/> from <see cref="F:UnitsNet.Units.EntropyUnit.CaloriePerKelvin"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Entropy.FromJoulesPerDegreeCelsius(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Entropy"/> from <see cref="F:UnitsNet.Units.EntropyUnit.JoulePerDegreeCelsius"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Entropy.FromJoulesPerKelvin(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Entropy"/> from <see cref="F:UnitsNet.Units.EntropyUnit.JoulePerKelvin"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Entropy.FromKilocaloriesPerKelvin(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Entropy"/> from <see cref="F:UnitsNet.Units.EntropyUnit.KilocaloriePerKelvin"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Entropy.FromKilojoulesPerDegreeCelsius(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Entropy"/> from <see cref="F:UnitsNet.Units.EntropyUnit.KilojoulePerDegreeCelsius"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Entropy.FromKilojoulesPerKelvin(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Entropy"/> from <see cref="F:UnitsNet.Units.EntropyUnit.KilojoulePerKelvin"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Entropy.FromMegajoulesPerKelvin(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Entropy"/> from <see cref="F:UnitsNet.Units.EntropyUnit.MegajoulePerKelvin"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Entropy.From(UnitsNet.QuantityValue,UnitsNet.Units.EntropyUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.EntropyUnit" /> to <see cref="T:UnitsNet.Entropy" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Entropy unit value.</returns>
        </member>
        <member name="M:UnitsNet.Entropy.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Entropy.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Entropy.TryParse(System.String,UnitsNet.Entropy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Entropy.TryParse(System.String,System.IFormatProvider,UnitsNet.Entropy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Entropy.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Entropy.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Entropy.TryParseUnit(System.String,UnitsNet.Units.EntropyUnit@)">
            <inheritdoc cref="M:UnitsNet.Entropy.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.EntropyUnit@)"/>
        </member>
        <member name="M:UnitsNet.Entropy.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.EntropyUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Entropy.op_UnaryNegation(UnitsNet.Entropy)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Entropy.op_Addition(UnitsNet.Entropy,UnitsNet.Entropy)">
            <summary>Get <see cref="T:UnitsNet.Entropy"/> from adding two <see cref="T:UnitsNet.Entropy"/>.</summary>
        </member>
        <member name="M:UnitsNet.Entropy.op_Subtraction(UnitsNet.Entropy,UnitsNet.Entropy)">
            <summary>Get <see cref="T:UnitsNet.Entropy"/> from subtracting two <see cref="T:UnitsNet.Entropy"/>.</summary>
        </member>
        <member name="M:UnitsNet.Entropy.op_Multiply(System.Double,UnitsNet.Entropy)">
            <summary>Get <see cref="T:UnitsNet.Entropy"/> from multiplying value and <see cref="T:UnitsNet.Entropy"/>.</summary>
        </member>
        <member name="M:UnitsNet.Entropy.op_Multiply(UnitsNet.Entropy,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Entropy"/> from multiplying value and <see cref="T:UnitsNet.Entropy"/>.</summary>
        </member>
        <member name="M:UnitsNet.Entropy.op_Division(UnitsNet.Entropy,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Entropy"/> from dividing <see cref="T:UnitsNet.Entropy"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Entropy.op_Division(UnitsNet.Entropy,UnitsNet.Entropy)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Entropy"/> by <see cref="T:UnitsNet.Entropy"/>.</summary>
        </member>
        <member name="M:UnitsNet.Entropy.op_LessThanOrEqual(UnitsNet.Entropy,UnitsNet.Entropy)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Entropy.op_GreaterThanOrEqual(UnitsNet.Entropy,UnitsNet.Entropy)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Entropy.op_LessThan(UnitsNet.Entropy,UnitsNet.Entropy)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Entropy.op_GreaterThan(UnitsNet.Entropy,UnitsNet.Entropy)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Entropy.op_Equality(UnitsNet.Entropy,UnitsNet.Entropy)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Entropy.Equals(UnitsNet.Entropy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Entropy.op_Inequality(UnitsNet.Entropy,UnitsNet.Entropy)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Entropy.Equals(UnitsNet.Entropy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Entropy.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Entropy.CompareTo(UnitsNet.Entropy)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Entropy.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Entropy.Equals(UnitsNet.Entropy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Entropy.Equals(UnitsNet.Entropy)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Entropy.Equals(UnitsNet.Entropy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Entropy.Equals(UnitsNet.Entropy,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Entropy within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Entropy.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Entropy.</returns>
        </member>
        <member name="M:UnitsNet.Entropy.As(UnitsNet.Units.EntropyUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Entropy.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Entropy.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Entropy.ToUnit(UnitsNet.Units.EntropyUnit)">
            <summary>
                Converts this Entropy to another Entropy with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Entropy with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Entropy.ToUnit(UnitsNet.Units.EntropyUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Entropy to another Entropy using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Entropy with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Entropy.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Entropy.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Entropy.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Entropy.UnitsNet#IQuantity{UnitsNet#Units#EntropyUnit}#ToUnit(UnitsNet.Units.EntropyUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Entropy.UnitsNet#IQuantity{UnitsNet#Units#EntropyUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Entropy.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Entropy.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Entropy.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Entropy.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Entropy.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Entropy.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Frequency">
            <inheritdoc />
            <summary>
                The number of occurrences of a repeating event per unit time.
            </summary>
        </member>
        <member name="F:UnitsNet.Frequency._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Frequency._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Frequency.#ctor(System.Double,UnitsNet.Units.FrequencyUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Frequency.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Frequency.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Frequency" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Frequency.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Frequency.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.BaseUnit">
            <summary>
                The base unit of Frequency, which is Hertz. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.MaxValue">
            <summary>
            Represents the largest possible value of Frequency
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.MinValue">
            <summary>
            Represents the smallest possible value of Frequency
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Frequency.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.Units">
            <summary>
                All units of measurement for the Frequency quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Hertz.
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Frequency.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Frequency.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Frequency.Type">
            <summary>
                The <see cref="P:UnitsNet.Frequency.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Frequency.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.BeatsPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.FrequencyUnit.BeatPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.BUnits">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.FrequencyUnit.BUnit"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.CyclesPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.FrequencyUnit.CyclePerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.CyclesPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.FrequencyUnit.CyclePerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.Gigahertz">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.FrequencyUnit.Gigahertz"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.Hertz">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.FrequencyUnit.Hertz"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.Kilohertz">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.FrequencyUnit.Kilohertz"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.Megahertz">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.FrequencyUnit.Megahertz"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.PerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.FrequencyUnit.PerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.RadiansPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.FrequencyUnit.RadianPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.Terahertz">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.FrequencyUnit.Terahertz"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Frequency.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Frequency.GetAbbreviation(UnitsNet.Units.FrequencyUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Frequency.GetAbbreviation(UnitsNet.Units.FrequencyUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Frequency.FromBeatsPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Frequency"/> from <see cref="F:UnitsNet.Units.FrequencyUnit.BeatPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Frequency.FromBUnits(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Frequency"/> from <see cref="F:UnitsNet.Units.FrequencyUnit.BUnit"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Frequency.FromCyclesPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Frequency"/> from <see cref="F:UnitsNet.Units.FrequencyUnit.CyclePerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Frequency.FromCyclesPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Frequency"/> from <see cref="F:UnitsNet.Units.FrequencyUnit.CyclePerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Frequency.FromGigahertz(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Frequency"/> from <see cref="F:UnitsNet.Units.FrequencyUnit.Gigahertz"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Frequency.FromHertz(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Frequency"/> from <see cref="F:UnitsNet.Units.FrequencyUnit.Hertz"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Frequency.FromKilohertz(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Frequency"/> from <see cref="F:UnitsNet.Units.FrequencyUnit.Kilohertz"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Frequency.FromMegahertz(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Frequency"/> from <see cref="F:UnitsNet.Units.FrequencyUnit.Megahertz"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Frequency.FromPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Frequency"/> from <see cref="F:UnitsNet.Units.FrequencyUnit.PerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Frequency.FromRadiansPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Frequency"/> from <see cref="F:UnitsNet.Units.FrequencyUnit.RadianPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Frequency.FromTerahertz(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Frequency"/> from <see cref="F:UnitsNet.Units.FrequencyUnit.Terahertz"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Frequency.From(UnitsNet.QuantityValue,UnitsNet.Units.FrequencyUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.FrequencyUnit" /> to <see cref="T:UnitsNet.Frequency" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Frequency unit value.</returns>
        </member>
        <member name="M:UnitsNet.Frequency.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Frequency.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Frequency.TryParse(System.String,UnitsNet.Frequency@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Frequency.TryParse(System.String,System.IFormatProvider,UnitsNet.Frequency@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Frequency.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Frequency.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Frequency.TryParseUnit(System.String,UnitsNet.Units.FrequencyUnit@)">
            <inheritdoc cref="M:UnitsNet.Frequency.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.FrequencyUnit@)"/>
        </member>
        <member name="M:UnitsNet.Frequency.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.FrequencyUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Frequency.op_UnaryNegation(UnitsNet.Frequency)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Frequency.op_Addition(UnitsNet.Frequency,UnitsNet.Frequency)">
            <summary>Get <see cref="T:UnitsNet.Frequency"/> from adding two <see cref="T:UnitsNet.Frequency"/>.</summary>
        </member>
        <member name="M:UnitsNet.Frequency.op_Subtraction(UnitsNet.Frequency,UnitsNet.Frequency)">
            <summary>Get <see cref="T:UnitsNet.Frequency"/> from subtracting two <see cref="T:UnitsNet.Frequency"/>.</summary>
        </member>
        <member name="M:UnitsNet.Frequency.op_Multiply(System.Double,UnitsNet.Frequency)">
            <summary>Get <see cref="T:UnitsNet.Frequency"/> from multiplying value and <see cref="T:UnitsNet.Frequency"/>.</summary>
        </member>
        <member name="M:UnitsNet.Frequency.op_Multiply(UnitsNet.Frequency,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Frequency"/> from multiplying value and <see cref="T:UnitsNet.Frequency"/>.</summary>
        </member>
        <member name="M:UnitsNet.Frequency.op_Division(UnitsNet.Frequency,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Frequency"/> from dividing <see cref="T:UnitsNet.Frequency"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Frequency.op_Division(UnitsNet.Frequency,UnitsNet.Frequency)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Frequency"/> by <see cref="T:UnitsNet.Frequency"/>.</summary>
        </member>
        <member name="M:UnitsNet.Frequency.op_LessThanOrEqual(UnitsNet.Frequency,UnitsNet.Frequency)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Frequency.op_GreaterThanOrEqual(UnitsNet.Frequency,UnitsNet.Frequency)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Frequency.op_LessThan(UnitsNet.Frequency,UnitsNet.Frequency)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Frequency.op_GreaterThan(UnitsNet.Frequency,UnitsNet.Frequency)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Frequency.op_Equality(UnitsNet.Frequency,UnitsNet.Frequency)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Frequency.Equals(UnitsNet.Frequency,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Frequency.op_Inequality(UnitsNet.Frequency,UnitsNet.Frequency)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Frequency.Equals(UnitsNet.Frequency,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Frequency.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Frequency.CompareTo(UnitsNet.Frequency)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Frequency.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Frequency.Equals(UnitsNet.Frequency,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Frequency.Equals(UnitsNet.Frequency)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Frequency.Equals(UnitsNet.Frequency,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Frequency.Equals(UnitsNet.Frequency,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Frequency within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Frequency.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Frequency.</returns>
        </member>
        <member name="M:UnitsNet.Frequency.As(UnitsNet.Units.FrequencyUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Frequency.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Frequency.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Frequency.ToUnit(UnitsNet.Units.FrequencyUnit)">
            <summary>
                Converts this Frequency to another Frequency with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Frequency with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Frequency.ToUnit(UnitsNet.Units.FrequencyUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Frequency to another Frequency using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Frequency with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Frequency.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Frequency.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Frequency.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Frequency.UnitsNet#IQuantity{UnitsNet#Units#FrequencyUnit}#ToUnit(UnitsNet.Units.FrequencyUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Frequency.UnitsNet#IQuantity{UnitsNet#Units#FrequencyUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Frequency.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Frequency.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Frequency.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Frequency.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Frequency.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Frequency.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.FuelEfficiency">
            <inheritdoc />
            <summary>
                Fuel efficiency is a form of thermal efficiency, meaning the ratio from effort to result of a process that converts chemical potential energy contained in a carrier (fuel) into kinetic energy or work. Fuel economy is stated as "fuel consumption" in liters per 100 kilometers (L/100 km). In countries using non-metric system, fuel economy is expressed in miles per gallon (mpg) (imperial galon or US galon).
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Fuel_efficiency
            </remarks>
        </member>
        <member name="F:UnitsNet.FuelEfficiency._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.FuelEfficiency._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.#ctor(System.Double,UnitsNet.Units.FuelEfficiencyUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.FuelEfficiency.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.FuelEfficiency" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.FuelEfficiency.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.FuelEfficiency.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.FuelEfficiency.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.FuelEfficiency.BaseUnit">
            <summary>
                The base unit of FuelEfficiency, which is LiterPer100Kilometers. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.FuelEfficiency.MaxValue">
            <summary>
            Represents the largest possible value of FuelEfficiency
            </summary>
        </member>
        <member name="P:UnitsNet.FuelEfficiency.MinValue">
            <summary>
            Represents the smallest possible value of FuelEfficiency
            </summary>
        </member>
        <member name="P:UnitsNet.FuelEfficiency.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.FuelEfficiency.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.FuelEfficiency.Units">
            <summary>
                All units of measurement for the FuelEfficiency quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.FuelEfficiency.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit LiterPer100Kilometers.
            </summary>
        </member>
        <member name="P:UnitsNet.FuelEfficiency.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.FuelEfficiency.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.FuelEfficiency.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.FuelEfficiency.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.FuelEfficiency.Type">
            <summary>
                The <see cref="P:UnitsNet.FuelEfficiency.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.FuelEfficiency.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.FuelEfficiency.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.FuelEfficiency.KilometersPerLiters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.FuelEfficiencyUnit.KilometerPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.FuelEfficiency.LitersPer100Kilometers">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.FuelEfficiencyUnit.LiterPer100Kilometers"/>
            </summary>
        </member>
        <member name="P:UnitsNet.FuelEfficiency.MilesPerUkGallon">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.FuelEfficiencyUnit.MilePerUkGallon"/>
            </summary>
        </member>
        <member name="P:UnitsNet.FuelEfficiency.MilesPerUsGallon">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.FuelEfficiencyUnit.MilePerUsGallon"/>
            </summary>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.GetAbbreviation(UnitsNet.Units.FuelEfficiencyUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.GetAbbreviation(UnitsNet.Units.FuelEfficiencyUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.FromKilometersPerLiters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.FuelEfficiency"/> from <see cref="F:UnitsNet.Units.FuelEfficiencyUnit.KilometerPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.FromLitersPer100Kilometers(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.FuelEfficiency"/> from <see cref="F:UnitsNet.Units.FuelEfficiencyUnit.LiterPer100Kilometers"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.FromMilesPerUkGallon(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.FuelEfficiency"/> from <see cref="F:UnitsNet.Units.FuelEfficiencyUnit.MilePerUkGallon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.FromMilesPerUsGallon(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.FuelEfficiency"/> from <see cref="F:UnitsNet.Units.FuelEfficiencyUnit.MilePerUsGallon"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.From(UnitsNet.QuantityValue,UnitsNet.Units.FuelEfficiencyUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.FuelEfficiencyUnit" /> to <see cref="T:UnitsNet.FuelEfficiency" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>FuelEfficiency unit value.</returns>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.TryParse(System.String,UnitsNet.FuelEfficiency@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.TryParse(System.String,System.IFormatProvider,UnitsNet.FuelEfficiency@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.TryParseUnit(System.String,UnitsNet.Units.FuelEfficiencyUnit@)">
            <inheritdoc cref="M:UnitsNet.FuelEfficiency.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.FuelEfficiencyUnit@)"/>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.FuelEfficiencyUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.op_UnaryNegation(UnitsNet.FuelEfficiency)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.op_Addition(UnitsNet.FuelEfficiency,UnitsNet.FuelEfficiency)">
            <summary>Get <see cref="T:UnitsNet.FuelEfficiency"/> from adding two <see cref="T:UnitsNet.FuelEfficiency"/>.</summary>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.op_Subtraction(UnitsNet.FuelEfficiency,UnitsNet.FuelEfficiency)">
            <summary>Get <see cref="T:UnitsNet.FuelEfficiency"/> from subtracting two <see cref="T:UnitsNet.FuelEfficiency"/>.</summary>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.op_Multiply(System.Double,UnitsNet.FuelEfficiency)">
            <summary>Get <see cref="T:UnitsNet.FuelEfficiency"/> from multiplying value and <see cref="T:UnitsNet.FuelEfficiency"/>.</summary>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.op_Multiply(UnitsNet.FuelEfficiency,System.Double)">
            <summary>Get <see cref="T:UnitsNet.FuelEfficiency"/> from multiplying value and <see cref="T:UnitsNet.FuelEfficiency"/>.</summary>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.op_Division(UnitsNet.FuelEfficiency,System.Double)">
            <summary>Get <see cref="T:UnitsNet.FuelEfficiency"/> from dividing <see cref="T:UnitsNet.FuelEfficiency"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.op_Division(UnitsNet.FuelEfficiency,UnitsNet.FuelEfficiency)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.FuelEfficiency"/> by <see cref="T:UnitsNet.FuelEfficiency"/>.</summary>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.op_LessThanOrEqual(UnitsNet.FuelEfficiency,UnitsNet.FuelEfficiency)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.op_GreaterThanOrEqual(UnitsNet.FuelEfficiency,UnitsNet.FuelEfficiency)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.op_LessThan(UnitsNet.FuelEfficiency,UnitsNet.FuelEfficiency)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.op_GreaterThan(UnitsNet.FuelEfficiency,UnitsNet.FuelEfficiency)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.op_Equality(UnitsNet.FuelEfficiency,UnitsNet.FuelEfficiency)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.FuelEfficiency.Equals(UnitsNet.FuelEfficiency,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.op_Inequality(UnitsNet.FuelEfficiency,UnitsNet.FuelEfficiency)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.FuelEfficiency.Equals(UnitsNet.FuelEfficiency,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.FuelEfficiency.CompareTo(UnitsNet.FuelEfficiency)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.FuelEfficiency.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.FuelEfficiency.Equals(UnitsNet.FuelEfficiency,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.Equals(UnitsNet.FuelEfficiency)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.FuelEfficiency.Equals(UnitsNet.FuelEfficiency,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.Equals(UnitsNet.FuelEfficiency,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another FuelEfficiency within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current FuelEfficiency.</returns>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.As(UnitsNet.Units.FuelEfficiencyUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.FuelEfficiency.ToUnit(UnitsNet.Units.FuelEfficiencyUnit)">
            <summary>
                Converts this FuelEfficiency to another FuelEfficiency with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A FuelEfficiency with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.ToUnit(UnitsNet.Units.FuelEfficiencyUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this FuelEfficiency to another FuelEfficiency using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A FuelEfficiency with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.FuelEfficiency.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.FuelEfficiency.UnitsNet#IQuantity{UnitsNet#Units#FuelEfficiencyUnit}#ToUnit(UnitsNet.Units.FuelEfficiencyUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.FuelEfficiency.UnitsNet#IQuantity{UnitsNet#Units#FuelEfficiencyUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.FuelEfficiency.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.FuelEfficiency.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.HeatTransferCoefficient">
            <inheritdoc />
            <summary>
                The heat transfer coefficient or film coefficient, or film effectiveness, in thermodynamics and in mechanics is the proportionality constant between the heat flux and the thermodynamic driving force for the flow of heat (i.e., the temperature difference, ΔT)
            </summary>
        </member>
        <member name="F:UnitsNet.HeatTransferCoefficient._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.HeatTransferCoefficient._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.#ctor(System.Double,UnitsNet.Units.HeatTransferCoefficientUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.HeatTransferCoefficient" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.HeatTransferCoefficient.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.BaseUnit">
            <summary>
                The base unit of HeatTransferCoefficient, which is WattPerSquareMeterKelvin. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.MaxValue">
            <summary>
            Represents the largest possible value of HeatTransferCoefficient
            </summary>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.MinValue">
            <summary>
            Represents the smallest possible value of HeatTransferCoefficient
            </summary>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.HeatTransferCoefficient.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.Units">
            <summary>
                All units of measurement for the HeatTransferCoefficient quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit WattPerSquareMeterKelvin.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.Type">
            <summary>
                The <see cref="P:UnitsNet.HeatTransferCoefficient.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.HeatTransferCoefficient.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.BtusPerSquareFootDegreeFahrenheit">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.HeatTransferCoefficientUnit.BtuPerSquareFootDegreeFahrenheit"/>
            </summary>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.WattsPerSquareMeterCelsius">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.HeatTransferCoefficientUnit.WattPerSquareMeterCelsius"/>
            </summary>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.WattsPerSquareMeterKelvin">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.HeatTransferCoefficientUnit.WattPerSquareMeterKelvin"/>
            </summary>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.GetAbbreviation(UnitsNet.Units.HeatTransferCoefficientUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.GetAbbreviation(UnitsNet.Units.HeatTransferCoefficientUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.FromBtusPerSquareFootDegreeFahrenheit(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.HeatTransferCoefficient"/> from <see cref="F:UnitsNet.Units.HeatTransferCoefficientUnit.BtuPerSquareFootDegreeFahrenheit"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.FromWattsPerSquareMeterCelsius(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.HeatTransferCoefficient"/> from <see cref="F:UnitsNet.Units.HeatTransferCoefficientUnit.WattPerSquareMeterCelsius"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.FromWattsPerSquareMeterKelvin(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.HeatTransferCoefficient"/> from <see cref="F:UnitsNet.Units.HeatTransferCoefficientUnit.WattPerSquareMeterKelvin"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.From(UnitsNet.QuantityValue,UnitsNet.Units.HeatTransferCoefficientUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.HeatTransferCoefficientUnit" /> to <see cref="T:UnitsNet.HeatTransferCoefficient" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>HeatTransferCoefficient unit value.</returns>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.TryParse(System.String,UnitsNet.HeatTransferCoefficient@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.TryParse(System.String,System.IFormatProvider,UnitsNet.HeatTransferCoefficient@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.TryParseUnit(System.String,UnitsNet.Units.HeatTransferCoefficientUnit@)">
            <inheritdoc cref="M:UnitsNet.HeatTransferCoefficient.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.HeatTransferCoefficientUnit@)"/>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.HeatTransferCoefficientUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.op_UnaryNegation(UnitsNet.HeatTransferCoefficient)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.op_Addition(UnitsNet.HeatTransferCoefficient,UnitsNet.HeatTransferCoefficient)">
            <summary>Get <see cref="T:UnitsNet.HeatTransferCoefficient"/> from adding two <see cref="T:UnitsNet.HeatTransferCoefficient"/>.</summary>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.op_Subtraction(UnitsNet.HeatTransferCoefficient,UnitsNet.HeatTransferCoefficient)">
            <summary>Get <see cref="T:UnitsNet.HeatTransferCoefficient"/> from subtracting two <see cref="T:UnitsNet.HeatTransferCoefficient"/>.</summary>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.op_Multiply(System.Double,UnitsNet.HeatTransferCoefficient)">
            <summary>Get <see cref="T:UnitsNet.HeatTransferCoefficient"/> from multiplying value and <see cref="T:UnitsNet.HeatTransferCoefficient"/>.</summary>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.op_Multiply(UnitsNet.HeatTransferCoefficient,System.Double)">
            <summary>Get <see cref="T:UnitsNet.HeatTransferCoefficient"/> from multiplying value and <see cref="T:UnitsNet.HeatTransferCoefficient"/>.</summary>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.op_Division(UnitsNet.HeatTransferCoefficient,System.Double)">
            <summary>Get <see cref="T:UnitsNet.HeatTransferCoefficient"/> from dividing <see cref="T:UnitsNet.HeatTransferCoefficient"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.op_Division(UnitsNet.HeatTransferCoefficient,UnitsNet.HeatTransferCoefficient)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.HeatTransferCoefficient"/> by <see cref="T:UnitsNet.HeatTransferCoefficient"/>.</summary>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.op_LessThanOrEqual(UnitsNet.HeatTransferCoefficient,UnitsNet.HeatTransferCoefficient)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.op_GreaterThanOrEqual(UnitsNet.HeatTransferCoefficient,UnitsNet.HeatTransferCoefficient)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.op_LessThan(UnitsNet.HeatTransferCoefficient,UnitsNet.HeatTransferCoefficient)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.op_GreaterThan(UnitsNet.HeatTransferCoefficient,UnitsNet.HeatTransferCoefficient)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.op_Equality(UnitsNet.HeatTransferCoefficient,UnitsNet.HeatTransferCoefficient)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.HeatTransferCoefficient.Equals(UnitsNet.HeatTransferCoefficient,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.op_Inequality(UnitsNet.HeatTransferCoefficient,UnitsNet.HeatTransferCoefficient)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.HeatTransferCoefficient.Equals(UnitsNet.HeatTransferCoefficient,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.CompareTo(UnitsNet.HeatTransferCoefficient)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.HeatTransferCoefficient.Equals(UnitsNet.HeatTransferCoefficient,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.Equals(UnitsNet.HeatTransferCoefficient)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.HeatTransferCoefficient.Equals(UnitsNet.HeatTransferCoefficient,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.Equals(UnitsNet.HeatTransferCoefficient,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another HeatTransferCoefficient within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current HeatTransferCoefficient.</returns>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.As(UnitsNet.Units.HeatTransferCoefficientUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.ToUnit(UnitsNet.Units.HeatTransferCoefficientUnit)">
            <summary>
                Converts this HeatTransferCoefficient to another HeatTransferCoefficient with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A HeatTransferCoefficient with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.ToUnit(UnitsNet.Units.HeatTransferCoefficientUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this HeatTransferCoefficient to another HeatTransferCoefficient using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A HeatTransferCoefficient with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.UnitsNet#IQuantity{UnitsNet#Units#HeatTransferCoefficientUnit}#ToUnit(UnitsNet.Units.HeatTransferCoefficientUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.UnitsNet#IQuantity{UnitsNet#Units#HeatTransferCoefficientUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Illuminance">
            <inheritdoc />
            <summary>
                In photometry, illuminance is the total luminous flux incident on a surface, per unit area.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Illuminance
            </remarks>
        </member>
        <member name="F:UnitsNet.Illuminance._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Illuminance._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Illuminance.#ctor(System.Double,UnitsNet.Units.IlluminanceUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Illuminance.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Illuminance.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Illuminance" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Illuminance.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Illuminance.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Illuminance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Illuminance.BaseUnit">
            <summary>
                The base unit of Illuminance, which is Lux. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Illuminance.MaxValue">
            <summary>
            Represents the largest possible value of Illuminance
            </summary>
        </member>
        <member name="P:UnitsNet.Illuminance.MinValue">
            <summary>
            Represents the smallest possible value of Illuminance
            </summary>
        </member>
        <member name="P:UnitsNet.Illuminance.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Illuminance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Illuminance.Units">
            <summary>
                All units of measurement for the Illuminance quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Illuminance.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Lux.
            </summary>
        </member>
        <member name="P:UnitsNet.Illuminance.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Illuminance.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Illuminance.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Illuminance.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Illuminance.Type">
            <summary>
                The <see cref="P:UnitsNet.Illuminance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Illuminance.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Illuminance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Illuminance.Kilolux">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.IlluminanceUnit.Kilolux"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Illuminance.Lux">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.IlluminanceUnit.Lux"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Illuminance.Megalux">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.IlluminanceUnit.Megalux"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Illuminance.Millilux">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.IlluminanceUnit.Millilux"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Illuminance.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Illuminance.GetAbbreviation(UnitsNet.Units.IlluminanceUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Illuminance.GetAbbreviation(UnitsNet.Units.IlluminanceUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Illuminance.FromKilolux(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Illuminance"/> from <see cref="F:UnitsNet.Units.IlluminanceUnit.Kilolux"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Illuminance.FromLux(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Illuminance"/> from <see cref="F:UnitsNet.Units.IlluminanceUnit.Lux"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Illuminance.FromMegalux(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Illuminance"/> from <see cref="F:UnitsNet.Units.IlluminanceUnit.Megalux"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Illuminance.FromMillilux(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Illuminance"/> from <see cref="F:UnitsNet.Units.IlluminanceUnit.Millilux"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Illuminance.From(UnitsNet.QuantityValue,UnitsNet.Units.IlluminanceUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.IlluminanceUnit" /> to <see cref="T:UnitsNet.Illuminance" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Illuminance unit value.</returns>
        </member>
        <member name="M:UnitsNet.Illuminance.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Illuminance.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Illuminance.TryParse(System.String,UnitsNet.Illuminance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Illuminance.TryParse(System.String,System.IFormatProvider,UnitsNet.Illuminance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Illuminance.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Illuminance.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Illuminance.TryParseUnit(System.String,UnitsNet.Units.IlluminanceUnit@)">
            <inheritdoc cref="M:UnitsNet.Illuminance.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.IlluminanceUnit@)"/>
        </member>
        <member name="M:UnitsNet.Illuminance.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.IlluminanceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Illuminance.op_UnaryNegation(UnitsNet.Illuminance)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Illuminance.op_Addition(UnitsNet.Illuminance,UnitsNet.Illuminance)">
            <summary>Get <see cref="T:UnitsNet.Illuminance"/> from adding two <see cref="T:UnitsNet.Illuminance"/>.</summary>
        </member>
        <member name="M:UnitsNet.Illuminance.op_Subtraction(UnitsNet.Illuminance,UnitsNet.Illuminance)">
            <summary>Get <see cref="T:UnitsNet.Illuminance"/> from subtracting two <see cref="T:UnitsNet.Illuminance"/>.</summary>
        </member>
        <member name="M:UnitsNet.Illuminance.op_Multiply(System.Double,UnitsNet.Illuminance)">
            <summary>Get <see cref="T:UnitsNet.Illuminance"/> from multiplying value and <see cref="T:UnitsNet.Illuminance"/>.</summary>
        </member>
        <member name="M:UnitsNet.Illuminance.op_Multiply(UnitsNet.Illuminance,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Illuminance"/> from multiplying value and <see cref="T:UnitsNet.Illuminance"/>.</summary>
        </member>
        <member name="M:UnitsNet.Illuminance.op_Division(UnitsNet.Illuminance,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Illuminance"/> from dividing <see cref="T:UnitsNet.Illuminance"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Illuminance.op_Division(UnitsNet.Illuminance,UnitsNet.Illuminance)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Illuminance"/> by <see cref="T:UnitsNet.Illuminance"/>.</summary>
        </member>
        <member name="M:UnitsNet.Illuminance.op_LessThanOrEqual(UnitsNet.Illuminance,UnitsNet.Illuminance)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Illuminance.op_GreaterThanOrEqual(UnitsNet.Illuminance,UnitsNet.Illuminance)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Illuminance.op_LessThan(UnitsNet.Illuminance,UnitsNet.Illuminance)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Illuminance.op_GreaterThan(UnitsNet.Illuminance,UnitsNet.Illuminance)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Illuminance.op_Equality(UnitsNet.Illuminance,UnitsNet.Illuminance)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Illuminance.Equals(UnitsNet.Illuminance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Illuminance.op_Inequality(UnitsNet.Illuminance,UnitsNet.Illuminance)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Illuminance.Equals(UnitsNet.Illuminance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Illuminance.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Illuminance.CompareTo(UnitsNet.Illuminance)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Illuminance.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Illuminance.Equals(UnitsNet.Illuminance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Illuminance.Equals(UnitsNet.Illuminance)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Illuminance.Equals(UnitsNet.Illuminance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Illuminance.Equals(UnitsNet.Illuminance,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Illuminance within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Illuminance.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Illuminance.</returns>
        </member>
        <member name="M:UnitsNet.Illuminance.As(UnitsNet.Units.IlluminanceUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Illuminance.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Illuminance.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Illuminance.ToUnit(UnitsNet.Units.IlluminanceUnit)">
            <summary>
                Converts this Illuminance to another Illuminance with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Illuminance with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Illuminance.ToUnit(UnitsNet.Units.IlluminanceUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Illuminance to another Illuminance using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Illuminance with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Illuminance.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Illuminance.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Illuminance.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Illuminance.UnitsNet#IQuantity{UnitsNet#Units#IlluminanceUnit}#ToUnit(UnitsNet.Units.IlluminanceUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Illuminance.UnitsNet#IQuantity{UnitsNet#Units#IlluminanceUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Illuminance.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Illuminance.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Illuminance.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Illuminance.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Illuminance.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Illuminance.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Information">
            <inheritdoc />
            <summary>
                In computing and telecommunications, a unit of information is the capacity of some standard data storage system or communication channel, used to measure the capacities of other systems and channels. In information theory, units of information are also used to measure the information contents or entropy of random variables.
            </summary>
        </member>
        <member name="F:UnitsNet.Information._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Information._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Information.#ctor(System.Decimal,UnitsNet.Units.InformationUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.#ctor(System.Decimal,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Information.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Information" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Information.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Information.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.BaseUnit">
            <summary>
                The base unit of Information, which is Bit. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.MaxValue">
            <summary>
            Represents the largest possible value of Information
            </summary>
        </member>
        <member name="P:UnitsNet.Information.MinValue">
            <summary>
            Represents the smallest possible value of Information
            </summary>
        </member>
        <member name="P:UnitsNet.Information.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Information.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Units">
            <summary>
                All units of measurement for the Information quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Bit.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.UnitsNet#IDecimalQuantity#Value">
            <inheritdoc cref="P:UnitsNet.IDecimalQuantity.Value"/>
        </member>
        <member name="P:UnitsNet.Information.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Information.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Information.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Information.Type">
            <summary>
                The <see cref="P:UnitsNet.Information.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Information.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Bits">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.InformationUnit.Bit"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Bytes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.InformationUnit.Byte"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Exabits">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.InformationUnit.Exabit"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Exabytes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.InformationUnit.Exabyte"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Exbibits">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.InformationUnit.Exbibit"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Exbibytes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.InformationUnit.Exbibyte"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Gibibits">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.InformationUnit.Gibibit"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Gibibytes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.InformationUnit.Gibibyte"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Gigabits">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.InformationUnit.Gigabit"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Gigabytes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.InformationUnit.Gigabyte"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Kibibits">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.InformationUnit.Kibibit"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Kibibytes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.InformationUnit.Kibibyte"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Kilobits">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.InformationUnit.Kilobit"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Kilobytes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.InformationUnit.Kilobyte"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Mebibits">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.InformationUnit.Mebibit"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Mebibytes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.InformationUnit.Mebibyte"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Megabits">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.InformationUnit.Megabit"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Megabytes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.InformationUnit.Megabyte"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Pebibits">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.InformationUnit.Pebibit"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Pebibytes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.InformationUnit.Pebibyte"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Petabits">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.InformationUnit.Petabit"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Petabytes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.InformationUnit.Petabyte"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Tebibits">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.InformationUnit.Tebibit"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Tebibytes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.InformationUnit.Tebibyte"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Terabits">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.InformationUnit.Terabit"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Terabytes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.InformationUnit.Terabyte"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Information.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Information.GetAbbreviation(UnitsNet.Units.InformationUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Information.GetAbbreviation(UnitsNet.Units.InformationUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Information.FromBits(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Information"/> from <see cref="F:UnitsNet.Units.InformationUnit.Bit"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromBytes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Information"/> from <see cref="F:UnitsNet.Units.InformationUnit.Byte"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromExabits(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Information"/> from <see cref="F:UnitsNet.Units.InformationUnit.Exabit"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromExabytes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Information"/> from <see cref="F:UnitsNet.Units.InformationUnit.Exabyte"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromExbibits(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Information"/> from <see cref="F:UnitsNet.Units.InformationUnit.Exbibit"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromExbibytes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Information"/> from <see cref="F:UnitsNet.Units.InformationUnit.Exbibyte"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromGibibits(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Information"/> from <see cref="F:UnitsNet.Units.InformationUnit.Gibibit"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromGibibytes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Information"/> from <see cref="F:UnitsNet.Units.InformationUnit.Gibibyte"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromGigabits(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Information"/> from <see cref="F:UnitsNet.Units.InformationUnit.Gigabit"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromGigabytes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Information"/> from <see cref="F:UnitsNet.Units.InformationUnit.Gigabyte"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromKibibits(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Information"/> from <see cref="F:UnitsNet.Units.InformationUnit.Kibibit"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromKibibytes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Information"/> from <see cref="F:UnitsNet.Units.InformationUnit.Kibibyte"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromKilobits(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Information"/> from <see cref="F:UnitsNet.Units.InformationUnit.Kilobit"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromKilobytes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Information"/> from <see cref="F:UnitsNet.Units.InformationUnit.Kilobyte"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromMebibits(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Information"/> from <see cref="F:UnitsNet.Units.InformationUnit.Mebibit"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromMebibytes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Information"/> from <see cref="F:UnitsNet.Units.InformationUnit.Mebibyte"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromMegabits(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Information"/> from <see cref="F:UnitsNet.Units.InformationUnit.Megabit"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromMegabytes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Information"/> from <see cref="F:UnitsNet.Units.InformationUnit.Megabyte"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromPebibits(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Information"/> from <see cref="F:UnitsNet.Units.InformationUnit.Pebibit"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromPebibytes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Information"/> from <see cref="F:UnitsNet.Units.InformationUnit.Pebibyte"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromPetabits(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Information"/> from <see cref="F:UnitsNet.Units.InformationUnit.Petabit"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromPetabytes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Information"/> from <see cref="F:UnitsNet.Units.InformationUnit.Petabyte"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromTebibits(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Information"/> from <see cref="F:UnitsNet.Units.InformationUnit.Tebibit"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromTebibytes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Information"/> from <see cref="F:UnitsNet.Units.InformationUnit.Tebibyte"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromTerabits(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Information"/> from <see cref="F:UnitsNet.Units.InformationUnit.Terabit"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromTerabytes(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Information"/> from <see cref="F:UnitsNet.Units.InformationUnit.Terabyte"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.From(UnitsNet.QuantityValue,UnitsNet.Units.InformationUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.InformationUnit" /> to <see cref="T:UnitsNet.Information" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Information unit value.</returns>
        </member>
        <member name="M:UnitsNet.Information.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Information.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Information.TryParse(System.String,UnitsNet.Information@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Information.TryParse(System.String,System.IFormatProvider,UnitsNet.Information@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Information.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Information.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Information.TryParseUnit(System.String,UnitsNet.Units.InformationUnit@)">
            <inheritdoc cref="M:UnitsNet.Information.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.InformationUnit@)"/>
        </member>
        <member name="M:UnitsNet.Information.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.InformationUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Information.op_UnaryNegation(UnitsNet.Information)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Information.op_Addition(UnitsNet.Information,UnitsNet.Information)">
            <summary>Get <see cref="T:UnitsNet.Information"/> from adding two <see cref="T:UnitsNet.Information"/>.</summary>
        </member>
        <member name="M:UnitsNet.Information.op_Subtraction(UnitsNet.Information,UnitsNet.Information)">
            <summary>Get <see cref="T:UnitsNet.Information"/> from subtracting two <see cref="T:UnitsNet.Information"/>.</summary>
        </member>
        <member name="M:UnitsNet.Information.op_Multiply(System.Decimal,UnitsNet.Information)">
            <summary>Get <see cref="T:UnitsNet.Information"/> from multiplying value and <see cref="T:UnitsNet.Information"/>.</summary>
        </member>
        <member name="M:UnitsNet.Information.op_Multiply(UnitsNet.Information,System.Decimal)">
            <summary>Get <see cref="T:UnitsNet.Information"/> from multiplying value and <see cref="T:UnitsNet.Information"/>.</summary>
        </member>
        <member name="M:UnitsNet.Information.op_Division(UnitsNet.Information,System.Decimal)">
            <summary>Get <see cref="T:UnitsNet.Information"/> from dividing <see cref="T:UnitsNet.Information"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Information.op_Division(UnitsNet.Information,UnitsNet.Information)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Information"/> by <see cref="T:UnitsNet.Information"/>.</summary>
        </member>
        <member name="M:UnitsNet.Information.op_LessThanOrEqual(UnitsNet.Information,UnitsNet.Information)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Information.op_GreaterThanOrEqual(UnitsNet.Information,UnitsNet.Information)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Information.op_LessThan(UnitsNet.Information,UnitsNet.Information)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Information.op_GreaterThan(UnitsNet.Information,UnitsNet.Information)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Information.op_Equality(UnitsNet.Information,UnitsNet.Information)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Information.Equals(UnitsNet.Information,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Information.op_Inequality(UnitsNet.Information,UnitsNet.Information)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Information.Equals(UnitsNet.Information,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Information.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Information.CompareTo(UnitsNet.Information)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Information.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Information.Equals(UnitsNet.Information,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Information.Equals(UnitsNet.Information)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Information.Equals(UnitsNet.Information,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Information.Equals(UnitsNet.Information,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Information within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Information.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Information.</returns>
        </member>
        <member name="M:UnitsNet.Information.As(UnitsNet.Units.InformationUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Information.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Information.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Information.ToUnit(UnitsNet.Units.InformationUnit)">
            <summary>
                Converts this Information to another Information with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Information with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Information.ToUnit(UnitsNet.Units.InformationUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Information to another Information using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Information with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Information.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Information.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Information.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Information.UnitsNet#IQuantity{UnitsNet#Units#InformationUnit}#ToUnit(UnitsNet.Units.InformationUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Information.UnitsNet#IQuantity{UnitsNet#Units#InformationUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Information.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Information.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Information.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Information.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Information.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Information.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Irradiance">
            <inheritdoc />
            <summary>
                Irradiance is the intensity of ultraviolet (UV) or visible light incident on a surface.
            </summary>
        </member>
        <member name="F:UnitsNet.Irradiance._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Irradiance._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Irradiance.#ctor(System.Double,UnitsNet.Units.IrradianceUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Irradiance.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Irradiance.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Irradiance" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Irradiance.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Irradiance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.BaseUnit">
            <summary>
                The base unit of Irradiance, which is WattPerSquareMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.MaxValue">
            <summary>
            Represents the largest possible value of Irradiance
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.MinValue">
            <summary>
            Represents the smallest possible value of Irradiance
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Irradiance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.Units">
            <summary>
                All units of measurement for the Irradiance quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit WattPerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Irradiance.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Irradiance.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Irradiance.Type">
            <summary>
                The <see cref="P:UnitsNet.Irradiance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Irradiance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.KilowattsPerSquareCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.IrradianceUnit.KilowattPerSquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.KilowattsPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.IrradianceUnit.KilowattPerSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.MegawattsPerSquareCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.IrradianceUnit.MegawattPerSquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.MegawattsPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.IrradianceUnit.MegawattPerSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.MicrowattsPerSquareCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.IrradianceUnit.MicrowattPerSquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.MicrowattsPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.IrradianceUnit.MicrowattPerSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.MilliwattsPerSquareCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.IrradianceUnit.MilliwattPerSquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.MilliwattsPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.IrradianceUnit.MilliwattPerSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.NanowattsPerSquareCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.IrradianceUnit.NanowattPerSquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.NanowattsPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.IrradianceUnit.NanowattPerSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.PicowattsPerSquareCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.IrradianceUnit.PicowattPerSquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.PicowattsPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.IrradianceUnit.PicowattPerSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.WattsPerSquareCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.IrradianceUnit.WattPerSquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.WattsPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.IrradianceUnit.WattPerSquareMeter"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Irradiance.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Irradiance.GetAbbreviation(UnitsNet.Units.IrradianceUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Irradiance.GetAbbreviation(UnitsNet.Units.IrradianceUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Irradiance.FromKilowattsPerSquareCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Irradiance"/> from <see cref="F:UnitsNet.Units.IrradianceUnit.KilowattPerSquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Irradiance.FromKilowattsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Irradiance"/> from <see cref="F:UnitsNet.Units.IrradianceUnit.KilowattPerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Irradiance.FromMegawattsPerSquareCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Irradiance"/> from <see cref="F:UnitsNet.Units.IrradianceUnit.MegawattPerSquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Irradiance.FromMegawattsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Irradiance"/> from <see cref="F:UnitsNet.Units.IrradianceUnit.MegawattPerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Irradiance.FromMicrowattsPerSquareCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Irradiance"/> from <see cref="F:UnitsNet.Units.IrradianceUnit.MicrowattPerSquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Irradiance.FromMicrowattsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Irradiance"/> from <see cref="F:UnitsNet.Units.IrradianceUnit.MicrowattPerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Irradiance.FromMilliwattsPerSquareCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Irradiance"/> from <see cref="F:UnitsNet.Units.IrradianceUnit.MilliwattPerSquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Irradiance.FromMilliwattsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Irradiance"/> from <see cref="F:UnitsNet.Units.IrradianceUnit.MilliwattPerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Irradiance.FromNanowattsPerSquareCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Irradiance"/> from <see cref="F:UnitsNet.Units.IrradianceUnit.NanowattPerSquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Irradiance.FromNanowattsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Irradiance"/> from <see cref="F:UnitsNet.Units.IrradianceUnit.NanowattPerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Irradiance.FromPicowattsPerSquareCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Irradiance"/> from <see cref="F:UnitsNet.Units.IrradianceUnit.PicowattPerSquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Irradiance.FromPicowattsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Irradiance"/> from <see cref="F:UnitsNet.Units.IrradianceUnit.PicowattPerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Irradiance.FromWattsPerSquareCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Irradiance"/> from <see cref="F:UnitsNet.Units.IrradianceUnit.WattPerSquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Irradiance.FromWattsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Irradiance"/> from <see cref="F:UnitsNet.Units.IrradianceUnit.WattPerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Irradiance.From(UnitsNet.QuantityValue,UnitsNet.Units.IrradianceUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.IrradianceUnit" /> to <see cref="T:UnitsNet.Irradiance" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Irradiance unit value.</returns>
        </member>
        <member name="M:UnitsNet.Irradiance.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Irradiance.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Irradiance.TryParse(System.String,UnitsNet.Irradiance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Irradiance.TryParse(System.String,System.IFormatProvider,UnitsNet.Irradiance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Irradiance.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Irradiance.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Irradiance.TryParseUnit(System.String,UnitsNet.Units.IrradianceUnit@)">
            <inheritdoc cref="M:UnitsNet.Irradiance.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.IrradianceUnit@)"/>
        </member>
        <member name="M:UnitsNet.Irradiance.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.IrradianceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Irradiance.op_UnaryNegation(UnitsNet.Irradiance)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Irradiance.op_Addition(UnitsNet.Irradiance,UnitsNet.Irradiance)">
            <summary>Get <see cref="T:UnitsNet.Irradiance"/> from adding two <see cref="T:UnitsNet.Irradiance"/>.</summary>
        </member>
        <member name="M:UnitsNet.Irradiance.op_Subtraction(UnitsNet.Irradiance,UnitsNet.Irradiance)">
            <summary>Get <see cref="T:UnitsNet.Irradiance"/> from subtracting two <see cref="T:UnitsNet.Irradiance"/>.</summary>
        </member>
        <member name="M:UnitsNet.Irradiance.op_Multiply(System.Double,UnitsNet.Irradiance)">
            <summary>Get <see cref="T:UnitsNet.Irradiance"/> from multiplying value and <see cref="T:UnitsNet.Irradiance"/>.</summary>
        </member>
        <member name="M:UnitsNet.Irradiance.op_Multiply(UnitsNet.Irradiance,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Irradiance"/> from multiplying value and <see cref="T:UnitsNet.Irradiance"/>.</summary>
        </member>
        <member name="M:UnitsNet.Irradiance.op_Division(UnitsNet.Irradiance,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Irradiance"/> from dividing <see cref="T:UnitsNet.Irradiance"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Irradiance.op_Division(UnitsNet.Irradiance,UnitsNet.Irradiance)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Irradiance"/> by <see cref="T:UnitsNet.Irradiance"/>.</summary>
        </member>
        <member name="M:UnitsNet.Irradiance.op_LessThanOrEqual(UnitsNet.Irradiance,UnitsNet.Irradiance)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Irradiance.op_GreaterThanOrEqual(UnitsNet.Irradiance,UnitsNet.Irradiance)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Irradiance.op_LessThan(UnitsNet.Irradiance,UnitsNet.Irradiance)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Irradiance.op_GreaterThan(UnitsNet.Irradiance,UnitsNet.Irradiance)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Irradiance.op_Equality(UnitsNet.Irradiance,UnitsNet.Irradiance)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Irradiance.Equals(UnitsNet.Irradiance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Irradiance.op_Inequality(UnitsNet.Irradiance,UnitsNet.Irradiance)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Irradiance.Equals(UnitsNet.Irradiance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Irradiance.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Irradiance.CompareTo(UnitsNet.Irradiance)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Irradiance.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Irradiance.Equals(UnitsNet.Irradiance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Irradiance.Equals(UnitsNet.Irradiance)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Irradiance.Equals(UnitsNet.Irradiance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Irradiance.Equals(UnitsNet.Irradiance,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Irradiance within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Irradiance.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Irradiance.</returns>
        </member>
        <member name="M:UnitsNet.Irradiance.As(UnitsNet.Units.IrradianceUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Irradiance.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Irradiance.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Irradiance.ToUnit(UnitsNet.Units.IrradianceUnit)">
            <summary>
                Converts this Irradiance to another Irradiance with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Irradiance with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Irradiance.ToUnit(UnitsNet.Units.IrradianceUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Irradiance to another Irradiance using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Irradiance with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Irradiance.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Irradiance.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Irradiance.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Irradiance.UnitsNet#IQuantity{UnitsNet#Units#IrradianceUnit}#ToUnit(UnitsNet.Units.IrradianceUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Irradiance.UnitsNet#IQuantity{UnitsNet#Units#IrradianceUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Irradiance.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Irradiance.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Irradiance.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Irradiance.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Irradiance.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Irradiance.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Irradiation">
            <inheritdoc />
            <summary>
                Irradiation is the process by which an object is exposed to radiation. The exposure can originate from various sources, including natural sources.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Irradiation
            </remarks>
        </member>
        <member name="F:UnitsNet.Irradiation._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Irradiation._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Irradiation.#ctor(System.Double,UnitsNet.Units.IrradiationUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Irradiation.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Irradiation.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Irradiation" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Irradiation.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Irradiation.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.BaseUnit">
            <summary>
                The base unit of Irradiation, which is JoulePerSquareMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.MaxValue">
            <summary>
            Represents the largest possible value of Irradiation
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.MinValue">
            <summary>
            Represents the smallest possible value of Irradiation
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Irradiation.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.Units">
            <summary>
                All units of measurement for the Irradiation quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit JoulePerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Irradiation.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Irradiation.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Irradiation.Type">
            <summary>
                The <see cref="P:UnitsNet.Irradiation.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Irradiation.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.JoulesPerSquareCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.IrradiationUnit.JoulePerSquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.JoulesPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.IrradiationUnit.JoulePerSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.JoulesPerSquareMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.IrradiationUnit.JoulePerSquareMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.KilojoulesPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.IrradiationUnit.KilojoulePerSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.KilowattHoursPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.IrradiationUnit.KilowattHourPerSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.MillijoulesPerSquareCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.IrradiationUnit.MillijoulePerSquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.WattHoursPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.IrradiationUnit.WattHourPerSquareMeter"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Irradiation.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Irradiation.GetAbbreviation(UnitsNet.Units.IrradiationUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Irradiation.GetAbbreviation(UnitsNet.Units.IrradiationUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Irradiation.FromJoulesPerSquareCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Irradiation"/> from <see cref="F:UnitsNet.Units.IrradiationUnit.JoulePerSquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Irradiation.FromJoulesPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Irradiation"/> from <see cref="F:UnitsNet.Units.IrradiationUnit.JoulePerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Irradiation.FromJoulesPerSquareMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Irradiation"/> from <see cref="F:UnitsNet.Units.IrradiationUnit.JoulePerSquareMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Irradiation.FromKilojoulesPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Irradiation"/> from <see cref="F:UnitsNet.Units.IrradiationUnit.KilojoulePerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Irradiation.FromKilowattHoursPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Irradiation"/> from <see cref="F:UnitsNet.Units.IrradiationUnit.KilowattHourPerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Irradiation.FromMillijoulesPerSquareCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Irradiation"/> from <see cref="F:UnitsNet.Units.IrradiationUnit.MillijoulePerSquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Irradiation.FromWattHoursPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Irradiation"/> from <see cref="F:UnitsNet.Units.IrradiationUnit.WattHourPerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Irradiation.From(UnitsNet.QuantityValue,UnitsNet.Units.IrradiationUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.IrradiationUnit" /> to <see cref="T:UnitsNet.Irradiation" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Irradiation unit value.</returns>
        </member>
        <member name="M:UnitsNet.Irradiation.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Irradiation.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Irradiation.TryParse(System.String,UnitsNet.Irradiation@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Irradiation.TryParse(System.String,System.IFormatProvider,UnitsNet.Irradiation@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Irradiation.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Irradiation.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Irradiation.TryParseUnit(System.String,UnitsNet.Units.IrradiationUnit@)">
            <inheritdoc cref="M:UnitsNet.Irradiation.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.IrradiationUnit@)"/>
        </member>
        <member name="M:UnitsNet.Irradiation.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.IrradiationUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Irradiation.op_UnaryNegation(UnitsNet.Irradiation)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Irradiation.op_Addition(UnitsNet.Irradiation,UnitsNet.Irradiation)">
            <summary>Get <see cref="T:UnitsNet.Irradiation"/> from adding two <see cref="T:UnitsNet.Irradiation"/>.</summary>
        </member>
        <member name="M:UnitsNet.Irradiation.op_Subtraction(UnitsNet.Irradiation,UnitsNet.Irradiation)">
            <summary>Get <see cref="T:UnitsNet.Irradiation"/> from subtracting two <see cref="T:UnitsNet.Irradiation"/>.</summary>
        </member>
        <member name="M:UnitsNet.Irradiation.op_Multiply(System.Double,UnitsNet.Irradiation)">
            <summary>Get <see cref="T:UnitsNet.Irradiation"/> from multiplying value and <see cref="T:UnitsNet.Irradiation"/>.</summary>
        </member>
        <member name="M:UnitsNet.Irradiation.op_Multiply(UnitsNet.Irradiation,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Irradiation"/> from multiplying value and <see cref="T:UnitsNet.Irradiation"/>.</summary>
        </member>
        <member name="M:UnitsNet.Irradiation.op_Division(UnitsNet.Irradiation,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Irradiation"/> from dividing <see cref="T:UnitsNet.Irradiation"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Irradiation.op_Division(UnitsNet.Irradiation,UnitsNet.Irradiation)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Irradiation"/> by <see cref="T:UnitsNet.Irradiation"/>.</summary>
        </member>
        <member name="M:UnitsNet.Irradiation.op_LessThanOrEqual(UnitsNet.Irradiation,UnitsNet.Irradiation)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Irradiation.op_GreaterThanOrEqual(UnitsNet.Irradiation,UnitsNet.Irradiation)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Irradiation.op_LessThan(UnitsNet.Irradiation,UnitsNet.Irradiation)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Irradiation.op_GreaterThan(UnitsNet.Irradiation,UnitsNet.Irradiation)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Irradiation.op_Equality(UnitsNet.Irradiation,UnitsNet.Irradiation)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Irradiation.Equals(UnitsNet.Irradiation,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Irradiation.op_Inequality(UnitsNet.Irradiation,UnitsNet.Irradiation)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Irradiation.Equals(UnitsNet.Irradiation,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Irradiation.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Irradiation.CompareTo(UnitsNet.Irradiation)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Irradiation.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Irradiation.Equals(UnitsNet.Irradiation,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Irradiation.Equals(UnitsNet.Irradiation)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Irradiation.Equals(UnitsNet.Irradiation,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Irradiation.Equals(UnitsNet.Irradiation,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Irradiation within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Irradiation.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Irradiation.</returns>
        </member>
        <member name="M:UnitsNet.Irradiation.As(UnitsNet.Units.IrradiationUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Irradiation.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Irradiation.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Irradiation.ToUnit(UnitsNet.Units.IrradiationUnit)">
            <summary>
                Converts this Irradiation to another Irradiation with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Irradiation with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Irradiation.ToUnit(UnitsNet.Units.IrradiationUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Irradiation to another Irradiation using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Irradiation with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Irradiation.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Irradiation.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Irradiation.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Irradiation.UnitsNet#IQuantity{UnitsNet#Units#IrradiationUnit}#ToUnit(UnitsNet.Units.IrradiationUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Irradiation.UnitsNet#IQuantity{UnitsNet#Units#IrradiationUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Irradiation.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Irradiation.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Irradiation.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Irradiation.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Irradiation.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Irradiation.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.LinearPowerDensity">
            <inheritdoc />
            <summary>
                The Linear Power Density of a substance is its power per unit length.  The term linear density is most often used when describing the characteristics of one-dimensional objects, although linear density can also be used to describe the density of a three-dimensional quantity along one particular dimension.
            </summary>
            <remarks>
                http://en.wikipedia.org/wiki/Linear_density
            </remarks>
        </member>
        <member name="F:UnitsNet.LinearPowerDensity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.LinearPowerDensity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.#ctor(System.Double,UnitsNet.Units.LinearPowerDensityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.LinearPowerDensity" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.LinearPowerDensity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.BaseUnit">
            <summary>
                The base unit of LinearPowerDensity, which is WattPerMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.MaxValue">
            <summary>
            Represents the largest possible value of LinearPowerDensity
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.MinValue">
            <summary>
            Represents the smallest possible value of LinearPowerDensity
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.LinearPowerDensity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.Units">
            <summary>
                All units of measurement for the LinearPowerDensity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit WattPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.Type">
            <summary>
                The <see cref="P:UnitsNet.LinearPowerDensity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.LinearPowerDensity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.GigawattsPerCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.GigawattPerCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.GigawattsPerFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.GigawattPerFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.GigawattsPerInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.GigawattPerInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.GigawattsPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.GigawattPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.GigawattsPerMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.GigawattPerMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.KilowattsPerCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.KilowattPerCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.KilowattsPerFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.KilowattPerFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.KilowattsPerInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.KilowattPerInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.KilowattsPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.KilowattPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.KilowattsPerMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.KilowattPerMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.MegawattsPerCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.MegawattPerCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.MegawattsPerFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.MegawattPerFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.MegawattsPerInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.MegawattPerInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.MegawattsPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.MegawattPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.MegawattsPerMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.MegawattPerMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.MilliwattsPerCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.MilliwattPerCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.MilliwattsPerFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.MilliwattPerFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.MilliwattsPerInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.MilliwattPerInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.MilliwattsPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.MilliwattPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.MilliwattsPerMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.MilliwattPerMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.WattsPerCentimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.WattPerCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.WattsPerFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.WattPerFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.WattsPerInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.WattPerInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.WattsPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.WattPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.LinearPowerDensity.WattsPerMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.WattPerMillimeter"/>
            </summary>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.GetAbbreviation(UnitsNet.Units.LinearPowerDensityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.GetAbbreviation(UnitsNet.Units.LinearPowerDensityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.FromGigawattsPerCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearPowerDensity"/> from <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.GigawattPerCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.FromGigawattsPerFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearPowerDensity"/> from <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.GigawattPerFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.FromGigawattsPerInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearPowerDensity"/> from <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.GigawattPerInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.FromGigawattsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearPowerDensity"/> from <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.GigawattPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.FromGigawattsPerMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearPowerDensity"/> from <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.GigawattPerMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.FromKilowattsPerCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearPowerDensity"/> from <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.KilowattPerCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.FromKilowattsPerFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearPowerDensity"/> from <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.KilowattPerFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.FromKilowattsPerInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearPowerDensity"/> from <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.KilowattPerInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.FromKilowattsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearPowerDensity"/> from <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.KilowattPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.FromKilowattsPerMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearPowerDensity"/> from <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.KilowattPerMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.FromMegawattsPerCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearPowerDensity"/> from <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.MegawattPerCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.FromMegawattsPerFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearPowerDensity"/> from <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.MegawattPerFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.FromMegawattsPerInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearPowerDensity"/> from <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.MegawattPerInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.FromMegawattsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearPowerDensity"/> from <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.MegawattPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.FromMegawattsPerMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearPowerDensity"/> from <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.MegawattPerMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.FromMilliwattsPerCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearPowerDensity"/> from <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.MilliwattPerCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.FromMilliwattsPerFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearPowerDensity"/> from <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.MilliwattPerFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.FromMilliwattsPerInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearPowerDensity"/> from <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.MilliwattPerInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.FromMilliwattsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearPowerDensity"/> from <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.MilliwattPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.FromMilliwattsPerMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearPowerDensity"/> from <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.MilliwattPerMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.FromWattsPerCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearPowerDensity"/> from <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.WattPerCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.FromWattsPerFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearPowerDensity"/> from <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.WattPerFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.FromWattsPerInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearPowerDensity"/> from <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.WattPerInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.FromWattsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearPowerDensity"/> from <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.WattPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.FromWattsPerMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LinearPowerDensity"/> from <see cref="F:UnitsNet.Units.LinearPowerDensityUnit.WattPerMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.From(UnitsNet.QuantityValue,UnitsNet.Units.LinearPowerDensityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.LinearPowerDensityUnit" /> to <see cref="T:UnitsNet.LinearPowerDensity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>LinearPowerDensity unit value.</returns>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.TryParse(System.String,UnitsNet.LinearPowerDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.TryParse(System.String,System.IFormatProvider,UnitsNet.LinearPowerDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.TryParseUnit(System.String,UnitsNet.Units.LinearPowerDensityUnit@)">
            <inheritdoc cref="M:UnitsNet.LinearPowerDensity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.LinearPowerDensityUnit@)"/>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.LinearPowerDensityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.op_UnaryNegation(UnitsNet.LinearPowerDensity)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.op_Addition(UnitsNet.LinearPowerDensity,UnitsNet.LinearPowerDensity)">
            <summary>Get <see cref="T:UnitsNet.LinearPowerDensity"/> from adding two <see cref="T:UnitsNet.LinearPowerDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.op_Subtraction(UnitsNet.LinearPowerDensity,UnitsNet.LinearPowerDensity)">
            <summary>Get <see cref="T:UnitsNet.LinearPowerDensity"/> from subtracting two <see cref="T:UnitsNet.LinearPowerDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.op_Multiply(System.Double,UnitsNet.LinearPowerDensity)">
            <summary>Get <see cref="T:UnitsNet.LinearPowerDensity"/> from multiplying value and <see cref="T:UnitsNet.LinearPowerDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.op_Multiply(UnitsNet.LinearPowerDensity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.LinearPowerDensity"/> from multiplying value and <see cref="T:UnitsNet.LinearPowerDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.op_Division(UnitsNet.LinearPowerDensity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.LinearPowerDensity"/> from dividing <see cref="T:UnitsNet.LinearPowerDensity"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.op_Division(UnitsNet.LinearPowerDensity,UnitsNet.LinearPowerDensity)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.LinearPowerDensity"/> by <see cref="T:UnitsNet.LinearPowerDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.op_LessThanOrEqual(UnitsNet.LinearPowerDensity,UnitsNet.LinearPowerDensity)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.op_GreaterThanOrEqual(UnitsNet.LinearPowerDensity,UnitsNet.LinearPowerDensity)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.op_LessThan(UnitsNet.LinearPowerDensity,UnitsNet.LinearPowerDensity)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.op_GreaterThan(UnitsNet.LinearPowerDensity,UnitsNet.LinearPowerDensity)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.op_Equality(UnitsNet.LinearPowerDensity,UnitsNet.LinearPowerDensity)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.LinearPowerDensity.Equals(UnitsNet.LinearPowerDensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.op_Inequality(UnitsNet.LinearPowerDensity,UnitsNet.LinearPowerDensity)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.LinearPowerDensity.Equals(UnitsNet.LinearPowerDensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.CompareTo(UnitsNet.LinearPowerDensity)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.LinearPowerDensity.Equals(UnitsNet.LinearPowerDensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.Equals(UnitsNet.LinearPowerDensity)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.LinearPowerDensity.Equals(UnitsNet.LinearPowerDensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.Equals(UnitsNet.LinearPowerDensity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another LinearPowerDensity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current LinearPowerDensity.</returns>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.As(UnitsNet.Units.LinearPowerDensityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.ToUnit(UnitsNet.Units.LinearPowerDensityUnit)">
            <summary>
                Converts this LinearPowerDensity to another LinearPowerDensity with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A LinearPowerDensity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.ToUnit(UnitsNet.Units.LinearPowerDensityUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this LinearPowerDensity to another LinearPowerDensity using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A LinearPowerDensity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.UnitsNet#IQuantity{UnitsNet#Units#LinearPowerDensityUnit}#ToUnit(UnitsNet.Units.LinearPowerDensityUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.UnitsNet#IQuantity{UnitsNet#Units#LinearPowerDensityUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.LinearPowerDensity.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Luminosity">
            <inheritdoc />
            <summary>
                Luminosity is an absolute measure of radiated electromagnetic power (light), the radiant power emitted by a light-emitting object.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Luminosity
            </remarks>
        </member>
        <member name="F:UnitsNet.Luminosity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Luminosity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Luminosity.#ctor(System.Double,UnitsNet.Units.LuminosityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Luminosity.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Luminosity.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Luminosity" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Luminosity.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Luminosity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Luminosity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Luminosity.BaseUnit">
            <summary>
                The base unit of Luminosity, which is Watt. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Luminosity.MaxValue">
            <summary>
            Represents the largest possible value of Luminosity
            </summary>
        </member>
        <member name="P:UnitsNet.Luminosity.MinValue">
            <summary>
            Represents the smallest possible value of Luminosity
            </summary>
        </member>
        <member name="P:UnitsNet.Luminosity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Luminosity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Luminosity.Units">
            <summary>
                All units of measurement for the Luminosity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Luminosity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Watt.
            </summary>
        </member>
        <member name="P:UnitsNet.Luminosity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Luminosity.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Luminosity.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Luminosity.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Luminosity.Type">
            <summary>
                The <see cref="P:UnitsNet.Luminosity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Luminosity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Luminosity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Luminosity.Decawatts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LuminosityUnit.Decawatt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Luminosity.Deciwatts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LuminosityUnit.Deciwatt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Luminosity.Femtowatts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LuminosityUnit.Femtowatt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Luminosity.Gigawatts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LuminosityUnit.Gigawatt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Luminosity.Kilowatts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LuminosityUnit.Kilowatt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Luminosity.Megawatts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LuminosityUnit.Megawatt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Luminosity.Microwatts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LuminosityUnit.Microwatt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Luminosity.Milliwatts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LuminosityUnit.Milliwatt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Luminosity.Nanowatts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LuminosityUnit.Nanowatt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Luminosity.Petawatts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LuminosityUnit.Petawatt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Luminosity.Picowatts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LuminosityUnit.Picowatt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Luminosity.SolarLuminosities">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LuminosityUnit.SolarLuminosity"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Luminosity.Terawatts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LuminosityUnit.Terawatt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Luminosity.Watts">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LuminosityUnit.Watt"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Luminosity.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Luminosity.GetAbbreviation(UnitsNet.Units.LuminosityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Luminosity.GetAbbreviation(UnitsNet.Units.LuminosityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Luminosity.FromDecawatts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Luminosity"/> from <see cref="F:UnitsNet.Units.LuminosityUnit.Decawatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Luminosity.FromDeciwatts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Luminosity"/> from <see cref="F:UnitsNet.Units.LuminosityUnit.Deciwatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Luminosity.FromFemtowatts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Luminosity"/> from <see cref="F:UnitsNet.Units.LuminosityUnit.Femtowatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Luminosity.FromGigawatts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Luminosity"/> from <see cref="F:UnitsNet.Units.LuminosityUnit.Gigawatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Luminosity.FromKilowatts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Luminosity"/> from <see cref="F:UnitsNet.Units.LuminosityUnit.Kilowatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Luminosity.FromMegawatts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Luminosity"/> from <see cref="F:UnitsNet.Units.LuminosityUnit.Megawatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Luminosity.FromMicrowatts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Luminosity"/> from <see cref="F:UnitsNet.Units.LuminosityUnit.Microwatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Luminosity.FromMilliwatts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Luminosity"/> from <see cref="F:UnitsNet.Units.LuminosityUnit.Milliwatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Luminosity.FromNanowatts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Luminosity"/> from <see cref="F:UnitsNet.Units.LuminosityUnit.Nanowatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Luminosity.FromPetawatts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Luminosity"/> from <see cref="F:UnitsNet.Units.LuminosityUnit.Petawatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Luminosity.FromPicowatts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Luminosity"/> from <see cref="F:UnitsNet.Units.LuminosityUnit.Picowatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Luminosity.FromSolarLuminosities(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Luminosity"/> from <see cref="F:UnitsNet.Units.LuminosityUnit.SolarLuminosity"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Luminosity.FromTerawatts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Luminosity"/> from <see cref="F:UnitsNet.Units.LuminosityUnit.Terawatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Luminosity.FromWatts(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Luminosity"/> from <see cref="F:UnitsNet.Units.LuminosityUnit.Watt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Luminosity.From(UnitsNet.QuantityValue,UnitsNet.Units.LuminosityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.LuminosityUnit" /> to <see cref="T:UnitsNet.Luminosity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Luminosity unit value.</returns>
        </member>
        <member name="M:UnitsNet.Luminosity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Luminosity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Luminosity.TryParse(System.String,UnitsNet.Luminosity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Luminosity.TryParse(System.String,System.IFormatProvider,UnitsNet.Luminosity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Luminosity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Luminosity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Luminosity.TryParseUnit(System.String,UnitsNet.Units.LuminosityUnit@)">
            <inheritdoc cref="M:UnitsNet.Luminosity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.LuminosityUnit@)"/>
        </member>
        <member name="M:UnitsNet.Luminosity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.LuminosityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Luminosity.op_UnaryNegation(UnitsNet.Luminosity)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Luminosity.op_Addition(UnitsNet.Luminosity,UnitsNet.Luminosity)">
            <summary>Get <see cref="T:UnitsNet.Luminosity"/> from adding two <see cref="T:UnitsNet.Luminosity"/>.</summary>
        </member>
        <member name="M:UnitsNet.Luminosity.op_Subtraction(UnitsNet.Luminosity,UnitsNet.Luminosity)">
            <summary>Get <see cref="T:UnitsNet.Luminosity"/> from subtracting two <see cref="T:UnitsNet.Luminosity"/>.</summary>
        </member>
        <member name="M:UnitsNet.Luminosity.op_Multiply(System.Double,UnitsNet.Luminosity)">
            <summary>Get <see cref="T:UnitsNet.Luminosity"/> from multiplying value and <see cref="T:UnitsNet.Luminosity"/>.</summary>
        </member>
        <member name="M:UnitsNet.Luminosity.op_Multiply(UnitsNet.Luminosity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Luminosity"/> from multiplying value and <see cref="T:UnitsNet.Luminosity"/>.</summary>
        </member>
        <member name="M:UnitsNet.Luminosity.op_Division(UnitsNet.Luminosity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Luminosity"/> from dividing <see cref="T:UnitsNet.Luminosity"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Luminosity.op_Division(UnitsNet.Luminosity,UnitsNet.Luminosity)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Luminosity"/> by <see cref="T:UnitsNet.Luminosity"/>.</summary>
        </member>
        <member name="M:UnitsNet.Luminosity.op_LessThanOrEqual(UnitsNet.Luminosity,UnitsNet.Luminosity)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Luminosity.op_GreaterThanOrEqual(UnitsNet.Luminosity,UnitsNet.Luminosity)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Luminosity.op_LessThan(UnitsNet.Luminosity,UnitsNet.Luminosity)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Luminosity.op_GreaterThan(UnitsNet.Luminosity,UnitsNet.Luminosity)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Luminosity.op_Equality(UnitsNet.Luminosity,UnitsNet.Luminosity)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Luminosity.Equals(UnitsNet.Luminosity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Luminosity.op_Inequality(UnitsNet.Luminosity,UnitsNet.Luminosity)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Luminosity.Equals(UnitsNet.Luminosity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Luminosity.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Luminosity.CompareTo(UnitsNet.Luminosity)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Luminosity.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Luminosity.Equals(UnitsNet.Luminosity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Luminosity.Equals(UnitsNet.Luminosity)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Luminosity.Equals(UnitsNet.Luminosity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Luminosity.Equals(UnitsNet.Luminosity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Luminosity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Luminosity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Luminosity.</returns>
        </member>
        <member name="M:UnitsNet.Luminosity.As(UnitsNet.Units.LuminosityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Luminosity.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Luminosity.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Luminosity.ToUnit(UnitsNet.Units.LuminosityUnit)">
            <summary>
                Converts this Luminosity to another Luminosity with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Luminosity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Luminosity.ToUnit(UnitsNet.Units.LuminosityUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Luminosity to another Luminosity using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Luminosity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Luminosity.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Luminosity.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Luminosity.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Luminosity.UnitsNet#IQuantity{UnitsNet#Units#LuminosityUnit}#ToUnit(UnitsNet.Units.LuminosityUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Luminosity.UnitsNet#IQuantity{UnitsNet#Units#LuminosityUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Luminosity.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Luminosity.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Luminosity.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Luminosity.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Luminosity.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Luminosity.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.LuminousFlux">
            <inheritdoc />
            <summary>
                In photometry, luminous flux or luminous power is the measure of the perceived power of light.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Luminous_flux
            </remarks>
        </member>
        <member name="F:UnitsNet.LuminousFlux._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.LuminousFlux._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.LuminousFlux.#ctor(System.Double,UnitsNet.Units.LuminousFluxUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LuminousFlux.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.LuminousFlux.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.LuminousFlux" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousFlux.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.LuminousFlux.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.LuminousFlux.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousFlux.BaseUnit">
            <summary>
                The base unit of LuminousFlux, which is Lumen. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousFlux.MaxValue">
            <summary>
            Represents the largest possible value of LuminousFlux
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousFlux.MinValue">
            <summary>
            Represents the smallest possible value of LuminousFlux
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousFlux.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.LuminousFlux.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousFlux.Units">
            <summary>
                All units of measurement for the LuminousFlux quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousFlux.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Lumen.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousFlux.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousFlux.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.LuminousFlux.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.LuminousFlux.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.LuminousFlux.Type">
            <summary>
                The <see cref="P:UnitsNet.LuminousFlux.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousFlux.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.LuminousFlux.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousFlux.Lumens">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LuminousFluxUnit.Lumen"/>
            </summary>
        </member>
        <member name="M:UnitsNet.LuminousFlux.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.LuminousFlux.GetAbbreviation(UnitsNet.Units.LuminousFluxUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.LuminousFlux.GetAbbreviation(UnitsNet.Units.LuminousFluxUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LuminousFlux.FromLumens(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LuminousFlux"/> from <see cref="F:UnitsNet.Units.LuminousFluxUnit.Lumen"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LuminousFlux.From(UnitsNet.QuantityValue,UnitsNet.Units.LuminousFluxUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.LuminousFluxUnit" /> to <see cref="T:UnitsNet.LuminousFlux" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>LuminousFlux unit value.</returns>
        </member>
        <member name="M:UnitsNet.LuminousFlux.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.LuminousFlux.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LuminousFlux.TryParse(System.String,UnitsNet.LuminousFlux@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.LuminousFlux.TryParse(System.String,System.IFormatProvider,UnitsNet.LuminousFlux@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LuminousFlux.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.LuminousFlux.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.LuminousFlux.TryParseUnit(System.String,UnitsNet.Units.LuminousFluxUnit@)">
            <inheritdoc cref="M:UnitsNet.LuminousFlux.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.LuminousFluxUnit@)"/>
        </member>
        <member name="M:UnitsNet.LuminousFlux.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.LuminousFluxUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LuminousFlux.op_UnaryNegation(UnitsNet.LuminousFlux)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.LuminousFlux.op_Addition(UnitsNet.LuminousFlux,UnitsNet.LuminousFlux)">
            <summary>Get <see cref="T:UnitsNet.LuminousFlux"/> from adding two <see cref="T:UnitsNet.LuminousFlux"/>.</summary>
        </member>
        <member name="M:UnitsNet.LuminousFlux.op_Subtraction(UnitsNet.LuminousFlux,UnitsNet.LuminousFlux)">
            <summary>Get <see cref="T:UnitsNet.LuminousFlux"/> from subtracting two <see cref="T:UnitsNet.LuminousFlux"/>.</summary>
        </member>
        <member name="M:UnitsNet.LuminousFlux.op_Multiply(System.Double,UnitsNet.LuminousFlux)">
            <summary>Get <see cref="T:UnitsNet.LuminousFlux"/> from multiplying value and <see cref="T:UnitsNet.LuminousFlux"/>.</summary>
        </member>
        <member name="M:UnitsNet.LuminousFlux.op_Multiply(UnitsNet.LuminousFlux,System.Double)">
            <summary>Get <see cref="T:UnitsNet.LuminousFlux"/> from multiplying value and <see cref="T:UnitsNet.LuminousFlux"/>.</summary>
        </member>
        <member name="M:UnitsNet.LuminousFlux.op_Division(UnitsNet.LuminousFlux,System.Double)">
            <summary>Get <see cref="T:UnitsNet.LuminousFlux"/> from dividing <see cref="T:UnitsNet.LuminousFlux"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.LuminousFlux.op_Division(UnitsNet.LuminousFlux,UnitsNet.LuminousFlux)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.LuminousFlux"/> by <see cref="T:UnitsNet.LuminousFlux"/>.</summary>
        </member>
        <member name="M:UnitsNet.LuminousFlux.op_LessThanOrEqual(UnitsNet.LuminousFlux,UnitsNet.LuminousFlux)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.LuminousFlux.op_GreaterThanOrEqual(UnitsNet.LuminousFlux,UnitsNet.LuminousFlux)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.LuminousFlux.op_LessThan(UnitsNet.LuminousFlux,UnitsNet.LuminousFlux)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.LuminousFlux.op_GreaterThan(UnitsNet.LuminousFlux,UnitsNet.LuminousFlux)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.LuminousFlux.op_Equality(UnitsNet.LuminousFlux,UnitsNet.LuminousFlux)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.LuminousFlux.Equals(UnitsNet.LuminousFlux,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.LuminousFlux.op_Inequality(UnitsNet.LuminousFlux,UnitsNet.LuminousFlux)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.LuminousFlux.Equals(UnitsNet.LuminousFlux,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.LuminousFlux.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LuminousFlux.CompareTo(UnitsNet.LuminousFlux)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LuminousFlux.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.LuminousFlux.Equals(UnitsNet.LuminousFlux,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.LuminousFlux.Equals(UnitsNet.LuminousFlux)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.LuminousFlux.Equals(UnitsNet.LuminousFlux,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.LuminousFlux.Equals(UnitsNet.LuminousFlux,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another LuminousFlux within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.LuminousFlux.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current LuminousFlux.</returns>
        </member>
        <member name="M:UnitsNet.LuminousFlux.As(UnitsNet.Units.LuminousFluxUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.LuminousFlux.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.LuminousFlux.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LuminousFlux.ToUnit(UnitsNet.Units.LuminousFluxUnit)">
            <summary>
                Converts this LuminousFlux to another LuminousFlux with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A LuminousFlux with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.LuminousFlux.ToUnit(UnitsNet.Units.LuminousFluxUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this LuminousFlux to another LuminousFlux using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A LuminousFlux with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.LuminousFlux.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LuminousFlux.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.LuminousFlux.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LuminousFlux.UnitsNet#IQuantity{UnitsNet#Units#LuminousFluxUnit}#ToUnit(UnitsNet.Units.LuminousFluxUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LuminousFlux.UnitsNet#IQuantity{UnitsNet#Units#LuminousFluxUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LuminousFlux.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.LuminousFlux.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LuminousFlux.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LuminousFlux.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LuminousFlux.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.LuminousFlux.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.LuminousIntensity">
            <inheritdoc />
            <summary>
                In photometry, luminous intensity is a measure of the wavelength-weighted power emitted by a light source in a particular direction per unit solid angle, based on the luminosity function, a standardized model of the sensitivity of the human eye.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Luminous_intensity
            </remarks>
        </member>
        <member name="F:UnitsNet.LuminousIntensity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.LuminousIntensity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.#ctor(System.Double,UnitsNet.Units.LuminousIntensityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.LuminousIntensity.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.LuminousIntensity" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousIntensity.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.LuminousIntensity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.LuminousIntensity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousIntensity.BaseUnit">
            <summary>
                The base unit of LuminousIntensity, which is Candela. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousIntensity.MaxValue">
            <summary>
            Represents the largest possible value of LuminousIntensity
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousIntensity.MinValue">
            <summary>
            Represents the smallest possible value of LuminousIntensity
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousIntensity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.LuminousIntensity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousIntensity.Units">
            <summary>
                All units of measurement for the LuminousIntensity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousIntensity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Candela.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousIntensity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousIntensity.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.LuminousIntensity.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.LuminousIntensity.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.LuminousIntensity.Type">
            <summary>
                The <see cref="P:UnitsNet.LuminousIntensity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousIntensity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.LuminousIntensity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousIntensity.Candela">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LuminousIntensityUnit.Candela"/>
            </summary>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.GetAbbreviation(UnitsNet.Units.LuminousIntensityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.GetAbbreviation(UnitsNet.Units.LuminousIntensityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.FromCandela(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.LuminousIntensity"/> from <see cref="F:UnitsNet.Units.LuminousIntensityUnit.Candela"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.From(UnitsNet.QuantityValue,UnitsNet.Units.LuminousIntensityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.LuminousIntensityUnit" /> to <see cref="T:UnitsNet.LuminousIntensity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>LuminousIntensity unit value.</returns>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.TryParse(System.String,UnitsNet.LuminousIntensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.TryParse(System.String,System.IFormatProvider,UnitsNet.LuminousIntensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.TryParseUnit(System.String,UnitsNet.Units.LuminousIntensityUnit@)">
            <inheritdoc cref="M:UnitsNet.LuminousIntensity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.LuminousIntensityUnit@)"/>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.LuminousIntensityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.op_UnaryNegation(UnitsNet.LuminousIntensity)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.op_Addition(UnitsNet.LuminousIntensity,UnitsNet.LuminousIntensity)">
            <summary>Get <see cref="T:UnitsNet.LuminousIntensity"/> from adding two <see cref="T:UnitsNet.LuminousIntensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.op_Subtraction(UnitsNet.LuminousIntensity,UnitsNet.LuminousIntensity)">
            <summary>Get <see cref="T:UnitsNet.LuminousIntensity"/> from subtracting two <see cref="T:UnitsNet.LuminousIntensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.op_Multiply(System.Double,UnitsNet.LuminousIntensity)">
            <summary>Get <see cref="T:UnitsNet.LuminousIntensity"/> from multiplying value and <see cref="T:UnitsNet.LuminousIntensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.op_Multiply(UnitsNet.LuminousIntensity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.LuminousIntensity"/> from multiplying value and <see cref="T:UnitsNet.LuminousIntensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.op_Division(UnitsNet.LuminousIntensity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.LuminousIntensity"/> from dividing <see cref="T:UnitsNet.LuminousIntensity"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.op_Division(UnitsNet.LuminousIntensity,UnitsNet.LuminousIntensity)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.LuminousIntensity"/> by <see cref="T:UnitsNet.LuminousIntensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.op_LessThanOrEqual(UnitsNet.LuminousIntensity,UnitsNet.LuminousIntensity)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.op_GreaterThanOrEqual(UnitsNet.LuminousIntensity,UnitsNet.LuminousIntensity)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.op_LessThan(UnitsNet.LuminousIntensity,UnitsNet.LuminousIntensity)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.op_GreaterThan(UnitsNet.LuminousIntensity,UnitsNet.LuminousIntensity)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.op_Equality(UnitsNet.LuminousIntensity,UnitsNet.LuminousIntensity)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.LuminousIntensity.Equals(UnitsNet.LuminousIntensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.op_Inequality(UnitsNet.LuminousIntensity,UnitsNet.LuminousIntensity)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.LuminousIntensity.Equals(UnitsNet.LuminousIntensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LuminousIntensity.CompareTo(UnitsNet.LuminousIntensity)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LuminousIntensity.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.LuminousIntensity.Equals(UnitsNet.LuminousIntensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.Equals(UnitsNet.LuminousIntensity)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.LuminousIntensity.Equals(UnitsNet.LuminousIntensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.Equals(UnitsNet.LuminousIntensity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another LuminousIntensity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current LuminousIntensity.</returns>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.As(UnitsNet.Units.LuminousIntensityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LuminousIntensity.ToUnit(UnitsNet.Units.LuminousIntensityUnit)">
            <summary>
                Converts this LuminousIntensity to another LuminousIntensity with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A LuminousIntensity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.ToUnit(UnitsNet.Units.LuminousIntensityUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this LuminousIntensity to another LuminousIntensity using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A LuminousIntensity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LuminousIntensity.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LuminousIntensity.UnitsNet#IQuantity{UnitsNet#Units#LuminousIntensityUnit}#ToUnit(UnitsNet.Units.LuminousIntensityUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LuminousIntensity.UnitsNet#IQuantity{UnitsNet#Units#LuminousIntensityUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.LuminousIntensity.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.MagneticField">
            <inheritdoc />
            <summary>
                A magnetic field is a force field that is created by moving electric charges (electric currents) and magnetic dipoles, and exerts a force on other nearby moving charges and magnetic dipoles.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Magnetic_field
            </remarks>
        </member>
        <member name="F:UnitsNet.MagneticField._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.MagneticField._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.MagneticField.#ctor(System.Double,UnitsNet.Units.MagneticFieldUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MagneticField.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.MagneticField.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.MagneticField" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticField.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.MagneticField.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.MagneticField.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticField.BaseUnit">
            <summary>
                The base unit of MagneticField, which is Tesla. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticField.MaxValue">
            <summary>
            Represents the largest possible value of MagneticField
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticField.MinValue">
            <summary>
            Represents the smallest possible value of MagneticField
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticField.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.MagneticField.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticField.Units">
            <summary>
                All units of measurement for the MagneticField quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticField.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Tesla.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticField.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticField.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.MagneticField.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.MagneticField.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.MagneticField.Type">
            <summary>
                The <see cref="P:UnitsNet.MagneticField.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticField.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.MagneticField.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticField.Gausses">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MagneticFieldUnit.Gauss"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticField.Microteslas">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MagneticFieldUnit.Microtesla"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticField.Milligausses">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MagneticFieldUnit.Milligauss"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticField.Milliteslas">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MagneticFieldUnit.Millitesla"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticField.Nanoteslas">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MagneticFieldUnit.Nanotesla"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticField.Teslas">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MagneticFieldUnit.Tesla"/>
            </summary>
        </member>
        <member name="M:UnitsNet.MagneticField.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.MagneticField.GetAbbreviation(UnitsNet.Units.MagneticFieldUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.MagneticField.GetAbbreviation(UnitsNet.Units.MagneticFieldUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MagneticField.FromGausses(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MagneticField"/> from <see cref="F:UnitsNet.Units.MagneticFieldUnit.Gauss"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MagneticField.FromMicroteslas(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MagneticField"/> from <see cref="F:UnitsNet.Units.MagneticFieldUnit.Microtesla"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MagneticField.FromMilligausses(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MagneticField"/> from <see cref="F:UnitsNet.Units.MagneticFieldUnit.Milligauss"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MagneticField.FromMilliteslas(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MagneticField"/> from <see cref="F:UnitsNet.Units.MagneticFieldUnit.Millitesla"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MagneticField.FromNanoteslas(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MagneticField"/> from <see cref="F:UnitsNet.Units.MagneticFieldUnit.Nanotesla"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MagneticField.FromTeslas(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MagneticField"/> from <see cref="F:UnitsNet.Units.MagneticFieldUnit.Tesla"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MagneticField.From(UnitsNet.QuantityValue,UnitsNet.Units.MagneticFieldUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.MagneticFieldUnit" /> to <see cref="T:UnitsNet.MagneticField" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>MagneticField unit value.</returns>
        </member>
        <member name="M:UnitsNet.MagneticField.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MagneticField.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MagneticField.TryParse(System.String,UnitsNet.MagneticField@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MagneticField.TryParse(System.String,System.IFormatProvider,UnitsNet.MagneticField@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MagneticField.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MagneticField.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MagneticField.TryParseUnit(System.String,UnitsNet.Units.MagneticFieldUnit@)">
            <inheritdoc cref="M:UnitsNet.MagneticField.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MagneticFieldUnit@)"/>
        </member>
        <member name="M:UnitsNet.MagneticField.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MagneticFieldUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MagneticField.op_UnaryNegation(UnitsNet.MagneticField)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.MagneticField.op_Addition(UnitsNet.MagneticField,UnitsNet.MagneticField)">
            <summary>Get <see cref="T:UnitsNet.MagneticField"/> from adding two <see cref="T:UnitsNet.MagneticField"/>.</summary>
        </member>
        <member name="M:UnitsNet.MagneticField.op_Subtraction(UnitsNet.MagneticField,UnitsNet.MagneticField)">
            <summary>Get <see cref="T:UnitsNet.MagneticField"/> from subtracting two <see cref="T:UnitsNet.MagneticField"/>.</summary>
        </member>
        <member name="M:UnitsNet.MagneticField.op_Multiply(System.Double,UnitsNet.MagneticField)">
            <summary>Get <see cref="T:UnitsNet.MagneticField"/> from multiplying value and <see cref="T:UnitsNet.MagneticField"/>.</summary>
        </member>
        <member name="M:UnitsNet.MagneticField.op_Multiply(UnitsNet.MagneticField,System.Double)">
            <summary>Get <see cref="T:UnitsNet.MagneticField"/> from multiplying value and <see cref="T:UnitsNet.MagneticField"/>.</summary>
        </member>
        <member name="M:UnitsNet.MagneticField.op_Division(UnitsNet.MagneticField,System.Double)">
            <summary>Get <see cref="T:UnitsNet.MagneticField"/> from dividing <see cref="T:UnitsNet.MagneticField"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.MagneticField.op_Division(UnitsNet.MagneticField,UnitsNet.MagneticField)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.MagneticField"/> by <see cref="T:UnitsNet.MagneticField"/>.</summary>
        </member>
        <member name="M:UnitsNet.MagneticField.op_LessThanOrEqual(UnitsNet.MagneticField,UnitsNet.MagneticField)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.MagneticField.op_GreaterThanOrEqual(UnitsNet.MagneticField,UnitsNet.MagneticField)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.MagneticField.op_LessThan(UnitsNet.MagneticField,UnitsNet.MagneticField)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.MagneticField.op_GreaterThan(UnitsNet.MagneticField,UnitsNet.MagneticField)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.MagneticField.op_Equality(UnitsNet.MagneticField,UnitsNet.MagneticField)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.MagneticField.Equals(UnitsNet.MagneticField,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MagneticField.op_Inequality(UnitsNet.MagneticField,UnitsNet.MagneticField)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.MagneticField.Equals(UnitsNet.MagneticField,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MagneticField.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MagneticField.CompareTo(UnitsNet.MagneticField)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MagneticField.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.MagneticField.Equals(UnitsNet.MagneticField,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MagneticField.Equals(UnitsNet.MagneticField)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.MagneticField.Equals(UnitsNet.MagneticField,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MagneticField.Equals(UnitsNet.MagneticField,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another MagneticField within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.MagneticField.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current MagneticField.</returns>
        </member>
        <member name="M:UnitsNet.MagneticField.As(UnitsNet.Units.MagneticFieldUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MagneticField.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.MagneticField.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MagneticField.ToUnit(UnitsNet.Units.MagneticFieldUnit)">
            <summary>
                Converts this MagneticField to another MagneticField with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A MagneticField with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MagneticField.ToUnit(UnitsNet.Units.MagneticFieldUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this MagneticField to another MagneticField using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A MagneticField with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MagneticField.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MagneticField.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.MagneticField.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MagneticField.UnitsNet#IQuantity{UnitsNet#Units#MagneticFieldUnit}#ToUnit(UnitsNet.Units.MagneticFieldUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MagneticField.UnitsNet#IQuantity{UnitsNet#Units#MagneticFieldUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MagneticField.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MagneticField.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MagneticField.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MagneticField.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MagneticField.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.MagneticField.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.MagneticFlux">
            <inheritdoc />
            <summary>
                In physics, specifically electromagnetism, the magnetic flux through a surface is the surface integral of the normal component of the magnetic field B passing through that surface.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Magnetic_flux
            </remarks>
        </member>
        <member name="F:UnitsNet.MagneticFlux._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.MagneticFlux._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.MagneticFlux.#ctor(System.Double,UnitsNet.Units.MagneticFluxUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MagneticFlux.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.MagneticFlux.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.MagneticFlux" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticFlux.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.MagneticFlux.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.MagneticFlux.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticFlux.BaseUnit">
            <summary>
                The base unit of MagneticFlux, which is Weber. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticFlux.MaxValue">
            <summary>
            Represents the largest possible value of MagneticFlux
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticFlux.MinValue">
            <summary>
            Represents the smallest possible value of MagneticFlux
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticFlux.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.MagneticFlux.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticFlux.Units">
            <summary>
                All units of measurement for the MagneticFlux quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticFlux.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Weber.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticFlux.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticFlux.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.MagneticFlux.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.MagneticFlux.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.MagneticFlux.Type">
            <summary>
                The <see cref="P:UnitsNet.MagneticFlux.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticFlux.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.MagneticFlux.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticFlux.Webers">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MagneticFluxUnit.Weber"/>
            </summary>
        </member>
        <member name="M:UnitsNet.MagneticFlux.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.MagneticFlux.GetAbbreviation(UnitsNet.Units.MagneticFluxUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.MagneticFlux.GetAbbreviation(UnitsNet.Units.MagneticFluxUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MagneticFlux.FromWebers(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MagneticFlux"/> from <see cref="F:UnitsNet.Units.MagneticFluxUnit.Weber"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MagneticFlux.From(UnitsNet.QuantityValue,UnitsNet.Units.MagneticFluxUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.MagneticFluxUnit" /> to <see cref="T:UnitsNet.MagneticFlux" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>MagneticFlux unit value.</returns>
        </member>
        <member name="M:UnitsNet.MagneticFlux.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MagneticFlux.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MagneticFlux.TryParse(System.String,UnitsNet.MagneticFlux@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MagneticFlux.TryParse(System.String,System.IFormatProvider,UnitsNet.MagneticFlux@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MagneticFlux.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MagneticFlux.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MagneticFlux.TryParseUnit(System.String,UnitsNet.Units.MagneticFluxUnit@)">
            <inheritdoc cref="M:UnitsNet.MagneticFlux.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MagneticFluxUnit@)"/>
        </member>
        <member name="M:UnitsNet.MagneticFlux.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MagneticFluxUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MagneticFlux.op_UnaryNegation(UnitsNet.MagneticFlux)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.MagneticFlux.op_Addition(UnitsNet.MagneticFlux,UnitsNet.MagneticFlux)">
            <summary>Get <see cref="T:UnitsNet.MagneticFlux"/> from adding two <see cref="T:UnitsNet.MagneticFlux"/>.</summary>
        </member>
        <member name="M:UnitsNet.MagneticFlux.op_Subtraction(UnitsNet.MagneticFlux,UnitsNet.MagneticFlux)">
            <summary>Get <see cref="T:UnitsNet.MagneticFlux"/> from subtracting two <see cref="T:UnitsNet.MagneticFlux"/>.</summary>
        </member>
        <member name="M:UnitsNet.MagneticFlux.op_Multiply(System.Double,UnitsNet.MagneticFlux)">
            <summary>Get <see cref="T:UnitsNet.MagneticFlux"/> from multiplying value and <see cref="T:UnitsNet.MagneticFlux"/>.</summary>
        </member>
        <member name="M:UnitsNet.MagneticFlux.op_Multiply(UnitsNet.MagneticFlux,System.Double)">
            <summary>Get <see cref="T:UnitsNet.MagneticFlux"/> from multiplying value and <see cref="T:UnitsNet.MagneticFlux"/>.</summary>
        </member>
        <member name="M:UnitsNet.MagneticFlux.op_Division(UnitsNet.MagneticFlux,System.Double)">
            <summary>Get <see cref="T:UnitsNet.MagneticFlux"/> from dividing <see cref="T:UnitsNet.MagneticFlux"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.MagneticFlux.op_Division(UnitsNet.MagneticFlux,UnitsNet.MagneticFlux)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.MagneticFlux"/> by <see cref="T:UnitsNet.MagneticFlux"/>.</summary>
        </member>
        <member name="M:UnitsNet.MagneticFlux.op_LessThanOrEqual(UnitsNet.MagneticFlux,UnitsNet.MagneticFlux)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.MagneticFlux.op_GreaterThanOrEqual(UnitsNet.MagneticFlux,UnitsNet.MagneticFlux)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.MagneticFlux.op_LessThan(UnitsNet.MagneticFlux,UnitsNet.MagneticFlux)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.MagneticFlux.op_GreaterThan(UnitsNet.MagneticFlux,UnitsNet.MagneticFlux)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.MagneticFlux.op_Equality(UnitsNet.MagneticFlux,UnitsNet.MagneticFlux)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.MagneticFlux.Equals(UnitsNet.MagneticFlux,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MagneticFlux.op_Inequality(UnitsNet.MagneticFlux,UnitsNet.MagneticFlux)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.MagneticFlux.Equals(UnitsNet.MagneticFlux,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MagneticFlux.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MagneticFlux.CompareTo(UnitsNet.MagneticFlux)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MagneticFlux.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.MagneticFlux.Equals(UnitsNet.MagneticFlux,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MagneticFlux.Equals(UnitsNet.MagneticFlux)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.MagneticFlux.Equals(UnitsNet.MagneticFlux,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MagneticFlux.Equals(UnitsNet.MagneticFlux,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another MagneticFlux within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.MagneticFlux.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current MagneticFlux.</returns>
        </member>
        <member name="M:UnitsNet.MagneticFlux.As(UnitsNet.Units.MagneticFluxUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MagneticFlux.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.MagneticFlux.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MagneticFlux.ToUnit(UnitsNet.Units.MagneticFluxUnit)">
            <summary>
                Converts this MagneticFlux to another MagneticFlux with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A MagneticFlux with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MagneticFlux.ToUnit(UnitsNet.Units.MagneticFluxUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this MagneticFlux to another MagneticFlux using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A MagneticFlux with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MagneticFlux.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MagneticFlux.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.MagneticFlux.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MagneticFlux.UnitsNet#IQuantity{UnitsNet#Units#MagneticFluxUnit}#ToUnit(UnitsNet.Units.MagneticFluxUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MagneticFlux.UnitsNet#IQuantity{UnitsNet#Units#MagneticFluxUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MagneticFlux.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MagneticFlux.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MagneticFlux.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MagneticFlux.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MagneticFlux.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.MagneticFlux.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Magnetization">
            <inheritdoc />
            <summary>
                In classical electromagnetism, magnetization is the vector field that expresses the density of permanent or induced magnetic dipole moments in a magnetic material.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Magnetization
            </remarks>
        </member>
        <member name="F:UnitsNet.Magnetization._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Magnetization._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Magnetization.#ctor(System.Double,UnitsNet.Units.MagnetizationUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Magnetization.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Magnetization.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Magnetization" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Magnetization.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Magnetization.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Magnetization.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Magnetization.BaseUnit">
            <summary>
                The base unit of Magnetization, which is AmperePerMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Magnetization.MaxValue">
            <summary>
            Represents the largest possible value of Magnetization
            </summary>
        </member>
        <member name="P:UnitsNet.Magnetization.MinValue">
            <summary>
            Represents the smallest possible value of Magnetization
            </summary>
        </member>
        <member name="P:UnitsNet.Magnetization.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Magnetization.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Magnetization.Units">
            <summary>
                All units of measurement for the Magnetization quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Magnetization.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit AmperePerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Magnetization.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Magnetization.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Magnetization.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Magnetization.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Magnetization.Type">
            <summary>
                The <see cref="P:UnitsNet.Magnetization.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Magnetization.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Magnetization.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Magnetization.AmperesPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MagnetizationUnit.AmperePerMeter"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Magnetization.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Magnetization.GetAbbreviation(UnitsNet.Units.MagnetizationUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Magnetization.GetAbbreviation(UnitsNet.Units.MagnetizationUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Magnetization.FromAmperesPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Magnetization"/> from <see cref="F:UnitsNet.Units.MagnetizationUnit.AmperePerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Magnetization.From(UnitsNet.QuantityValue,UnitsNet.Units.MagnetizationUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.MagnetizationUnit" /> to <see cref="T:UnitsNet.Magnetization" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Magnetization unit value.</returns>
        </member>
        <member name="M:UnitsNet.Magnetization.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Magnetization.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Magnetization.TryParse(System.String,UnitsNet.Magnetization@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Magnetization.TryParse(System.String,System.IFormatProvider,UnitsNet.Magnetization@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Magnetization.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Magnetization.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Magnetization.TryParseUnit(System.String,UnitsNet.Units.MagnetizationUnit@)">
            <inheritdoc cref="M:UnitsNet.Magnetization.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MagnetizationUnit@)"/>
        </member>
        <member name="M:UnitsNet.Magnetization.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MagnetizationUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Magnetization.op_UnaryNegation(UnitsNet.Magnetization)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Magnetization.op_Addition(UnitsNet.Magnetization,UnitsNet.Magnetization)">
            <summary>Get <see cref="T:UnitsNet.Magnetization"/> from adding two <see cref="T:UnitsNet.Magnetization"/>.</summary>
        </member>
        <member name="M:UnitsNet.Magnetization.op_Subtraction(UnitsNet.Magnetization,UnitsNet.Magnetization)">
            <summary>Get <see cref="T:UnitsNet.Magnetization"/> from subtracting two <see cref="T:UnitsNet.Magnetization"/>.</summary>
        </member>
        <member name="M:UnitsNet.Magnetization.op_Multiply(System.Double,UnitsNet.Magnetization)">
            <summary>Get <see cref="T:UnitsNet.Magnetization"/> from multiplying value and <see cref="T:UnitsNet.Magnetization"/>.</summary>
        </member>
        <member name="M:UnitsNet.Magnetization.op_Multiply(UnitsNet.Magnetization,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Magnetization"/> from multiplying value and <see cref="T:UnitsNet.Magnetization"/>.</summary>
        </member>
        <member name="M:UnitsNet.Magnetization.op_Division(UnitsNet.Magnetization,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Magnetization"/> from dividing <see cref="T:UnitsNet.Magnetization"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Magnetization.op_Division(UnitsNet.Magnetization,UnitsNet.Magnetization)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Magnetization"/> by <see cref="T:UnitsNet.Magnetization"/>.</summary>
        </member>
        <member name="M:UnitsNet.Magnetization.op_LessThanOrEqual(UnitsNet.Magnetization,UnitsNet.Magnetization)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Magnetization.op_GreaterThanOrEqual(UnitsNet.Magnetization,UnitsNet.Magnetization)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Magnetization.op_LessThan(UnitsNet.Magnetization,UnitsNet.Magnetization)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Magnetization.op_GreaterThan(UnitsNet.Magnetization,UnitsNet.Magnetization)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Magnetization.op_Equality(UnitsNet.Magnetization,UnitsNet.Magnetization)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Magnetization.Equals(UnitsNet.Magnetization,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Magnetization.op_Inequality(UnitsNet.Magnetization,UnitsNet.Magnetization)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Magnetization.Equals(UnitsNet.Magnetization,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Magnetization.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Magnetization.CompareTo(UnitsNet.Magnetization)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Magnetization.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Magnetization.Equals(UnitsNet.Magnetization,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Magnetization.Equals(UnitsNet.Magnetization)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Magnetization.Equals(UnitsNet.Magnetization,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Magnetization.Equals(UnitsNet.Magnetization,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Magnetization within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Magnetization.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Magnetization.</returns>
        </member>
        <member name="M:UnitsNet.Magnetization.As(UnitsNet.Units.MagnetizationUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Magnetization.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Magnetization.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Magnetization.ToUnit(UnitsNet.Units.MagnetizationUnit)">
            <summary>
                Converts this Magnetization to another Magnetization with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Magnetization with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Magnetization.ToUnit(UnitsNet.Units.MagnetizationUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Magnetization to another Magnetization using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Magnetization with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Magnetization.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Magnetization.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Magnetization.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Magnetization.UnitsNet#IQuantity{UnitsNet#Units#MagnetizationUnit}#ToUnit(UnitsNet.Units.MagnetizationUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Magnetization.UnitsNet#IQuantity{UnitsNet#Units#MagnetizationUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Magnetization.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Magnetization.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Magnetization.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Magnetization.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Magnetization.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Magnetization.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.MassMomentOfInertia">
            <inheritdoc />
            <summary>
                A property of body reflects how its mass is distributed with regard to an axis.
            </summary>
        </member>
        <member name="F:UnitsNet.MassMomentOfInertia._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.MassMomentOfInertia._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.#ctor(System.Double,UnitsNet.Units.MassMomentOfInertiaUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.MassMomentOfInertia" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.MassMomentOfInertia.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.BaseUnit">
            <summary>
                The base unit of MassMomentOfInertia, which is KilogramSquareMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.MaxValue">
            <summary>
            Represents the largest possible value of MassMomentOfInertia
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.MinValue">
            <summary>
            Represents the smallest possible value of MassMomentOfInertia
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.MassMomentOfInertia.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.Units">
            <summary>
                All units of measurement for the MassMomentOfInertia quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit KilogramSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.Type">
            <summary>
                The <see cref="P:UnitsNet.MassMomentOfInertia.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.MassMomentOfInertia.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.GramSquareCentimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.GramSquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.GramSquareDecimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.GramSquareDecimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.GramSquareMeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.GramSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.GramSquareMillimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.GramSquareMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.KilogramSquareCentimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.KilogramSquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.KilogramSquareDecimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.KilogramSquareDecimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.KilogramSquareMeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.KilogramSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.KilogramSquareMillimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.KilogramSquareMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.KilotonneSquareCentimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.KilotonneSquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.KilotonneSquareDecimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.KilotonneSquareDecimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.KilotonneSquareMeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.KilotonneSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.KilotonneSquareMilimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.KilotonneSquareMilimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.MegatonneSquareCentimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.MegatonneSquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.MegatonneSquareDecimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.MegatonneSquareDecimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.MegatonneSquareMeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.MegatonneSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.MegatonneSquareMilimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.MegatonneSquareMilimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.MilligramSquareCentimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.MilligramSquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.MilligramSquareDecimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.MilligramSquareDecimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.MilligramSquareMeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.MilligramSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.MilligramSquareMillimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.MilligramSquareMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.PoundSquareFeet">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.PoundSquareFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.PoundSquareInches">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.PoundSquareInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.SlugSquareFeet">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.SlugSquareFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.SlugSquareInches">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.SlugSquareInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.TonneSquareCentimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.TonneSquareCentimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.TonneSquareDecimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.TonneSquareDecimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.TonneSquareMeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.TonneSquareMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.TonneSquareMilimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.TonneSquareMilimeter"/>
            </summary>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.GetAbbreviation(UnitsNet.Units.MassMomentOfInertiaUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.GetAbbreviation(UnitsNet.Units.MassMomentOfInertiaUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromGramSquareCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassMomentOfInertia"/> from <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.GramSquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromGramSquareDecimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassMomentOfInertia"/> from <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.GramSquareDecimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromGramSquareMeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassMomentOfInertia"/> from <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.GramSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromGramSquareMillimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassMomentOfInertia"/> from <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.GramSquareMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromKilogramSquareCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassMomentOfInertia"/> from <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.KilogramSquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromKilogramSquareDecimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassMomentOfInertia"/> from <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.KilogramSquareDecimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromKilogramSquareMeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassMomentOfInertia"/> from <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.KilogramSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromKilogramSquareMillimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassMomentOfInertia"/> from <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.KilogramSquareMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromKilotonneSquareCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassMomentOfInertia"/> from <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.KilotonneSquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromKilotonneSquareDecimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassMomentOfInertia"/> from <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.KilotonneSquareDecimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromKilotonneSquareMeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassMomentOfInertia"/> from <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.KilotonneSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromKilotonneSquareMilimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassMomentOfInertia"/> from <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.KilotonneSquareMilimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromMegatonneSquareCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassMomentOfInertia"/> from <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.MegatonneSquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromMegatonneSquareDecimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassMomentOfInertia"/> from <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.MegatonneSquareDecimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromMegatonneSquareMeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassMomentOfInertia"/> from <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.MegatonneSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromMegatonneSquareMilimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassMomentOfInertia"/> from <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.MegatonneSquareMilimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromMilligramSquareCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassMomentOfInertia"/> from <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.MilligramSquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromMilligramSquareDecimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassMomentOfInertia"/> from <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.MilligramSquareDecimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromMilligramSquareMeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassMomentOfInertia"/> from <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.MilligramSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromMilligramSquareMillimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassMomentOfInertia"/> from <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.MilligramSquareMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromPoundSquareFeet(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassMomentOfInertia"/> from <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.PoundSquareFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromPoundSquareInches(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassMomentOfInertia"/> from <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.PoundSquareInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromSlugSquareFeet(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassMomentOfInertia"/> from <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.SlugSquareFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromSlugSquareInches(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassMomentOfInertia"/> from <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.SlugSquareInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromTonneSquareCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassMomentOfInertia"/> from <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.TonneSquareCentimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromTonneSquareDecimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassMomentOfInertia"/> from <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.TonneSquareDecimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromTonneSquareMeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassMomentOfInertia"/> from <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.TonneSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromTonneSquareMilimeters(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MassMomentOfInertia"/> from <see cref="F:UnitsNet.Units.MassMomentOfInertiaUnit.TonneSquareMilimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.From(UnitsNet.QuantityValue,UnitsNet.Units.MassMomentOfInertiaUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.MassMomentOfInertiaUnit" /> to <see cref="T:UnitsNet.MassMomentOfInertia" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>MassMomentOfInertia unit value.</returns>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.TryParse(System.String,UnitsNet.MassMomentOfInertia@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.TryParse(System.String,System.IFormatProvider,UnitsNet.MassMomentOfInertia@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.TryParseUnit(System.String,UnitsNet.Units.MassMomentOfInertiaUnit@)">
            <inheritdoc cref="M:UnitsNet.MassMomentOfInertia.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MassMomentOfInertiaUnit@)"/>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MassMomentOfInertiaUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.op_UnaryNegation(UnitsNet.MassMomentOfInertia)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.op_Addition(UnitsNet.MassMomentOfInertia,UnitsNet.MassMomentOfInertia)">
            <summary>Get <see cref="T:UnitsNet.MassMomentOfInertia"/> from adding two <see cref="T:UnitsNet.MassMomentOfInertia"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.op_Subtraction(UnitsNet.MassMomentOfInertia,UnitsNet.MassMomentOfInertia)">
            <summary>Get <see cref="T:UnitsNet.MassMomentOfInertia"/> from subtracting two <see cref="T:UnitsNet.MassMomentOfInertia"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.op_Multiply(System.Double,UnitsNet.MassMomentOfInertia)">
            <summary>Get <see cref="T:UnitsNet.MassMomentOfInertia"/> from multiplying value and <see cref="T:UnitsNet.MassMomentOfInertia"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.op_Multiply(UnitsNet.MassMomentOfInertia,System.Double)">
            <summary>Get <see cref="T:UnitsNet.MassMomentOfInertia"/> from multiplying value and <see cref="T:UnitsNet.MassMomentOfInertia"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.op_Division(UnitsNet.MassMomentOfInertia,System.Double)">
            <summary>Get <see cref="T:UnitsNet.MassMomentOfInertia"/> from dividing <see cref="T:UnitsNet.MassMomentOfInertia"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.op_Division(UnitsNet.MassMomentOfInertia,UnitsNet.MassMomentOfInertia)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.MassMomentOfInertia"/> by <see cref="T:UnitsNet.MassMomentOfInertia"/>.</summary>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.op_LessThanOrEqual(UnitsNet.MassMomentOfInertia,UnitsNet.MassMomentOfInertia)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.op_GreaterThanOrEqual(UnitsNet.MassMomentOfInertia,UnitsNet.MassMomentOfInertia)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.op_LessThan(UnitsNet.MassMomentOfInertia,UnitsNet.MassMomentOfInertia)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.op_GreaterThan(UnitsNet.MassMomentOfInertia,UnitsNet.MassMomentOfInertia)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.op_Equality(UnitsNet.MassMomentOfInertia,UnitsNet.MassMomentOfInertia)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.MassMomentOfInertia.Equals(UnitsNet.MassMomentOfInertia,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.op_Inequality(UnitsNet.MassMomentOfInertia,UnitsNet.MassMomentOfInertia)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.MassMomentOfInertia.Equals(UnitsNet.MassMomentOfInertia,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.CompareTo(UnitsNet.MassMomentOfInertia)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.MassMomentOfInertia.Equals(UnitsNet.MassMomentOfInertia,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.Equals(UnitsNet.MassMomentOfInertia)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.MassMomentOfInertia.Equals(UnitsNet.MassMomentOfInertia,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.Equals(UnitsNet.MassMomentOfInertia,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another MassMomentOfInertia within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current MassMomentOfInertia.</returns>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.As(UnitsNet.Units.MassMomentOfInertiaUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.ToUnit(UnitsNet.Units.MassMomentOfInertiaUnit)">
            <summary>
                Converts this MassMomentOfInertia to another MassMomentOfInertia with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A MassMomentOfInertia with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.ToUnit(UnitsNet.Units.MassMomentOfInertiaUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this MassMomentOfInertia to another MassMomentOfInertia using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A MassMomentOfInertia with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.UnitsNet#IQuantity{UnitsNet#Units#MassMomentOfInertiaUnit}#ToUnit(UnitsNet.Units.MassMomentOfInertiaUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.UnitsNet#IQuantity{UnitsNet#Units#MassMomentOfInertiaUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.MolarEnergy">
            <inheritdoc />
            <summary>
                Molar energy is the amount of energy stored in 1 mole of a substance.
            </summary>
        </member>
        <member name="F:UnitsNet.MolarEnergy._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.MolarEnergy._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.MolarEnergy.#ctor(System.Double,UnitsNet.Units.MolarEnergyUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarEnergy.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.MolarEnergy.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.MolarEnergy" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEnergy.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.MolarEnergy.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.MolarEnergy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEnergy.BaseUnit">
            <summary>
                The base unit of MolarEnergy, which is JoulePerMole. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEnergy.MaxValue">
            <summary>
            Represents the largest possible value of MolarEnergy
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEnergy.MinValue">
            <summary>
            Represents the smallest possible value of MolarEnergy
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEnergy.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.MolarEnergy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEnergy.Units">
            <summary>
                All units of measurement for the MolarEnergy quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEnergy.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit JoulePerMole.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEnergy.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEnergy.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.MolarEnergy.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.MolarEnergy.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.MolarEnergy.Type">
            <summary>
                The <see cref="P:UnitsNet.MolarEnergy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEnergy.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.MolarEnergy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEnergy.JoulesPerMole">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MolarEnergyUnit.JoulePerMole"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEnergy.KilojoulesPerMole">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MolarEnergyUnit.KilojoulePerMole"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEnergy.MegajoulesPerMole">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MolarEnergyUnit.MegajoulePerMole"/>
            </summary>
        </member>
        <member name="M:UnitsNet.MolarEnergy.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.MolarEnergy.GetAbbreviation(UnitsNet.Units.MolarEnergyUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.MolarEnergy.GetAbbreviation(UnitsNet.Units.MolarEnergyUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MolarEnergy.FromJoulesPerMole(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MolarEnergy"/> from <see cref="F:UnitsNet.Units.MolarEnergyUnit.JoulePerMole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarEnergy.FromKilojoulesPerMole(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MolarEnergy"/> from <see cref="F:UnitsNet.Units.MolarEnergyUnit.KilojoulePerMole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarEnergy.FromMegajoulesPerMole(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MolarEnergy"/> from <see cref="F:UnitsNet.Units.MolarEnergyUnit.MegajoulePerMole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarEnergy.From(UnitsNet.QuantityValue,UnitsNet.Units.MolarEnergyUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.MolarEnergyUnit" /> to <see cref="T:UnitsNet.MolarEnergy" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>MolarEnergy unit value.</returns>
        </member>
        <member name="M:UnitsNet.MolarEnergy.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MolarEnergy.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MolarEnergy.TryParse(System.String,UnitsNet.MolarEnergy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MolarEnergy.TryParse(System.String,System.IFormatProvider,UnitsNet.MolarEnergy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MolarEnergy.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MolarEnergy.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MolarEnergy.TryParseUnit(System.String,UnitsNet.Units.MolarEnergyUnit@)">
            <inheritdoc cref="M:UnitsNet.MolarEnergy.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MolarEnergyUnit@)"/>
        </member>
        <member name="M:UnitsNet.MolarEnergy.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MolarEnergyUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MolarEnergy.op_UnaryNegation(UnitsNet.MolarEnergy)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.MolarEnergy.op_Addition(UnitsNet.MolarEnergy,UnitsNet.MolarEnergy)">
            <summary>Get <see cref="T:UnitsNet.MolarEnergy"/> from adding two <see cref="T:UnitsNet.MolarEnergy"/>.</summary>
        </member>
        <member name="M:UnitsNet.MolarEnergy.op_Subtraction(UnitsNet.MolarEnergy,UnitsNet.MolarEnergy)">
            <summary>Get <see cref="T:UnitsNet.MolarEnergy"/> from subtracting two <see cref="T:UnitsNet.MolarEnergy"/>.</summary>
        </member>
        <member name="M:UnitsNet.MolarEnergy.op_Multiply(System.Double,UnitsNet.MolarEnergy)">
            <summary>Get <see cref="T:UnitsNet.MolarEnergy"/> from multiplying value and <see cref="T:UnitsNet.MolarEnergy"/>.</summary>
        </member>
        <member name="M:UnitsNet.MolarEnergy.op_Multiply(UnitsNet.MolarEnergy,System.Double)">
            <summary>Get <see cref="T:UnitsNet.MolarEnergy"/> from multiplying value and <see cref="T:UnitsNet.MolarEnergy"/>.</summary>
        </member>
        <member name="M:UnitsNet.MolarEnergy.op_Division(UnitsNet.MolarEnergy,System.Double)">
            <summary>Get <see cref="T:UnitsNet.MolarEnergy"/> from dividing <see cref="T:UnitsNet.MolarEnergy"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.MolarEnergy.op_Division(UnitsNet.MolarEnergy,UnitsNet.MolarEnergy)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.MolarEnergy"/> by <see cref="T:UnitsNet.MolarEnergy"/>.</summary>
        </member>
        <member name="M:UnitsNet.MolarEnergy.op_LessThanOrEqual(UnitsNet.MolarEnergy,UnitsNet.MolarEnergy)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.MolarEnergy.op_GreaterThanOrEqual(UnitsNet.MolarEnergy,UnitsNet.MolarEnergy)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.MolarEnergy.op_LessThan(UnitsNet.MolarEnergy,UnitsNet.MolarEnergy)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.MolarEnergy.op_GreaterThan(UnitsNet.MolarEnergy,UnitsNet.MolarEnergy)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.MolarEnergy.op_Equality(UnitsNet.MolarEnergy,UnitsNet.MolarEnergy)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.MolarEnergy.Equals(UnitsNet.MolarEnergy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MolarEnergy.op_Inequality(UnitsNet.MolarEnergy,UnitsNet.MolarEnergy)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.MolarEnergy.Equals(UnitsNet.MolarEnergy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MolarEnergy.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MolarEnergy.CompareTo(UnitsNet.MolarEnergy)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MolarEnergy.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.MolarEnergy.Equals(UnitsNet.MolarEnergy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MolarEnergy.Equals(UnitsNet.MolarEnergy)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.MolarEnergy.Equals(UnitsNet.MolarEnergy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MolarEnergy.Equals(UnitsNet.MolarEnergy,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another MolarEnergy within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.MolarEnergy.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current MolarEnergy.</returns>
        </member>
        <member name="M:UnitsNet.MolarEnergy.As(UnitsNet.Units.MolarEnergyUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MolarEnergy.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.MolarEnergy.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MolarEnergy.ToUnit(UnitsNet.Units.MolarEnergyUnit)">
            <summary>
                Converts this MolarEnergy to another MolarEnergy with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A MolarEnergy with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MolarEnergy.ToUnit(UnitsNet.Units.MolarEnergyUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this MolarEnergy to another MolarEnergy using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A MolarEnergy with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MolarEnergy.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MolarEnergy.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.MolarEnergy.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MolarEnergy.UnitsNet#IQuantity{UnitsNet#Units#MolarEnergyUnit}#ToUnit(UnitsNet.Units.MolarEnergyUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MolarEnergy.UnitsNet#IQuantity{UnitsNet#Units#MolarEnergyUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MolarEnergy.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MolarEnergy.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MolarEnergy.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MolarEnergy.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MolarEnergy.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.MolarEnergy.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.MolarEntropy">
            <inheritdoc />
            <summary>
                Molar entropy is amount of energy required to increase temperature of 1 mole substance by 1 Kelvin.
            </summary>
        </member>
        <member name="F:UnitsNet.MolarEntropy._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.MolarEntropy._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.MolarEntropy.#ctor(System.Double,UnitsNet.Units.MolarEntropyUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarEntropy.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.MolarEntropy.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.MolarEntropy" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEntropy.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.MolarEntropy.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.MolarEntropy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEntropy.BaseUnit">
            <summary>
                The base unit of MolarEntropy, which is JoulePerMoleKelvin. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEntropy.MaxValue">
            <summary>
            Represents the largest possible value of MolarEntropy
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEntropy.MinValue">
            <summary>
            Represents the smallest possible value of MolarEntropy
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEntropy.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.MolarEntropy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEntropy.Units">
            <summary>
                All units of measurement for the MolarEntropy quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEntropy.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit JoulePerMoleKelvin.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEntropy.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEntropy.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.MolarEntropy.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.MolarEntropy.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.MolarEntropy.Type">
            <summary>
                The <see cref="P:UnitsNet.MolarEntropy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEntropy.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.MolarEntropy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEntropy.JoulesPerMoleKelvin">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MolarEntropyUnit.JoulePerMoleKelvin"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEntropy.KilojoulesPerMoleKelvin">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MolarEntropyUnit.KilojoulePerMoleKelvin"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEntropy.MegajoulesPerMoleKelvin">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MolarEntropyUnit.MegajoulePerMoleKelvin"/>
            </summary>
        </member>
        <member name="M:UnitsNet.MolarEntropy.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.MolarEntropy.GetAbbreviation(UnitsNet.Units.MolarEntropyUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.MolarEntropy.GetAbbreviation(UnitsNet.Units.MolarEntropyUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MolarEntropy.FromJoulesPerMoleKelvin(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MolarEntropy"/> from <see cref="F:UnitsNet.Units.MolarEntropyUnit.JoulePerMoleKelvin"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarEntropy.FromKilojoulesPerMoleKelvin(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MolarEntropy"/> from <see cref="F:UnitsNet.Units.MolarEntropyUnit.KilojoulePerMoleKelvin"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarEntropy.FromMegajoulesPerMoleKelvin(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MolarEntropy"/> from <see cref="F:UnitsNet.Units.MolarEntropyUnit.MegajoulePerMoleKelvin"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarEntropy.From(UnitsNet.QuantityValue,UnitsNet.Units.MolarEntropyUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.MolarEntropyUnit" /> to <see cref="T:UnitsNet.MolarEntropy" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>MolarEntropy unit value.</returns>
        </member>
        <member name="M:UnitsNet.MolarEntropy.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MolarEntropy.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MolarEntropy.TryParse(System.String,UnitsNet.MolarEntropy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MolarEntropy.TryParse(System.String,System.IFormatProvider,UnitsNet.MolarEntropy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MolarEntropy.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MolarEntropy.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MolarEntropy.TryParseUnit(System.String,UnitsNet.Units.MolarEntropyUnit@)">
            <inheritdoc cref="M:UnitsNet.MolarEntropy.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MolarEntropyUnit@)"/>
        </member>
        <member name="M:UnitsNet.MolarEntropy.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MolarEntropyUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MolarEntropy.op_UnaryNegation(UnitsNet.MolarEntropy)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.MolarEntropy.op_Addition(UnitsNet.MolarEntropy,UnitsNet.MolarEntropy)">
            <summary>Get <see cref="T:UnitsNet.MolarEntropy"/> from adding two <see cref="T:UnitsNet.MolarEntropy"/>.</summary>
        </member>
        <member name="M:UnitsNet.MolarEntropy.op_Subtraction(UnitsNet.MolarEntropy,UnitsNet.MolarEntropy)">
            <summary>Get <see cref="T:UnitsNet.MolarEntropy"/> from subtracting two <see cref="T:UnitsNet.MolarEntropy"/>.</summary>
        </member>
        <member name="M:UnitsNet.MolarEntropy.op_Multiply(System.Double,UnitsNet.MolarEntropy)">
            <summary>Get <see cref="T:UnitsNet.MolarEntropy"/> from multiplying value and <see cref="T:UnitsNet.MolarEntropy"/>.</summary>
        </member>
        <member name="M:UnitsNet.MolarEntropy.op_Multiply(UnitsNet.MolarEntropy,System.Double)">
            <summary>Get <see cref="T:UnitsNet.MolarEntropy"/> from multiplying value and <see cref="T:UnitsNet.MolarEntropy"/>.</summary>
        </member>
        <member name="M:UnitsNet.MolarEntropy.op_Division(UnitsNet.MolarEntropy,System.Double)">
            <summary>Get <see cref="T:UnitsNet.MolarEntropy"/> from dividing <see cref="T:UnitsNet.MolarEntropy"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.MolarEntropy.op_Division(UnitsNet.MolarEntropy,UnitsNet.MolarEntropy)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.MolarEntropy"/> by <see cref="T:UnitsNet.MolarEntropy"/>.</summary>
        </member>
        <member name="M:UnitsNet.MolarEntropy.op_LessThanOrEqual(UnitsNet.MolarEntropy,UnitsNet.MolarEntropy)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.MolarEntropy.op_GreaterThanOrEqual(UnitsNet.MolarEntropy,UnitsNet.MolarEntropy)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.MolarEntropy.op_LessThan(UnitsNet.MolarEntropy,UnitsNet.MolarEntropy)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.MolarEntropy.op_GreaterThan(UnitsNet.MolarEntropy,UnitsNet.MolarEntropy)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.MolarEntropy.op_Equality(UnitsNet.MolarEntropy,UnitsNet.MolarEntropy)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.MolarEntropy.Equals(UnitsNet.MolarEntropy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MolarEntropy.op_Inequality(UnitsNet.MolarEntropy,UnitsNet.MolarEntropy)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.MolarEntropy.Equals(UnitsNet.MolarEntropy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MolarEntropy.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MolarEntropy.CompareTo(UnitsNet.MolarEntropy)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MolarEntropy.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.MolarEntropy.Equals(UnitsNet.MolarEntropy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MolarEntropy.Equals(UnitsNet.MolarEntropy)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.MolarEntropy.Equals(UnitsNet.MolarEntropy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MolarEntropy.Equals(UnitsNet.MolarEntropy,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another MolarEntropy within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.MolarEntropy.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current MolarEntropy.</returns>
        </member>
        <member name="M:UnitsNet.MolarEntropy.As(UnitsNet.Units.MolarEntropyUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MolarEntropy.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.MolarEntropy.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MolarEntropy.ToUnit(UnitsNet.Units.MolarEntropyUnit)">
            <summary>
                Converts this MolarEntropy to another MolarEntropy with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A MolarEntropy with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MolarEntropy.ToUnit(UnitsNet.Units.MolarEntropyUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this MolarEntropy to another MolarEntropy using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A MolarEntropy with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MolarEntropy.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MolarEntropy.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.MolarEntropy.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MolarEntropy.UnitsNet#IQuantity{UnitsNet#Units#MolarEntropyUnit}#ToUnit(UnitsNet.Units.MolarEntropyUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MolarEntropy.UnitsNet#IQuantity{UnitsNet#Units#MolarEntropyUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MolarEntropy.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MolarEntropy.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MolarEntropy.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MolarEntropy.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MolarEntropy.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.MolarEntropy.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.MolarMass">
            <inheritdoc />
            <summary>
                In chemistry, the molar mass M is a physical property defined as the mass of a given substance (chemical element or chemical compound) divided by the amount of substance.
            </summary>
        </member>
        <member name="F:UnitsNet.MolarMass._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.MolarMass._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.MolarMass.#ctor(System.Double,UnitsNet.Units.MolarMassUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.MolarMass.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.MolarMass" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.MolarMass.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.MolarMass.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.BaseUnit">
            <summary>
                The base unit of MolarMass, which is KilogramPerMole. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.MaxValue">
            <summary>
            Represents the largest possible value of MolarMass
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.MinValue">
            <summary>
            Represents the smallest possible value of MolarMass
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.MolarMass.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.Units">
            <summary>
                All units of measurement for the MolarMass quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit KilogramPerMole.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.MolarMass.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.MolarMass.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.MolarMass.Type">
            <summary>
                The <see cref="P:UnitsNet.MolarMass.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.MolarMass.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.CentigramsPerMole">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MolarMassUnit.CentigramPerMole"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.DecagramsPerMole">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MolarMassUnit.DecagramPerMole"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.DecigramsPerMole">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MolarMassUnit.DecigramPerMole"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.GramsPerMole">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MolarMassUnit.GramPerMole"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.HectogramsPerMole">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MolarMassUnit.HectogramPerMole"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.KilogramsPerMole">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MolarMassUnit.KilogramPerMole"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.KilopoundsPerMole">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MolarMassUnit.KilopoundPerMole"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.MegapoundsPerMole">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MolarMassUnit.MegapoundPerMole"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.MicrogramsPerMole">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MolarMassUnit.MicrogramPerMole"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.MilligramsPerMole">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MolarMassUnit.MilligramPerMole"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.NanogramsPerMole">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MolarMassUnit.NanogramPerMole"/>
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.PoundsPerMole">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.MolarMassUnit.PoundPerMole"/>
            </summary>
        </member>
        <member name="M:UnitsNet.MolarMass.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.MolarMass.GetAbbreviation(UnitsNet.Units.MolarMassUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.MolarMass.GetAbbreviation(UnitsNet.Units.MolarMassUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MolarMass.FromCentigramsPerMole(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MolarMass"/> from <see cref="F:UnitsNet.Units.MolarMassUnit.CentigramPerMole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.FromDecagramsPerMole(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MolarMass"/> from <see cref="F:UnitsNet.Units.MolarMassUnit.DecagramPerMole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.FromDecigramsPerMole(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MolarMass"/> from <see cref="F:UnitsNet.Units.MolarMassUnit.DecigramPerMole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.FromGramsPerMole(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MolarMass"/> from <see cref="F:UnitsNet.Units.MolarMassUnit.GramPerMole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.FromHectogramsPerMole(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MolarMass"/> from <see cref="F:UnitsNet.Units.MolarMassUnit.HectogramPerMole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.FromKilogramsPerMole(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MolarMass"/> from <see cref="F:UnitsNet.Units.MolarMassUnit.KilogramPerMole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.FromKilopoundsPerMole(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MolarMass"/> from <see cref="F:UnitsNet.Units.MolarMassUnit.KilopoundPerMole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.FromMegapoundsPerMole(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MolarMass"/> from <see cref="F:UnitsNet.Units.MolarMassUnit.MegapoundPerMole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.FromMicrogramsPerMole(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MolarMass"/> from <see cref="F:UnitsNet.Units.MolarMassUnit.MicrogramPerMole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.FromMilligramsPerMole(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MolarMass"/> from <see cref="F:UnitsNet.Units.MolarMassUnit.MilligramPerMole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.FromNanogramsPerMole(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MolarMass"/> from <see cref="F:UnitsNet.Units.MolarMassUnit.NanogramPerMole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.FromPoundsPerMole(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.MolarMass"/> from <see cref="F:UnitsNet.Units.MolarMassUnit.PoundPerMole"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.From(UnitsNet.QuantityValue,UnitsNet.Units.MolarMassUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.MolarMassUnit" /> to <see cref="T:UnitsNet.MolarMass" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>MolarMass unit value.</returns>
        </member>
        <member name="M:UnitsNet.MolarMass.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MolarMass.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MolarMass.TryParse(System.String,UnitsNet.MolarMass@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MolarMass.TryParse(System.String,System.IFormatProvider,UnitsNet.MolarMass@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MolarMass.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.TryParseUnit(System.String,UnitsNet.Units.MolarMassUnit@)">
            <inheritdoc cref="M:UnitsNet.MolarMass.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MolarMassUnit@)"/>
        </member>
        <member name="M:UnitsNet.MolarMass.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MolarMassUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MolarMass.op_UnaryNegation(UnitsNet.MolarMass)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.MolarMass.op_Addition(UnitsNet.MolarMass,UnitsNet.MolarMass)">
            <summary>Get <see cref="T:UnitsNet.MolarMass"/> from adding two <see cref="T:UnitsNet.MolarMass"/>.</summary>
        </member>
        <member name="M:UnitsNet.MolarMass.op_Subtraction(UnitsNet.MolarMass,UnitsNet.MolarMass)">
            <summary>Get <see cref="T:UnitsNet.MolarMass"/> from subtracting two <see cref="T:UnitsNet.MolarMass"/>.</summary>
        </member>
        <member name="M:UnitsNet.MolarMass.op_Multiply(System.Double,UnitsNet.MolarMass)">
            <summary>Get <see cref="T:UnitsNet.MolarMass"/> from multiplying value and <see cref="T:UnitsNet.MolarMass"/>.</summary>
        </member>
        <member name="M:UnitsNet.MolarMass.op_Multiply(UnitsNet.MolarMass,System.Double)">
            <summary>Get <see cref="T:UnitsNet.MolarMass"/> from multiplying value and <see cref="T:UnitsNet.MolarMass"/>.</summary>
        </member>
        <member name="M:UnitsNet.MolarMass.op_Division(UnitsNet.MolarMass,System.Double)">
            <summary>Get <see cref="T:UnitsNet.MolarMass"/> from dividing <see cref="T:UnitsNet.MolarMass"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.MolarMass.op_Division(UnitsNet.MolarMass,UnitsNet.MolarMass)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.MolarMass"/> by <see cref="T:UnitsNet.MolarMass"/>.</summary>
        </member>
        <member name="M:UnitsNet.MolarMass.op_LessThanOrEqual(UnitsNet.MolarMass,UnitsNet.MolarMass)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.MolarMass.op_GreaterThanOrEqual(UnitsNet.MolarMass,UnitsNet.MolarMass)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.MolarMass.op_LessThan(UnitsNet.MolarMass,UnitsNet.MolarMass)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.MolarMass.op_GreaterThan(UnitsNet.MolarMass,UnitsNet.MolarMass)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.MolarMass.op_Equality(UnitsNet.MolarMass,UnitsNet.MolarMass)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.MolarMass.Equals(UnitsNet.MolarMass,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MolarMass.op_Inequality(UnitsNet.MolarMass,UnitsNet.MolarMass)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.MolarMass.Equals(UnitsNet.MolarMass,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MolarMass.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MolarMass.CompareTo(UnitsNet.MolarMass)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MolarMass.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.MolarMass.Equals(UnitsNet.MolarMass,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MolarMass.Equals(UnitsNet.MolarMass)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.MolarMass.Equals(UnitsNet.MolarMass,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.MolarMass.Equals(UnitsNet.MolarMass,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another MolarMass within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.MolarMass.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current MolarMass.</returns>
        </member>
        <member name="M:UnitsNet.MolarMass.As(UnitsNet.Units.MolarMassUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MolarMass.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.MolarMass.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MolarMass.ToUnit(UnitsNet.Units.MolarMassUnit)">
            <summary>
                Converts this MolarMass to another MolarMass with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A MolarMass with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MolarMass.ToUnit(UnitsNet.Units.MolarMassUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this MolarMass to another MolarMass using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A MolarMass with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MolarMass.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MolarMass.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.MolarMass.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MolarMass.UnitsNet#IQuantity{UnitsNet#Units#MolarMassUnit}#ToUnit(UnitsNet.Units.MolarMassUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MolarMass.UnitsNet#IQuantity{UnitsNet#Units#MolarMassUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.MolarMass.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MolarMass.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MolarMass.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MolarMass.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.MolarMass.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.MolarMass.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Permeability">
            <inheritdoc />
            <summary>
                In electromagnetism, permeability is the measure of the ability of a material to support the formation of a magnetic field within itself.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Permeability_(electromagnetism)
            </remarks>
        </member>
        <member name="F:UnitsNet.Permeability._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Permeability._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Permeability.#ctor(System.Double,UnitsNet.Units.PermeabilityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Permeability.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Permeability.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Permeability" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Permeability.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Permeability.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Permeability.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Permeability.BaseUnit">
            <summary>
                The base unit of Permeability, which is HenryPerMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Permeability.MaxValue">
            <summary>
            Represents the largest possible value of Permeability
            </summary>
        </member>
        <member name="P:UnitsNet.Permeability.MinValue">
            <summary>
            Represents the smallest possible value of Permeability
            </summary>
        </member>
        <member name="P:UnitsNet.Permeability.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Permeability.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Permeability.Units">
            <summary>
                All units of measurement for the Permeability quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Permeability.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit HenryPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Permeability.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Permeability.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Permeability.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Permeability.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Permeability.Type">
            <summary>
                The <see cref="P:UnitsNet.Permeability.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Permeability.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Permeability.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Permeability.HenriesPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PermeabilityUnit.HenryPerMeter"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Permeability.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Permeability.GetAbbreviation(UnitsNet.Units.PermeabilityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Permeability.GetAbbreviation(UnitsNet.Units.PermeabilityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Permeability.FromHenriesPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Permeability"/> from <see cref="F:UnitsNet.Units.PermeabilityUnit.HenryPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Permeability.From(UnitsNet.QuantityValue,UnitsNet.Units.PermeabilityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.PermeabilityUnit" /> to <see cref="T:UnitsNet.Permeability" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Permeability unit value.</returns>
        </member>
        <member name="M:UnitsNet.Permeability.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Permeability.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Permeability.TryParse(System.String,UnitsNet.Permeability@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Permeability.TryParse(System.String,System.IFormatProvider,UnitsNet.Permeability@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Permeability.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Permeability.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Permeability.TryParseUnit(System.String,UnitsNet.Units.PermeabilityUnit@)">
            <inheritdoc cref="M:UnitsNet.Permeability.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.PermeabilityUnit@)"/>
        </member>
        <member name="M:UnitsNet.Permeability.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.PermeabilityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Permeability.op_UnaryNegation(UnitsNet.Permeability)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Permeability.op_Addition(UnitsNet.Permeability,UnitsNet.Permeability)">
            <summary>Get <see cref="T:UnitsNet.Permeability"/> from adding two <see cref="T:UnitsNet.Permeability"/>.</summary>
        </member>
        <member name="M:UnitsNet.Permeability.op_Subtraction(UnitsNet.Permeability,UnitsNet.Permeability)">
            <summary>Get <see cref="T:UnitsNet.Permeability"/> from subtracting two <see cref="T:UnitsNet.Permeability"/>.</summary>
        </member>
        <member name="M:UnitsNet.Permeability.op_Multiply(System.Double,UnitsNet.Permeability)">
            <summary>Get <see cref="T:UnitsNet.Permeability"/> from multiplying value and <see cref="T:UnitsNet.Permeability"/>.</summary>
        </member>
        <member name="M:UnitsNet.Permeability.op_Multiply(UnitsNet.Permeability,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Permeability"/> from multiplying value and <see cref="T:UnitsNet.Permeability"/>.</summary>
        </member>
        <member name="M:UnitsNet.Permeability.op_Division(UnitsNet.Permeability,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Permeability"/> from dividing <see cref="T:UnitsNet.Permeability"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Permeability.op_Division(UnitsNet.Permeability,UnitsNet.Permeability)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Permeability"/> by <see cref="T:UnitsNet.Permeability"/>.</summary>
        </member>
        <member name="M:UnitsNet.Permeability.op_LessThanOrEqual(UnitsNet.Permeability,UnitsNet.Permeability)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Permeability.op_GreaterThanOrEqual(UnitsNet.Permeability,UnitsNet.Permeability)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Permeability.op_LessThan(UnitsNet.Permeability,UnitsNet.Permeability)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Permeability.op_GreaterThan(UnitsNet.Permeability,UnitsNet.Permeability)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Permeability.op_Equality(UnitsNet.Permeability,UnitsNet.Permeability)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Permeability.Equals(UnitsNet.Permeability,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Permeability.op_Inequality(UnitsNet.Permeability,UnitsNet.Permeability)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Permeability.Equals(UnitsNet.Permeability,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Permeability.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Permeability.CompareTo(UnitsNet.Permeability)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Permeability.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Permeability.Equals(UnitsNet.Permeability,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Permeability.Equals(UnitsNet.Permeability)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Permeability.Equals(UnitsNet.Permeability,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Permeability.Equals(UnitsNet.Permeability,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Permeability within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Permeability.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Permeability.</returns>
        </member>
        <member name="M:UnitsNet.Permeability.As(UnitsNet.Units.PermeabilityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Permeability.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Permeability.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Permeability.ToUnit(UnitsNet.Units.PermeabilityUnit)">
            <summary>
                Converts this Permeability to another Permeability with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Permeability with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Permeability.ToUnit(UnitsNet.Units.PermeabilityUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Permeability to another Permeability using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Permeability with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Permeability.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Permeability.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Permeability.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Permeability.UnitsNet#IQuantity{UnitsNet#Units#PermeabilityUnit}#ToUnit(UnitsNet.Units.PermeabilityUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Permeability.UnitsNet#IQuantity{UnitsNet#Units#PermeabilityUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Permeability.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Permeability.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Permeability.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Permeability.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Permeability.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Permeability.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Permittivity">
            <inheritdoc />
            <summary>
                In electromagnetism, permittivity is the measure of resistance that is encountered when forming an electric field in a particular medium.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Permittivity
            </remarks>
        </member>
        <member name="F:UnitsNet.Permittivity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Permittivity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Permittivity.#ctor(System.Double,UnitsNet.Units.PermittivityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Permittivity.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Permittivity.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Permittivity" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Permittivity.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Permittivity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Permittivity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Permittivity.BaseUnit">
            <summary>
                The base unit of Permittivity, which is FaradPerMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Permittivity.MaxValue">
            <summary>
            Represents the largest possible value of Permittivity
            </summary>
        </member>
        <member name="P:UnitsNet.Permittivity.MinValue">
            <summary>
            Represents the smallest possible value of Permittivity
            </summary>
        </member>
        <member name="P:UnitsNet.Permittivity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Permittivity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Permittivity.Units">
            <summary>
                All units of measurement for the Permittivity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Permittivity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit FaradPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Permittivity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Permittivity.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Permittivity.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Permittivity.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Permittivity.Type">
            <summary>
                The <see cref="P:UnitsNet.Permittivity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Permittivity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Permittivity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Permittivity.FaradsPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PermittivityUnit.FaradPerMeter"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Permittivity.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Permittivity.GetAbbreviation(UnitsNet.Units.PermittivityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Permittivity.GetAbbreviation(UnitsNet.Units.PermittivityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Permittivity.FromFaradsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Permittivity"/> from <see cref="F:UnitsNet.Units.PermittivityUnit.FaradPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Permittivity.From(UnitsNet.QuantityValue,UnitsNet.Units.PermittivityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.PermittivityUnit" /> to <see cref="T:UnitsNet.Permittivity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Permittivity unit value.</returns>
        </member>
        <member name="M:UnitsNet.Permittivity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Permittivity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Permittivity.TryParse(System.String,UnitsNet.Permittivity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Permittivity.TryParse(System.String,System.IFormatProvider,UnitsNet.Permittivity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Permittivity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Permittivity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Permittivity.TryParseUnit(System.String,UnitsNet.Units.PermittivityUnit@)">
            <inheritdoc cref="M:UnitsNet.Permittivity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.PermittivityUnit@)"/>
        </member>
        <member name="M:UnitsNet.Permittivity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.PermittivityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Permittivity.op_UnaryNegation(UnitsNet.Permittivity)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Permittivity.op_Addition(UnitsNet.Permittivity,UnitsNet.Permittivity)">
            <summary>Get <see cref="T:UnitsNet.Permittivity"/> from adding two <see cref="T:UnitsNet.Permittivity"/>.</summary>
        </member>
        <member name="M:UnitsNet.Permittivity.op_Subtraction(UnitsNet.Permittivity,UnitsNet.Permittivity)">
            <summary>Get <see cref="T:UnitsNet.Permittivity"/> from subtracting two <see cref="T:UnitsNet.Permittivity"/>.</summary>
        </member>
        <member name="M:UnitsNet.Permittivity.op_Multiply(System.Double,UnitsNet.Permittivity)">
            <summary>Get <see cref="T:UnitsNet.Permittivity"/> from multiplying value and <see cref="T:UnitsNet.Permittivity"/>.</summary>
        </member>
        <member name="M:UnitsNet.Permittivity.op_Multiply(UnitsNet.Permittivity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Permittivity"/> from multiplying value and <see cref="T:UnitsNet.Permittivity"/>.</summary>
        </member>
        <member name="M:UnitsNet.Permittivity.op_Division(UnitsNet.Permittivity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Permittivity"/> from dividing <see cref="T:UnitsNet.Permittivity"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Permittivity.op_Division(UnitsNet.Permittivity,UnitsNet.Permittivity)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Permittivity"/> by <see cref="T:UnitsNet.Permittivity"/>.</summary>
        </member>
        <member name="M:UnitsNet.Permittivity.op_LessThanOrEqual(UnitsNet.Permittivity,UnitsNet.Permittivity)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Permittivity.op_GreaterThanOrEqual(UnitsNet.Permittivity,UnitsNet.Permittivity)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Permittivity.op_LessThan(UnitsNet.Permittivity,UnitsNet.Permittivity)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Permittivity.op_GreaterThan(UnitsNet.Permittivity,UnitsNet.Permittivity)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Permittivity.op_Equality(UnitsNet.Permittivity,UnitsNet.Permittivity)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Permittivity.Equals(UnitsNet.Permittivity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Permittivity.op_Inequality(UnitsNet.Permittivity,UnitsNet.Permittivity)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Permittivity.Equals(UnitsNet.Permittivity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Permittivity.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Permittivity.CompareTo(UnitsNet.Permittivity)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Permittivity.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Permittivity.Equals(UnitsNet.Permittivity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Permittivity.Equals(UnitsNet.Permittivity)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Permittivity.Equals(UnitsNet.Permittivity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Permittivity.Equals(UnitsNet.Permittivity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Permittivity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Permittivity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Permittivity.</returns>
        </member>
        <member name="M:UnitsNet.Permittivity.As(UnitsNet.Units.PermittivityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Permittivity.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Permittivity.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Permittivity.ToUnit(UnitsNet.Units.PermittivityUnit)">
            <summary>
                Converts this Permittivity to another Permittivity with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Permittivity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Permittivity.ToUnit(UnitsNet.Units.PermittivityUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Permittivity to another Permittivity using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Permittivity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Permittivity.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Permittivity.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Permittivity.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Permittivity.UnitsNet#IQuantity{UnitsNet#Units#PermittivityUnit}#ToUnit(UnitsNet.Units.PermittivityUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Permittivity.UnitsNet#IQuantity{UnitsNet#Units#PermittivityUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Permittivity.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Permittivity.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Permittivity.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Permittivity.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Permittivity.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Permittivity.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.PowerDensity">
            <inheritdoc />
            <summary>
                The amount of power in a volume.
            </summary>
        </member>
        <member name="F:UnitsNet.PowerDensity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.PowerDensity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.PowerDensity.#ctor(System.Double,UnitsNet.Units.PowerDensityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.PowerDensity.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.PowerDensity" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.PowerDensity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.PowerDensity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.BaseUnit">
            <summary>
                The base unit of PowerDensity, which is WattPerCubicMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.MaxValue">
            <summary>
            Represents the largest possible value of PowerDensity
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.MinValue">
            <summary>
            Represents the smallest possible value of PowerDensity
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.PowerDensity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.Units">
            <summary>
                All units of measurement for the PowerDensity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit WattPerCubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.PowerDensity.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.PowerDensity.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.PowerDensity.Type">
            <summary>
                The <see cref="P:UnitsNet.PowerDensity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.PowerDensity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.DecawattsPerCubicFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.DecawattPerCubicFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.DecawattsPerCubicInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.DecawattPerCubicInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.DecawattsPerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.DecawattPerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.DecawattsPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.DecawattPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.DeciwattsPerCubicFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.DeciwattPerCubicFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.DeciwattsPerCubicInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.DeciwattPerCubicInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.DeciwattsPerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.DeciwattPerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.DeciwattsPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.DeciwattPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.GigawattsPerCubicFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.GigawattPerCubicFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.GigawattsPerCubicInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.GigawattPerCubicInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.GigawattsPerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.GigawattPerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.GigawattsPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.GigawattPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.KilowattsPerCubicFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.KilowattPerCubicFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.KilowattsPerCubicInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.KilowattPerCubicInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.KilowattsPerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.KilowattPerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.KilowattsPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.KilowattPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.MegawattsPerCubicFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.MegawattPerCubicFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.MegawattsPerCubicInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.MegawattPerCubicInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.MegawattsPerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.MegawattPerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.MegawattsPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.MegawattPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.MicrowattsPerCubicFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.MicrowattPerCubicFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.MicrowattsPerCubicInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.MicrowattPerCubicInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.MicrowattsPerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.MicrowattPerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.MicrowattsPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.MicrowattPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.MilliwattsPerCubicFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.MilliwattPerCubicFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.MilliwattsPerCubicInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.MilliwattPerCubicInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.MilliwattsPerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.MilliwattPerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.MilliwattsPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.MilliwattPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.NanowattsPerCubicFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.NanowattPerCubicFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.NanowattsPerCubicInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.NanowattPerCubicInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.NanowattsPerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.NanowattPerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.NanowattsPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.NanowattPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.PicowattsPerCubicFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.PicowattPerCubicFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.PicowattsPerCubicInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.PicowattPerCubicInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.PicowattsPerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.PicowattPerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.PicowattsPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.PicowattPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.TerawattsPerCubicFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.TerawattPerCubicFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.TerawattsPerCubicInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.TerawattPerCubicInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.TerawattsPerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.TerawattPerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.TerawattsPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.TerawattPerLiter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.WattsPerCubicFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.WattPerCubicFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.WattsPerCubicInch">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.WattPerCubicInch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.WattsPerCubicMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.WattPerCubicMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.WattsPerLiter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PowerDensityUnit.WattPerLiter"/>
            </summary>
        </member>
        <member name="M:UnitsNet.PowerDensity.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.PowerDensity.GetAbbreviation(UnitsNet.Units.PowerDensityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.PowerDensity.GetAbbreviation(UnitsNet.Units.PowerDensityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromDecawattsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.DecawattPerCubicFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromDecawattsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.DecawattPerCubicInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromDecawattsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.DecawattPerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromDecawattsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.DecawattPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromDeciwattsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.DeciwattPerCubicFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromDeciwattsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.DeciwattPerCubicInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromDeciwattsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.DeciwattPerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromDeciwattsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.DeciwattPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromGigawattsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.GigawattPerCubicFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromGigawattsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.GigawattPerCubicInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromGigawattsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.GigawattPerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromGigawattsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.GigawattPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromKilowattsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.KilowattPerCubicFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromKilowattsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.KilowattPerCubicInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromKilowattsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.KilowattPerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromKilowattsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.KilowattPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromMegawattsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.MegawattPerCubicFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromMegawattsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.MegawattPerCubicInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromMegawattsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.MegawattPerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromMegawattsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.MegawattPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromMicrowattsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.MicrowattPerCubicFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromMicrowattsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.MicrowattPerCubicInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromMicrowattsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.MicrowattPerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromMicrowattsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.MicrowattPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromMilliwattsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.MilliwattPerCubicFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromMilliwattsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.MilliwattPerCubicInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromMilliwattsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.MilliwattPerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromMilliwattsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.MilliwattPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromNanowattsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.NanowattPerCubicFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromNanowattsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.NanowattPerCubicInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromNanowattsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.NanowattPerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromNanowattsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.NanowattPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromPicowattsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.PicowattPerCubicFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromPicowattsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.PicowattPerCubicInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromPicowattsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.PicowattPerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromPicowattsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.PicowattPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromTerawattsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.TerawattPerCubicFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromTerawattsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.TerawattPerCubicInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromTerawattsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.TerawattPerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromTerawattsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.TerawattPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromWattsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.WattPerCubicFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromWattsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.WattPerCubicInch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromWattsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.WattPerCubicMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromWattsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PowerDensity"/> from <see cref="F:UnitsNet.Units.PowerDensityUnit.WattPerLiter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.From(UnitsNet.QuantityValue,UnitsNet.Units.PowerDensityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.PowerDensityUnit" /> to <see cref="T:UnitsNet.PowerDensity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>PowerDensity unit value.</returns>
        </member>
        <member name="M:UnitsNet.PowerDensity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.PowerDensity.TryParse(System.String,UnitsNet.PowerDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.PowerDensity.TryParse(System.String,System.IFormatProvider,UnitsNet.PowerDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.PowerDensity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.TryParseUnit(System.String,UnitsNet.Units.PowerDensityUnit@)">
            <inheritdoc cref="M:UnitsNet.PowerDensity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.PowerDensityUnit@)"/>
        </member>
        <member name="M:UnitsNet.PowerDensity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.PowerDensityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.PowerDensity.op_UnaryNegation(UnitsNet.PowerDensity)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.PowerDensity.op_Addition(UnitsNet.PowerDensity,UnitsNet.PowerDensity)">
            <summary>Get <see cref="T:UnitsNet.PowerDensity"/> from adding two <see cref="T:UnitsNet.PowerDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.PowerDensity.op_Subtraction(UnitsNet.PowerDensity,UnitsNet.PowerDensity)">
            <summary>Get <see cref="T:UnitsNet.PowerDensity"/> from subtracting two <see cref="T:UnitsNet.PowerDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.PowerDensity.op_Multiply(System.Double,UnitsNet.PowerDensity)">
            <summary>Get <see cref="T:UnitsNet.PowerDensity"/> from multiplying value and <see cref="T:UnitsNet.PowerDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.PowerDensity.op_Multiply(UnitsNet.PowerDensity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.PowerDensity"/> from multiplying value and <see cref="T:UnitsNet.PowerDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.PowerDensity.op_Division(UnitsNet.PowerDensity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.PowerDensity"/> from dividing <see cref="T:UnitsNet.PowerDensity"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.PowerDensity.op_Division(UnitsNet.PowerDensity,UnitsNet.PowerDensity)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.PowerDensity"/> by <see cref="T:UnitsNet.PowerDensity"/>.</summary>
        </member>
        <member name="M:UnitsNet.PowerDensity.op_LessThanOrEqual(UnitsNet.PowerDensity,UnitsNet.PowerDensity)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.PowerDensity.op_GreaterThanOrEqual(UnitsNet.PowerDensity,UnitsNet.PowerDensity)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.PowerDensity.op_LessThan(UnitsNet.PowerDensity,UnitsNet.PowerDensity)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.PowerDensity.op_GreaterThan(UnitsNet.PowerDensity,UnitsNet.PowerDensity)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.PowerDensity.op_Equality(UnitsNet.PowerDensity,UnitsNet.PowerDensity)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.PowerDensity.Equals(UnitsNet.PowerDensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.PowerDensity.op_Inequality(UnitsNet.PowerDensity,UnitsNet.PowerDensity)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.PowerDensity.Equals(UnitsNet.PowerDensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.PowerDensity.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.PowerDensity.CompareTo(UnitsNet.PowerDensity)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.PowerDensity.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.PowerDensity.Equals(UnitsNet.PowerDensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.PowerDensity.Equals(UnitsNet.PowerDensity)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.PowerDensity.Equals(UnitsNet.PowerDensity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.PowerDensity.Equals(UnitsNet.PowerDensity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another PowerDensity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.PowerDensity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current PowerDensity.</returns>
        </member>
        <member name="M:UnitsNet.PowerDensity.As(UnitsNet.Units.PowerDensityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.PowerDensity.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.PowerDensity.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.PowerDensity.ToUnit(UnitsNet.Units.PowerDensityUnit)">
            <summary>
                Converts this PowerDensity to another PowerDensity with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A PowerDensity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.PowerDensity.ToUnit(UnitsNet.Units.PowerDensityUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this PowerDensity to another PowerDensity using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A PowerDensity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.PowerDensity.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.PowerDensity.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.PowerDensity.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.PowerDensity.UnitsNet#IQuantity{UnitsNet#Units#PowerDensityUnit}#ToUnit(UnitsNet.Units.PowerDensityUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.PowerDensity.UnitsNet#IQuantity{UnitsNet#Units#PowerDensityUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.PowerDensity.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.PowerDensity.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.PowerDensity.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.PowerDensity.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.PowerDensity.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.PowerDensity.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.PressureChangeRate">
            <inheritdoc />
            <summary>
                Pressure change rate is the ratio of the pressure change to the time during which the change occurred (value of pressure changes per unit time).
            </summary>
        </member>
        <member name="F:UnitsNet.PressureChangeRate._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.PressureChangeRate._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.#ctor(System.Double,UnitsNet.Units.PressureChangeRateUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.PressureChangeRate" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.PressureChangeRate.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.BaseUnit">
            <summary>
                The base unit of PressureChangeRate, which is PascalPerSecond. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.MaxValue">
            <summary>
            Represents the largest possible value of PressureChangeRate
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.MinValue">
            <summary>
            Represents the smallest possible value of PressureChangeRate
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.PressureChangeRate.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.Units">
            <summary>
                All units of measurement for the PressureChangeRate quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit PascalPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.PressureChangeRate.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.PressureChangeRate.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.Type">
            <summary>
                The <see cref="P:UnitsNet.PressureChangeRate.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.PressureChangeRate.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.AtmospheresPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureChangeRateUnit.AtmospherePerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.KilopascalsPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureChangeRateUnit.KilopascalPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.KilopascalsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureChangeRateUnit.KilopascalPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.KilopoundsForcePerSquareInchPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.KilopoundsForcePerSquareInchPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.MegapascalsPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureChangeRateUnit.MegapascalPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.MegapascalsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureChangeRateUnit.MegapascalPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.MegapoundsForcePerSquareInchPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.MegapoundsForcePerSquareInchPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.MillimetersOfMercuryPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureChangeRateUnit.MillimeterOfMercuryPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.PascalsPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureChangeRateUnit.PascalPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.PascalsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureChangeRateUnit.PascalPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.PoundsForcePerSquareInchPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureChangeRateUnit.PoundForcePerSquareInchPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.PoundsForcePerSquareInchPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.PressureChangeRateUnit.PoundForcePerSquareInchPerSecond"/>
            </summary>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.GetAbbreviation(UnitsNet.Units.PressureChangeRateUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.GetAbbreviation(UnitsNet.Units.PressureChangeRateUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.FromAtmospheresPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PressureChangeRate"/> from <see cref="F:UnitsNet.Units.PressureChangeRateUnit.AtmospherePerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.FromKilopascalsPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PressureChangeRate"/> from <see cref="F:UnitsNet.Units.PressureChangeRateUnit.KilopascalPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.FromKilopascalsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PressureChangeRate"/> from <see cref="F:UnitsNet.Units.PressureChangeRateUnit.KilopascalPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.FromKilopoundsForcePerSquareInchPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PressureChangeRate"/> from <see cref="F:UnitsNet.Units.PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.FromKilopoundsForcePerSquareInchPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PressureChangeRate"/> from <see cref="F:UnitsNet.Units.PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.FromMegapascalsPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PressureChangeRate"/> from <see cref="F:UnitsNet.Units.PressureChangeRateUnit.MegapascalPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.FromMegapascalsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PressureChangeRate"/> from <see cref="F:UnitsNet.Units.PressureChangeRateUnit.MegapascalPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.FromMegapoundsForcePerSquareInchPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PressureChangeRate"/> from <see cref="F:UnitsNet.Units.PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.FromMegapoundsForcePerSquareInchPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PressureChangeRate"/> from <see cref="F:UnitsNet.Units.PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.FromMillimetersOfMercuryPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PressureChangeRate"/> from <see cref="F:UnitsNet.Units.PressureChangeRateUnit.MillimeterOfMercuryPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.FromPascalsPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PressureChangeRate"/> from <see cref="F:UnitsNet.Units.PressureChangeRateUnit.PascalPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.FromPascalsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PressureChangeRate"/> from <see cref="F:UnitsNet.Units.PressureChangeRateUnit.PascalPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.FromPoundsForcePerSquareInchPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PressureChangeRate"/> from <see cref="F:UnitsNet.Units.PressureChangeRateUnit.PoundForcePerSquareInchPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.FromPoundsForcePerSquareInchPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.PressureChangeRate"/> from <see cref="F:UnitsNet.Units.PressureChangeRateUnit.PoundForcePerSquareInchPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.From(UnitsNet.QuantityValue,UnitsNet.Units.PressureChangeRateUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.PressureChangeRateUnit" /> to <see cref="T:UnitsNet.PressureChangeRate" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>PressureChangeRate unit value.</returns>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.TryParse(System.String,UnitsNet.PressureChangeRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.TryParse(System.String,System.IFormatProvider,UnitsNet.PressureChangeRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.TryParseUnit(System.String,UnitsNet.Units.PressureChangeRateUnit@)">
            <inheritdoc cref="M:UnitsNet.PressureChangeRate.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.PressureChangeRateUnit@)"/>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.PressureChangeRateUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.op_UnaryNegation(UnitsNet.PressureChangeRate)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.op_Addition(UnitsNet.PressureChangeRate,UnitsNet.PressureChangeRate)">
            <summary>Get <see cref="T:UnitsNet.PressureChangeRate"/> from adding two <see cref="T:UnitsNet.PressureChangeRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.op_Subtraction(UnitsNet.PressureChangeRate,UnitsNet.PressureChangeRate)">
            <summary>Get <see cref="T:UnitsNet.PressureChangeRate"/> from subtracting two <see cref="T:UnitsNet.PressureChangeRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.op_Multiply(System.Double,UnitsNet.PressureChangeRate)">
            <summary>Get <see cref="T:UnitsNet.PressureChangeRate"/> from multiplying value and <see cref="T:UnitsNet.PressureChangeRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.op_Multiply(UnitsNet.PressureChangeRate,System.Double)">
            <summary>Get <see cref="T:UnitsNet.PressureChangeRate"/> from multiplying value and <see cref="T:UnitsNet.PressureChangeRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.op_Division(UnitsNet.PressureChangeRate,System.Double)">
            <summary>Get <see cref="T:UnitsNet.PressureChangeRate"/> from dividing <see cref="T:UnitsNet.PressureChangeRate"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.op_Division(UnitsNet.PressureChangeRate,UnitsNet.PressureChangeRate)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.PressureChangeRate"/> by <see cref="T:UnitsNet.PressureChangeRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.op_LessThanOrEqual(UnitsNet.PressureChangeRate,UnitsNet.PressureChangeRate)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.op_GreaterThanOrEqual(UnitsNet.PressureChangeRate,UnitsNet.PressureChangeRate)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.op_LessThan(UnitsNet.PressureChangeRate,UnitsNet.PressureChangeRate)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.op_GreaterThan(UnitsNet.PressureChangeRate,UnitsNet.PressureChangeRate)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.op_Equality(UnitsNet.PressureChangeRate,UnitsNet.PressureChangeRate)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.PressureChangeRate.Equals(UnitsNet.PressureChangeRate,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.op_Inequality(UnitsNet.PressureChangeRate,UnitsNet.PressureChangeRate)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.PressureChangeRate.Equals(UnitsNet.PressureChangeRate,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.PressureChangeRate.CompareTo(UnitsNet.PressureChangeRate)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.PressureChangeRate.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.PressureChangeRate.Equals(UnitsNet.PressureChangeRate,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.Equals(UnitsNet.PressureChangeRate)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.PressureChangeRate.Equals(UnitsNet.PressureChangeRate,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.Equals(UnitsNet.PressureChangeRate,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another PressureChangeRate within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current PressureChangeRate.</returns>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.As(UnitsNet.Units.PressureChangeRateUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.PressureChangeRate.ToUnit(UnitsNet.Units.PressureChangeRateUnit)">
            <summary>
                Converts this PressureChangeRate to another PressureChangeRate with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A PressureChangeRate with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.ToUnit(UnitsNet.Units.PressureChangeRateUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this PressureChangeRate to another PressureChangeRate using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A PressureChangeRate with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.PressureChangeRate.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.PressureChangeRate.UnitsNet#IQuantity{UnitsNet#Units#PressureChangeRateUnit}#ToUnit(UnitsNet.Units.PressureChangeRateUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.PressureChangeRate.UnitsNet#IQuantity{UnitsNet#Units#PressureChangeRateUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.PressureChangeRate.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Ratio">
            <inheritdoc />
            <summary>
                In mathematics, a ratio is a relationship between two numbers of the same kind (e.g., objects, persons, students, spoonfuls, units of whatever identical dimension), usually expressed as "a to b" or a:b, sometimes expressed arithmetically as a dimensionless quotient of the two that explicitly indicates how many times the first number contains the second (not necessarily an integer).
            </summary>
        </member>
        <member name="F:UnitsNet.Ratio._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Ratio._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Ratio.#ctor(System.Double,UnitsNet.Units.RatioUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Ratio.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Ratio.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Ratio" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Ratio.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Ratio.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.BaseUnit">
            <summary>
                The base unit of Ratio, which is DecimalFraction. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.MaxValue">
            <summary>
            Represents the largest possible value of Ratio
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.MinValue">
            <summary>
            Represents the smallest possible value of Ratio
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Ratio.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.Units">
            <summary>
                All units of measurement for the Ratio quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit DecimalFraction.
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Ratio.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Ratio.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Ratio.Type">
            <summary>
                The <see cref="P:UnitsNet.Ratio.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Ratio.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.DecimalFractions">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RatioUnit.DecimalFraction"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.PartsPerBillion">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RatioUnit.PartPerBillion"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.PartsPerMillion">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RatioUnit.PartPerMillion"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.PartsPerThousand">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RatioUnit.PartPerThousand"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.PartsPerTrillion">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RatioUnit.PartPerTrillion"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.Percent">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RatioUnit.Percent"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Ratio.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Ratio.GetAbbreviation(UnitsNet.Units.RatioUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Ratio.GetAbbreviation(UnitsNet.Units.RatioUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Ratio.FromDecimalFractions(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Ratio"/> from <see cref="F:UnitsNet.Units.RatioUnit.DecimalFraction"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Ratio.FromPartsPerBillion(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Ratio"/> from <see cref="F:UnitsNet.Units.RatioUnit.PartPerBillion"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Ratio.FromPartsPerMillion(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Ratio"/> from <see cref="F:UnitsNet.Units.RatioUnit.PartPerMillion"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Ratio.FromPartsPerThousand(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Ratio"/> from <see cref="F:UnitsNet.Units.RatioUnit.PartPerThousand"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Ratio.FromPartsPerTrillion(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Ratio"/> from <see cref="F:UnitsNet.Units.RatioUnit.PartPerTrillion"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Ratio.FromPercent(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Ratio"/> from <see cref="F:UnitsNet.Units.RatioUnit.Percent"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Ratio.From(UnitsNet.QuantityValue,UnitsNet.Units.RatioUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.RatioUnit" /> to <see cref="T:UnitsNet.Ratio" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Ratio unit value.</returns>
        </member>
        <member name="M:UnitsNet.Ratio.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Ratio.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Ratio.TryParse(System.String,UnitsNet.Ratio@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Ratio.TryParse(System.String,System.IFormatProvider,UnitsNet.Ratio@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Ratio.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Ratio.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Ratio.TryParseUnit(System.String,UnitsNet.Units.RatioUnit@)">
            <inheritdoc cref="M:UnitsNet.Ratio.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.RatioUnit@)"/>
        </member>
        <member name="M:UnitsNet.Ratio.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.RatioUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Ratio.op_UnaryNegation(UnitsNet.Ratio)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Ratio.op_Addition(UnitsNet.Ratio,UnitsNet.Ratio)">
            <summary>Get <see cref="T:UnitsNet.Ratio"/> from adding two <see cref="T:UnitsNet.Ratio"/>.</summary>
        </member>
        <member name="M:UnitsNet.Ratio.op_Subtraction(UnitsNet.Ratio,UnitsNet.Ratio)">
            <summary>Get <see cref="T:UnitsNet.Ratio"/> from subtracting two <see cref="T:UnitsNet.Ratio"/>.</summary>
        </member>
        <member name="M:UnitsNet.Ratio.op_Multiply(System.Double,UnitsNet.Ratio)">
            <summary>Get <see cref="T:UnitsNet.Ratio"/> from multiplying value and <see cref="T:UnitsNet.Ratio"/>.</summary>
        </member>
        <member name="M:UnitsNet.Ratio.op_Multiply(UnitsNet.Ratio,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Ratio"/> from multiplying value and <see cref="T:UnitsNet.Ratio"/>.</summary>
        </member>
        <member name="M:UnitsNet.Ratio.op_Division(UnitsNet.Ratio,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Ratio"/> from dividing <see cref="T:UnitsNet.Ratio"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Ratio.op_Division(UnitsNet.Ratio,UnitsNet.Ratio)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Ratio"/> by <see cref="T:UnitsNet.Ratio"/>.</summary>
        </member>
        <member name="M:UnitsNet.Ratio.op_LessThanOrEqual(UnitsNet.Ratio,UnitsNet.Ratio)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Ratio.op_GreaterThanOrEqual(UnitsNet.Ratio,UnitsNet.Ratio)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Ratio.op_LessThan(UnitsNet.Ratio,UnitsNet.Ratio)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Ratio.op_GreaterThan(UnitsNet.Ratio,UnitsNet.Ratio)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Ratio.op_Equality(UnitsNet.Ratio,UnitsNet.Ratio)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Ratio.Equals(UnitsNet.Ratio,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Ratio.op_Inequality(UnitsNet.Ratio,UnitsNet.Ratio)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Ratio.Equals(UnitsNet.Ratio,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Ratio.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Ratio.CompareTo(UnitsNet.Ratio)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Ratio.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Ratio.Equals(UnitsNet.Ratio,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Ratio.Equals(UnitsNet.Ratio)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Ratio.Equals(UnitsNet.Ratio,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Ratio.Equals(UnitsNet.Ratio,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Ratio within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Ratio.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Ratio.</returns>
        </member>
        <member name="M:UnitsNet.Ratio.As(UnitsNet.Units.RatioUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Ratio.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Ratio.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Ratio.ToUnit(UnitsNet.Units.RatioUnit)">
            <summary>
                Converts this Ratio to another Ratio with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Ratio with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Ratio.ToUnit(UnitsNet.Units.RatioUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Ratio to another Ratio using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Ratio with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Ratio.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Ratio.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Ratio.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Ratio.UnitsNet#IQuantity{UnitsNet#Units#RatioUnit}#ToUnit(UnitsNet.Units.RatioUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Ratio.UnitsNet#IQuantity{UnitsNet#Units#RatioUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Ratio.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Ratio.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Ratio.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Ratio.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Ratio.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Ratio.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.RatioChangeRate">
            <inheritdoc />
            <summary>
                The change in ratio per unit of time.
            </summary>
        </member>
        <member name="F:UnitsNet.RatioChangeRate._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.RatioChangeRate._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.#ctor(System.Double,UnitsNet.Units.RatioChangeRateUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.RatioChangeRate.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.RatioChangeRate" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.RatioChangeRate.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.RatioChangeRate.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.RatioChangeRate.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RatioChangeRate.BaseUnit">
            <summary>
                The base unit of RatioChangeRate, which is DecimalFractionPerSecond. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.RatioChangeRate.MaxValue">
            <summary>
            Represents the largest possible value of RatioChangeRate
            </summary>
        </member>
        <member name="P:UnitsNet.RatioChangeRate.MinValue">
            <summary>
            Represents the smallest possible value of RatioChangeRate
            </summary>
        </member>
        <member name="P:UnitsNet.RatioChangeRate.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.RatioChangeRate.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RatioChangeRate.Units">
            <summary>
                All units of measurement for the RatioChangeRate quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RatioChangeRate.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit DecimalFractionPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.RatioChangeRate.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.RatioChangeRate.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.RatioChangeRate.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.RatioChangeRate.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.RatioChangeRate.Type">
            <summary>
                The <see cref="P:UnitsNet.RatioChangeRate.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RatioChangeRate.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.RatioChangeRate.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RatioChangeRate.DecimalFractionsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RatioChangeRateUnit.DecimalFractionPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RatioChangeRate.PercentsPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RatioChangeRateUnit.PercentPerSecond"/>
            </summary>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.GetAbbreviation(UnitsNet.Units.RatioChangeRateUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.GetAbbreviation(UnitsNet.Units.RatioChangeRateUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.FromDecimalFractionsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RatioChangeRate"/> from <see cref="F:UnitsNet.Units.RatioChangeRateUnit.DecimalFractionPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.FromPercentsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RatioChangeRate"/> from <see cref="F:UnitsNet.Units.RatioChangeRateUnit.PercentPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.From(UnitsNet.QuantityValue,UnitsNet.Units.RatioChangeRateUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.RatioChangeRateUnit" /> to <see cref="T:UnitsNet.RatioChangeRate" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>RatioChangeRate unit value.</returns>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.TryParse(System.String,UnitsNet.RatioChangeRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.TryParse(System.String,System.IFormatProvider,UnitsNet.RatioChangeRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.TryParseUnit(System.String,UnitsNet.Units.RatioChangeRateUnit@)">
            <inheritdoc cref="M:UnitsNet.RatioChangeRate.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.RatioChangeRateUnit@)"/>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.RatioChangeRateUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.op_UnaryNegation(UnitsNet.RatioChangeRate)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.op_Addition(UnitsNet.RatioChangeRate,UnitsNet.RatioChangeRate)">
            <summary>Get <see cref="T:UnitsNet.RatioChangeRate"/> from adding two <see cref="T:UnitsNet.RatioChangeRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.op_Subtraction(UnitsNet.RatioChangeRate,UnitsNet.RatioChangeRate)">
            <summary>Get <see cref="T:UnitsNet.RatioChangeRate"/> from subtracting two <see cref="T:UnitsNet.RatioChangeRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.op_Multiply(System.Double,UnitsNet.RatioChangeRate)">
            <summary>Get <see cref="T:UnitsNet.RatioChangeRate"/> from multiplying value and <see cref="T:UnitsNet.RatioChangeRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.op_Multiply(UnitsNet.RatioChangeRate,System.Double)">
            <summary>Get <see cref="T:UnitsNet.RatioChangeRate"/> from multiplying value and <see cref="T:UnitsNet.RatioChangeRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.op_Division(UnitsNet.RatioChangeRate,System.Double)">
            <summary>Get <see cref="T:UnitsNet.RatioChangeRate"/> from dividing <see cref="T:UnitsNet.RatioChangeRate"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.op_Division(UnitsNet.RatioChangeRate,UnitsNet.RatioChangeRate)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.RatioChangeRate"/> by <see cref="T:UnitsNet.RatioChangeRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.op_LessThanOrEqual(UnitsNet.RatioChangeRate,UnitsNet.RatioChangeRate)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.op_GreaterThanOrEqual(UnitsNet.RatioChangeRate,UnitsNet.RatioChangeRate)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.op_LessThan(UnitsNet.RatioChangeRate,UnitsNet.RatioChangeRate)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.op_GreaterThan(UnitsNet.RatioChangeRate,UnitsNet.RatioChangeRate)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.op_Equality(UnitsNet.RatioChangeRate,UnitsNet.RatioChangeRate)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.RatioChangeRate.Equals(UnitsNet.RatioChangeRate,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.op_Inequality(UnitsNet.RatioChangeRate,UnitsNet.RatioChangeRate)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.RatioChangeRate.Equals(UnitsNet.RatioChangeRate,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RatioChangeRate.CompareTo(UnitsNet.RatioChangeRate)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RatioChangeRate.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.RatioChangeRate.Equals(UnitsNet.RatioChangeRate,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.Equals(UnitsNet.RatioChangeRate)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.RatioChangeRate.Equals(UnitsNet.RatioChangeRate,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.Equals(UnitsNet.RatioChangeRate,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another RatioChangeRate within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current RatioChangeRate.</returns>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.As(UnitsNet.Units.RatioChangeRateUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RatioChangeRate.ToUnit(UnitsNet.Units.RatioChangeRateUnit)">
            <summary>
                Converts this RatioChangeRate to another RatioChangeRate with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A RatioChangeRate with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.ToUnit(UnitsNet.Units.RatioChangeRateUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this RatioChangeRate to another RatioChangeRate using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A RatioChangeRate with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RatioChangeRate.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RatioChangeRate.UnitsNet#IQuantity{UnitsNet#Units#RatioChangeRateUnit}#ToUnit(UnitsNet.Units.RatioChangeRateUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RatioChangeRate.UnitsNet#IQuantity{UnitsNet#Units#RatioChangeRateUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RatioChangeRate.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.RatioChangeRate.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.ReactiveEnergy">
            <inheritdoc />
            <summary>
                The Volt-ampere reactive hour (expressed as varh) is the reactive power of one Volt-ampere reactive produced in one hour.
            </summary>
        </member>
        <member name="F:UnitsNet.ReactiveEnergy._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ReactiveEnergy._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.#ctor(System.Double,UnitsNet.Units.ReactiveEnergyUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.ReactiveEnergy" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ReactiveEnergy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.BaseUnit">
            <summary>
                The base unit of ReactiveEnergy, which is VoltampereReactiveHour. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.MaxValue">
            <summary>
            Represents the largest possible value of ReactiveEnergy
            </summary>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.MinValue">
            <summary>
            Represents the smallest possible value of ReactiveEnergy
            </summary>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ReactiveEnergy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.Units">
            <summary>
                All units of measurement for the ReactiveEnergy quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit VoltampereReactiveHour.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.Type">
            <summary>
                The <see cref="P:UnitsNet.ReactiveEnergy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ReactiveEnergy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.KilovoltampereReactiveHours">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ReactiveEnergyUnit.KilovoltampereReactiveHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.MegavoltampereReactiveHours">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ReactiveEnergyUnit.MegavoltampereReactiveHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.VoltampereReactiveHours">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ReactiveEnergyUnit.VoltampereReactiveHour"/>
            </summary>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.GetAbbreviation(UnitsNet.Units.ReactiveEnergyUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.GetAbbreviation(UnitsNet.Units.ReactiveEnergyUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.FromKilovoltampereReactiveHours(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ReactiveEnergy"/> from <see cref="F:UnitsNet.Units.ReactiveEnergyUnit.KilovoltampereReactiveHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.FromMegavoltampereReactiveHours(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ReactiveEnergy"/> from <see cref="F:UnitsNet.Units.ReactiveEnergyUnit.MegavoltampereReactiveHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.FromVoltampereReactiveHours(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ReactiveEnergy"/> from <see cref="F:UnitsNet.Units.ReactiveEnergyUnit.VoltampereReactiveHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.From(UnitsNet.QuantityValue,UnitsNet.Units.ReactiveEnergyUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ReactiveEnergyUnit" /> to <see cref="T:UnitsNet.ReactiveEnergy" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ReactiveEnergy unit value.</returns>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.TryParse(System.String,UnitsNet.ReactiveEnergy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.TryParse(System.String,System.IFormatProvider,UnitsNet.ReactiveEnergy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.TryParseUnit(System.String,UnitsNet.Units.ReactiveEnergyUnit@)">
            <inheritdoc cref="M:UnitsNet.ReactiveEnergy.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ReactiveEnergyUnit@)"/>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ReactiveEnergyUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.op_UnaryNegation(UnitsNet.ReactiveEnergy)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.op_Addition(UnitsNet.ReactiveEnergy,UnitsNet.ReactiveEnergy)">
            <summary>Get <see cref="T:UnitsNet.ReactiveEnergy"/> from adding two <see cref="T:UnitsNet.ReactiveEnergy"/>.</summary>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.op_Subtraction(UnitsNet.ReactiveEnergy,UnitsNet.ReactiveEnergy)">
            <summary>Get <see cref="T:UnitsNet.ReactiveEnergy"/> from subtracting two <see cref="T:UnitsNet.ReactiveEnergy"/>.</summary>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.op_Multiply(System.Double,UnitsNet.ReactiveEnergy)">
            <summary>Get <see cref="T:UnitsNet.ReactiveEnergy"/> from multiplying value and <see cref="T:UnitsNet.ReactiveEnergy"/>.</summary>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.op_Multiply(UnitsNet.ReactiveEnergy,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ReactiveEnergy"/> from multiplying value and <see cref="T:UnitsNet.ReactiveEnergy"/>.</summary>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.op_Division(UnitsNet.ReactiveEnergy,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ReactiveEnergy"/> from dividing <see cref="T:UnitsNet.ReactiveEnergy"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.op_Division(UnitsNet.ReactiveEnergy,UnitsNet.ReactiveEnergy)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.ReactiveEnergy"/> by <see cref="T:UnitsNet.ReactiveEnergy"/>.</summary>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.op_LessThanOrEqual(UnitsNet.ReactiveEnergy,UnitsNet.ReactiveEnergy)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.op_GreaterThanOrEqual(UnitsNet.ReactiveEnergy,UnitsNet.ReactiveEnergy)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.op_LessThan(UnitsNet.ReactiveEnergy,UnitsNet.ReactiveEnergy)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.op_GreaterThan(UnitsNet.ReactiveEnergy,UnitsNet.ReactiveEnergy)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.op_Equality(UnitsNet.ReactiveEnergy,UnitsNet.ReactiveEnergy)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ReactiveEnergy.Equals(UnitsNet.ReactiveEnergy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.op_Inequality(UnitsNet.ReactiveEnergy,UnitsNet.ReactiveEnergy)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ReactiveEnergy.Equals(UnitsNet.ReactiveEnergy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.CompareTo(UnitsNet.ReactiveEnergy)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ReactiveEnergy.Equals(UnitsNet.ReactiveEnergy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.Equals(UnitsNet.ReactiveEnergy)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ReactiveEnergy.Equals(UnitsNet.ReactiveEnergy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.Equals(UnitsNet.ReactiveEnergy,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ReactiveEnergy within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ReactiveEnergy.</returns>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.As(UnitsNet.Units.ReactiveEnergyUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.ToUnit(UnitsNet.Units.ReactiveEnergyUnit)">
            <summary>
                Converts this ReactiveEnergy to another ReactiveEnergy with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A ReactiveEnergy with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.ToUnit(UnitsNet.Units.ReactiveEnergyUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this ReactiveEnergy to another ReactiveEnergy using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A ReactiveEnergy with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.UnitsNet#IQuantity{UnitsNet#Units#ReactiveEnergyUnit}#ToUnit(UnitsNet.Units.ReactiveEnergyUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.UnitsNet#IQuantity{UnitsNet#Units#ReactiveEnergyUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.ReactivePower">
            <inheritdoc />
            <summary>
                Volt-ampere reactive (var) is a unit by which reactive power is expressed in an AC electric power system. Reactive power exists in an AC circuit when the current and voltage are not in phase.
            </summary>
        </member>
        <member name="F:UnitsNet.ReactivePower._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ReactivePower._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ReactivePower.#ctor(System.Double,UnitsNet.Units.ReactivePowerUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReactivePower.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.ReactivePower.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.ReactivePower" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactivePower.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ReactivePower.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ReactivePower.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactivePower.BaseUnit">
            <summary>
                The base unit of ReactivePower, which is VoltampereReactive. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactivePower.MaxValue">
            <summary>
            Represents the largest possible value of ReactivePower
            </summary>
        </member>
        <member name="P:UnitsNet.ReactivePower.MinValue">
            <summary>
            Represents the smallest possible value of ReactivePower
            </summary>
        </member>
        <member name="P:UnitsNet.ReactivePower.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ReactivePower.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactivePower.Units">
            <summary>
                All units of measurement for the ReactivePower quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactivePower.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit VoltampereReactive.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactivePower.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactivePower.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ReactivePower.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ReactivePower.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ReactivePower.Type">
            <summary>
                The <see cref="P:UnitsNet.ReactivePower.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactivePower.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ReactivePower.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactivePower.GigavoltamperesReactive">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ReactivePowerUnit.GigavoltampereReactive"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ReactivePower.KilovoltamperesReactive">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ReactivePowerUnit.KilovoltampereReactive"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ReactivePower.MegavoltamperesReactive">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ReactivePowerUnit.MegavoltampereReactive"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ReactivePower.VoltamperesReactive">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ReactivePowerUnit.VoltampereReactive"/>
            </summary>
        </member>
        <member name="M:UnitsNet.ReactivePower.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.ReactivePower.GetAbbreviation(UnitsNet.Units.ReactivePowerUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ReactivePower.GetAbbreviation(UnitsNet.Units.ReactivePowerUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ReactivePower.FromGigavoltamperesReactive(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ReactivePower"/> from <see cref="F:UnitsNet.Units.ReactivePowerUnit.GigavoltampereReactive"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReactivePower.FromKilovoltamperesReactive(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ReactivePower"/> from <see cref="F:UnitsNet.Units.ReactivePowerUnit.KilovoltampereReactive"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReactivePower.FromMegavoltamperesReactive(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ReactivePower"/> from <see cref="F:UnitsNet.Units.ReactivePowerUnit.MegavoltampereReactive"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReactivePower.FromVoltamperesReactive(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ReactivePower"/> from <see cref="F:UnitsNet.Units.ReactivePowerUnit.VoltampereReactive"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReactivePower.From(UnitsNet.QuantityValue,UnitsNet.Units.ReactivePowerUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ReactivePowerUnit" /> to <see cref="T:UnitsNet.ReactivePower" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ReactivePower unit value.</returns>
        </member>
        <member name="M:UnitsNet.ReactivePower.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ReactivePower.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ReactivePower.TryParse(System.String,UnitsNet.ReactivePower@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ReactivePower.TryParse(System.String,System.IFormatProvider,UnitsNet.ReactivePower@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ReactivePower.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ReactivePower.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ReactivePower.TryParseUnit(System.String,UnitsNet.Units.ReactivePowerUnit@)">
            <inheritdoc cref="M:UnitsNet.ReactivePower.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ReactivePowerUnit@)"/>
        </member>
        <member name="M:UnitsNet.ReactivePower.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ReactivePowerUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ReactivePower.op_UnaryNegation(UnitsNet.ReactivePower)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.ReactivePower.op_Addition(UnitsNet.ReactivePower,UnitsNet.ReactivePower)">
            <summary>Get <see cref="T:UnitsNet.ReactivePower"/> from adding two <see cref="T:UnitsNet.ReactivePower"/>.</summary>
        </member>
        <member name="M:UnitsNet.ReactivePower.op_Subtraction(UnitsNet.ReactivePower,UnitsNet.ReactivePower)">
            <summary>Get <see cref="T:UnitsNet.ReactivePower"/> from subtracting two <see cref="T:UnitsNet.ReactivePower"/>.</summary>
        </member>
        <member name="M:UnitsNet.ReactivePower.op_Multiply(System.Double,UnitsNet.ReactivePower)">
            <summary>Get <see cref="T:UnitsNet.ReactivePower"/> from multiplying value and <see cref="T:UnitsNet.ReactivePower"/>.</summary>
        </member>
        <member name="M:UnitsNet.ReactivePower.op_Multiply(UnitsNet.ReactivePower,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ReactivePower"/> from multiplying value and <see cref="T:UnitsNet.ReactivePower"/>.</summary>
        </member>
        <member name="M:UnitsNet.ReactivePower.op_Division(UnitsNet.ReactivePower,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ReactivePower"/> from dividing <see cref="T:UnitsNet.ReactivePower"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.ReactivePower.op_Division(UnitsNet.ReactivePower,UnitsNet.ReactivePower)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.ReactivePower"/> by <see cref="T:UnitsNet.ReactivePower"/>.</summary>
        </member>
        <member name="M:UnitsNet.ReactivePower.op_LessThanOrEqual(UnitsNet.ReactivePower,UnitsNet.ReactivePower)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ReactivePower.op_GreaterThanOrEqual(UnitsNet.ReactivePower,UnitsNet.ReactivePower)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ReactivePower.op_LessThan(UnitsNet.ReactivePower,UnitsNet.ReactivePower)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.ReactivePower.op_GreaterThan(UnitsNet.ReactivePower,UnitsNet.ReactivePower)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.ReactivePower.op_Equality(UnitsNet.ReactivePower,UnitsNet.ReactivePower)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ReactivePower.Equals(UnitsNet.ReactivePower,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ReactivePower.op_Inequality(UnitsNet.ReactivePower,UnitsNet.ReactivePower)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ReactivePower.Equals(UnitsNet.ReactivePower,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ReactivePower.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ReactivePower.CompareTo(UnitsNet.ReactivePower)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ReactivePower.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ReactivePower.Equals(UnitsNet.ReactivePower,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ReactivePower.Equals(UnitsNet.ReactivePower)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ReactivePower.Equals(UnitsNet.ReactivePower,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ReactivePower.Equals(UnitsNet.ReactivePower,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ReactivePower within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ReactivePower.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ReactivePower.</returns>
        </member>
        <member name="M:UnitsNet.ReactivePower.As(UnitsNet.Units.ReactivePowerUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ReactivePower.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ReactivePower.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ReactivePower.ToUnit(UnitsNet.Units.ReactivePowerUnit)">
            <summary>
                Converts this ReactivePower to another ReactivePower with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A ReactivePower with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ReactivePower.ToUnit(UnitsNet.Units.ReactivePowerUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this ReactivePower to another ReactivePower using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A ReactivePower with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ReactivePower.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ReactivePower.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ReactivePower.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ReactivePower.UnitsNet#IQuantity{UnitsNet#Units#ReactivePowerUnit}#ToUnit(UnitsNet.Units.ReactivePowerUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ReactivePower.UnitsNet#IQuantity{UnitsNet#Units#ReactivePowerUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ReactivePower.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ReactivePower.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ReactivePower.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ReactivePower.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ReactivePower.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.ReactivePower.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.RelativeHumidity">
            <inheritdoc />
            <summary>
                Relative humidity is a ratio of the actual water vapor present in the air to the maximum water vapor in the air at the given temperature.
            </summary>
        </member>
        <member name="F:UnitsNet.RelativeHumidity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.RelativeHumidity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.#ctor(System.Double,UnitsNet.Units.RelativeHumidityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.RelativeHumidity.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.RelativeHumidity" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.RelativeHumidity.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.RelativeHumidity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.RelativeHumidity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RelativeHumidity.BaseUnit">
            <summary>
                The base unit of RelativeHumidity, which is Percent. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.RelativeHumidity.MaxValue">
            <summary>
            Represents the largest possible value of RelativeHumidity
            </summary>
        </member>
        <member name="P:UnitsNet.RelativeHumidity.MinValue">
            <summary>
            Represents the smallest possible value of RelativeHumidity
            </summary>
        </member>
        <member name="P:UnitsNet.RelativeHumidity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.RelativeHumidity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RelativeHumidity.Units">
            <summary>
                All units of measurement for the RelativeHumidity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RelativeHumidity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Percent.
            </summary>
        </member>
        <member name="P:UnitsNet.RelativeHumidity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.RelativeHumidity.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.RelativeHumidity.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.RelativeHumidity.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.RelativeHumidity.Type">
            <summary>
                The <see cref="P:UnitsNet.RelativeHumidity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RelativeHumidity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.RelativeHumidity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RelativeHumidity.Percent">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RelativeHumidityUnit.Percent"/>
            </summary>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.GetAbbreviation(UnitsNet.Units.RelativeHumidityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.GetAbbreviation(UnitsNet.Units.RelativeHumidityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.FromPercent(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RelativeHumidity"/> from <see cref="F:UnitsNet.Units.RelativeHumidityUnit.Percent"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.From(UnitsNet.QuantityValue,UnitsNet.Units.RelativeHumidityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.RelativeHumidityUnit" /> to <see cref="T:UnitsNet.RelativeHumidity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>RelativeHumidity unit value.</returns>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.TryParse(System.String,UnitsNet.RelativeHumidity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.TryParse(System.String,System.IFormatProvider,UnitsNet.RelativeHumidity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.TryParseUnit(System.String,UnitsNet.Units.RelativeHumidityUnit@)">
            <inheritdoc cref="M:UnitsNet.RelativeHumidity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.RelativeHumidityUnit@)"/>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.RelativeHumidityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.op_UnaryNegation(UnitsNet.RelativeHumidity)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.op_Addition(UnitsNet.RelativeHumidity,UnitsNet.RelativeHumidity)">
            <summary>Get <see cref="T:UnitsNet.RelativeHumidity"/> from adding two <see cref="T:UnitsNet.RelativeHumidity"/>.</summary>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.op_Subtraction(UnitsNet.RelativeHumidity,UnitsNet.RelativeHumidity)">
            <summary>Get <see cref="T:UnitsNet.RelativeHumidity"/> from subtracting two <see cref="T:UnitsNet.RelativeHumidity"/>.</summary>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.op_Multiply(System.Double,UnitsNet.RelativeHumidity)">
            <summary>Get <see cref="T:UnitsNet.RelativeHumidity"/> from multiplying value and <see cref="T:UnitsNet.RelativeHumidity"/>.</summary>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.op_Multiply(UnitsNet.RelativeHumidity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.RelativeHumidity"/> from multiplying value and <see cref="T:UnitsNet.RelativeHumidity"/>.</summary>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.op_Division(UnitsNet.RelativeHumidity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.RelativeHumidity"/> from dividing <see cref="T:UnitsNet.RelativeHumidity"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.op_Division(UnitsNet.RelativeHumidity,UnitsNet.RelativeHumidity)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.RelativeHumidity"/> by <see cref="T:UnitsNet.RelativeHumidity"/>.</summary>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.op_LessThanOrEqual(UnitsNet.RelativeHumidity,UnitsNet.RelativeHumidity)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.op_GreaterThanOrEqual(UnitsNet.RelativeHumidity,UnitsNet.RelativeHumidity)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.op_LessThan(UnitsNet.RelativeHumidity,UnitsNet.RelativeHumidity)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.op_GreaterThan(UnitsNet.RelativeHumidity,UnitsNet.RelativeHumidity)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.op_Equality(UnitsNet.RelativeHumidity,UnitsNet.RelativeHumidity)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.RelativeHumidity.Equals(UnitsNet.RelativeHumidity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.op_Inequality(UnitsNet.RelativeHumidity,UnitsNet.RelativeHumidity)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.RelativeHumidity.Equals(UnitsNet.RelativeHumidity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RelativeHumidity.CompareTo(UnitsNet.RelativeHumidity)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RelativeHumidity.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.RelativeHumidity.Equals(UnitsNet.RelativeHumidity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.Equals(UnitsNet.RelativeHumidity)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.RelativeHumidity.Equals(UnitsNet.RelativeHumidity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.Equals(UnitsNet.RelativeHumidity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another RelativeHumidity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current RelativeHumidity.</returns>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.As(UnitsNet.Units.RelativeHumidityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RelativeHumidity.ToUnit(UnitsNet.Units.RelativeHumidityUnit)">
            <summary>
                Converts this RelativeHumidity to another RelativeHumidity with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A RelativeHumidity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.ToUnit(UnitsNet.Units.RelativeHumidityUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this RelativeHumidity to another RelativeHumidity using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A RelativeHumidity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RelativeHumidity.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RelativeHumidity.UnitsNet#IQuantity{UnitsNet#Units#RelativeHumidityUnit}#ToUnit(UnitsNet.Units.RelativeHumidityUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RelativeHumidity.UnitsNet#IQuantity{UnitsNet#Units#RelativeHumidityUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RelativeHumidity.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.RelativeHumidity.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.RotationalAcceleration">
            <inheritdoc />
            <summary>
                Angular acceleration is the rate of change of rotational speed.
            </summary>
        </member>
        <member name="F:UnitsNet.RotationalAcceleration._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.RotationalAcceleration._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.#ctor(System.Double,UnitsNet.Units.RotationalAccelerationUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.RotationalAcceleration" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.RotationalAcceleration.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.BaseUnit">
            <summary>
                The base unit of RotationalAcceleration, which is RadianPerSecondSquared. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.MaxValue">
            <summary>
            Represents the largest possible value of RotationalAcceleration
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.MinValue">
            <summary>
            Represents the smallest possible value of RotationalAcceleration
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.RotationalAcceleration.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.Units">
            <summary>
                All units of measurement for the RotationalAcceleration quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit RadianPerSecondSquared.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.Type">
            <summary>
                The <see cref="P:UnitsNet.RotationalAcceleration.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.RotationalAcceleration.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.DegreesPerSecondSquared">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalAccelerationUnit.DegreePerSecondSquared"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.RadiansPerSecondSquared">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalAccelerationUnit.RadianPerSecondSquared"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.RevolutionsPerMinutePerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalAccelerationUnit.RevolutionPerMinutePerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.RevolutionsPerSecondSquared">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.RotationalAccelerationUnit.RevolutionPerSecondSquared"/>
            </summary>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.GetAbbreviation(UnitsNet.Units.RotationalAccelerationUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.GetAbbreviation(UnitsNet.Units.RotationalAccelerationUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.FromDegreesPerSecondSquared(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalAcceleration"/> from <see cref="F:UnitsNet.Units.RotationalAccelerationUnit.DegreePerSecondSquared"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.FromRadiansPerSecondSquared(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalAcceleration"/> from <see cref="F:UnitsNet.Units.RotationalAccelerationUnit.RadianPerSecondSquared"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.FromRevolutionsPerMinutePerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalAcceleration"/> from <see cref="F:UnitsNet.Units.RotationalAccelerationUnit.RevolutionPerMinutePerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.FromRevolutionsPerSecondSquared(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.RotationalAcceleration"/> from <see cref="F:UnitsNet.Units.RotationalAccelerationUnit.RevolutionPerSecondSquared"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.From(UnitsNet.QuantityValue,UnitsNet.Units.RotationalAccelerationUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.RotationalAccelerationUnit" /> to <see cref="T:UnitsNet.RotationalAcceleration" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>RotationalAcceleration unit value.</returns>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.TryParse(System.String,UnitsNet.RotationalAcceleration@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.TryParse(System.String,System.IFormatProvider,UnitsNet.RotationalAcceleration@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.TryParseUnit(System.String,UnitsNet.Units.RotationalAccelerationUnit@)">
            <inheritdoc cref="M:UnitsNet.RotationalAcceleration.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.RotationalAccelerationUnit@)"/>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.RotationalAccelerationUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.op_UnaryNegation(UnitsNet.RotationalAcceleration)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.op_Addition(UnitsNet.RotationalAcceleration,UnitsNet.RotationalAcceleration)">
            <summary>Get <see cref="T:UnitsNet.RotationalAcceleration"/> from adding two <see cref="T:UnitsNet.RotationalAcceleration"/>.</summary>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.op_Subtraction(UnitsNet.RotationalAcceleration,UnitsNet.RotationalAcceleration)">
            <summary>Get <see cref="T:UnitsNet.RotationalAcceleration"/> from subtracting two <see cref="T:UnitsNet.RotationalAcceleration"/>.</summary>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.op_Multiply(System.Double,UnitsNet.RotationalAcceleration)">
            <summary>Get <see cref="T:UnitsNet.RotationalAcceleration"/> from multiplying value and <see cref="T:UnitsNet.RotationalAcceleration"/>.</summary>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.op_Multiply(UnitsNet.RotationalAcceleration,System.Double)">
            <summary>Get <see cref="T:UnitsNet.RotationalAcceleration"/> from multiplying value and <see cref="T:UnitsNet.RotationalAcceleration"/>.</summary>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.op_Division(UnitsNet.RotationalAcceleration,System.Double)">
            <summary>Get <see cref="T:UnitsNet.RotationalAcceleration"/> from dividing <see cref="T:UnitsNet.RotationalAcceleration"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.op_Division(UnitsNet.RotationalAcceleration,UnitsNet.RotationalAcceleration)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.RotationalAcceleration"/> by <see cref="T:UnitsNet.RotationalAcceleration"/>.</summary>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.op_LessThanOrEqual(UnitsNet.RotationalAcceleration,UnitsNet.RotationalAcceleration)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.op_GreaterThanOrEqual(UnitsNet.RotationalAcceleration,UnitsNet.RotationalAcceleration)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.op_LessThan(UnitsNet.RotationalAcceleration,UnitsNet.RotationalAcceleration)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.op_GreaterThan(UnitsNet.RotationalAcceleration,UnitsNet.RotationalAcceleration)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.op_Equality(UnitsNet.RotationalAcceleration,UnitsNet.RotationalAcceleration)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.RotationalAcceleration.Equals(UnitsNet.RotationalAcceleration,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.op_Inequality(UnitsNet.RotationalAcceleration,UnitsNet.RotationalAcceleration)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.RotationalAcceleration.Equals(UnitsNet.RotationalAcceleration,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.CompareTo(UnitsNet.RotationalAcceleration)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.RotationalAcceleration.Equals(UnitsNet.RotationalAcceleration,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.Equals(UnitsNet.RotationalAcceleration)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.RotationalAcceleration.Equals(UnitsNet.RotationalAcceleration,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.Equals(UnitsNet.RotationalAcceleration,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another RotationalAcceleration within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current RotationalAcceleration.</returns>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.As(UnitsNet.Units.RotationalAccelerationUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.ToUnit(UnitsNet.Units.RotationalAccelerationUnit)">
            <summary>
                Converts this RotationalAcceleration to another RotationalAcceleration with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A RotationalAcceleration with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.ToUnit(UnitsNet.Units.RotationalAccelerationUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this RotationalAcceleration to another RotationalAcceleration using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A RotationalAcceleration with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.UnitsNet#IQuantity{UnitsNet#Units#RotationalAccelerationUnit}#ToUnit(UnitsNet.Units.RotationalAccelerationUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.UnitsNet#IQuantity{UnitsNet#Units#RotationalAccelerationUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Scalar">
            <inheritdoc />
            <summary>
                A way of representing a number of items.
            </summary>
        </member>
        <member name="F:UnitsNet.Scalar._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Scalar._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Scalar.#ctor(System.Double,UnitsNet.Units.ScalarUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Scalar.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Scalar.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Scalar" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Scalar.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Scalar.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Scalar.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Scalar.BaseUnit">
            <summary>
                The base unit of Scalar, which is Amount. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Scalar.MaxValue">
            <summary>
            Represents the largest possible value of Scalar
            </summary>
        </member>
        <member name="P:UnitsNet.Scalar.MinValue">
            <summary>
            Represents the smallest possible value of Scalar
            </summary>
        </member>
        <member name="P:UnitsNet.Scalar.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Scalar.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Scalar.Units">
            <summary>
                All units of measurement for the Scalar quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Scalar.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Amount.
            </summary>
        </member>
        <member name="P:UnitsNet.Scalar.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Scalar.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Scalar.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Scalar.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Scalar.Type">
            <summary>
                The <see cref="P:UnitsNet.Scalar.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Scalar.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Scalar.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Scalar.Amount">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ScalarUnit.Amount"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Scalar.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Scalar.GetAbbreviation(UnitsNet.Units.ScalarUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Scalar.GetAbbreviation(UnitsNet.Units.ScalarUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Scalar.FromAmount(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Scalar"/> from <see cref="F:UnitsNet.Units.ScalarUnit.Amount"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Scalar.From(UnitsNet.QuantityValue,UnitsNet.Units.ScalarUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ScalarUnit" /> to <see cref="T:UnitsNet.Scalar" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Scalar unit value.</returns>
        </member>
        <member name="M:UnitsNet.Scalar.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Scalar.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Scalar.TryParse(System.String,UnitsNet.Scalar@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Scalar.TryParse(System.String,System.IFormatProvider,UnitsNet.Scalar@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Scalar.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Scalar.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Scalar.TryParseUnit(System.String,UnitsNet.Units.ScalarUnit@)">
            <inheritdoc cref="M:UnitsNet.Scalar.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ScalarUnit@)"/>
        </member>
        <member name="M:UnitsNet.Scalar.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ScalarUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Scalar.op_UnaryNegation(UnitsNet.Scalar)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Scalar.op_Addition(UnitsNet.Scalar,UnitsNet.Scalar)">
            <summary>Get <see cref="T:UnitsNet.Scalar"/> from adding two <see cref="T:UnitsNet.Scalar"/>.</summary>
        </member>
        <member name="M:UnitsNet.Scalar.op_Subtraction(UnitsNet.Scalar,UnitsNet.Scalar)">
            <summary>Get <see cref="T:UnitsNet.Scalar"/> from subtracting two <see cref="T:UnitsNet.Scalar"/>.</summary>
        </member>
        <member name="M:UnitsNet.Scalar.op_Multiply(System.Double,UnitsNet.Scalar)">
            <summary>Get <see cref="T:UnitsNet.Scalar"/> from multiplying value and <see cref="T:UnitsNet.Scalar"/>.</summary>
        </member>
        <member name="M:UnitsNet.Scalar.op_Multiply(UnitsNet.Scalar,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Scalar"/> from multiplying value and <see cref="T:UnitsNet.Scalar"/>.</summary>
        </member>
        <member name="M:UnitsNet.Scalar.op_Division(UnitsNet.Scalar,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Scalar"/> from dividing <see cref="T:UnitsNet.Scalar"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Scalar.op_Division(UnitsNet.Scalar,UnitsNet.Scalar)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Scalar"/> by <see cref="T:UnitsNet.Scalar"/>.</summary>
        </member>
        <member name="M:UnitsNet.Scalar.op_LessThanOrEqual(UnitsNet.Scalar,UnitsNet.Scalar)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Scalar.op_GreaterThanOrEqual(UnitsNet.Scalar,UnitsNet.Scalar)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Scalar.op_LessThan(UnitsNet.Scalar,UnitsNet.Scalar)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Scalar.op_GreaterThan(UnitsNet.Scalar,UnitsNet.Scalar)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Scalar.op_Equality(UnitsNet.Scalar,UnitsNet.Scalar)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Scalar.Equals(UnitsNet.Scalar,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Scalar.op_Inequality(UnitsNet.Scalar,UnitsNet.Scalar)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Scalar.Equals(UnitsNet.Scalar,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Scalar.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Scalar.CompareTo(UnitsNet.Scalar)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Scalar.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Scalar.Equals(UnitsNet.Scalar,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Scalar.Equals(UnitsNet.Scalar)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Scalar.Equals(UnitsNet.Scalar,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Scalar.Equals(UnitsNet.Scalar,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Scalar within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Scalar.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Scalar.</returns>
        </member>
        <member name="M:UnitsNet.Scalar.As(UnitsNet.Units.ScalarUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Scalar.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Scalar.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Scalar.ToUnit(UnitsNet.Units.ScalarUnit)">
            <summary>
                Converts this Scalar to another Scalar with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Scalar with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Scalar.ToUnit(UnitsNet.Units.ScalarUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Scalar to another Scalar using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Scalar with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Scalar.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Scalar.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Scalar.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Scalar.UnitsNet#IQuantity{UnitsNet#Units#ScalarUnit}#ToUnit(UnitsNet.Units.ScalarUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Scalar.UnitsNet#IQuantity{UnitsNet#Units#ScalarUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Scalar.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Scalar.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Scalar.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Scalar.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Scalar.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Scalar.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.SolidAngle">
            <inheritdoc />
            <summary>
                In geometry, a solid angle is the two-dimensional angle in three-dimensional space that an object subtends at a point.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Solid_angle
            </remarks>
        </member>
        <member name="F:UnitsNet.SolidAngle._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.SolidAngle._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.SolidAngle.#ctor(System.Double,UnitsNet.Units.SolidAngleUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SolidAngle.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.SolidAngle.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.SolidAngle" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.SolidAngle.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.SolidAngle.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.SolidAngle.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SolidAngle.BaseUnit">
            <summary>
                The base unit of SolidAngle, which is Steradian. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.SolidAngle.MaxValue">
            <summary>
            Represents the largest possible value of SolidAngle
            </summary>
        </member>
        <member name="P:UnitsNet.SolidAngle.MinValue">
            <summary>
            Represents the smallest possible value of SolidAngle
            </summary>
        </member>
        <member name="P:UnitsNet.SolidAngle.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.SolidAngle.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SolidAngle.Units">
            <summary>
                All units of measurement for the SolidAngle quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SolidAngle.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Steradian.
            </summary>
        </member>
        <member name="P:UnitsNet.SolidAngle.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.SolidAngle.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.SolidAngle.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.SolidAngle.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.SolidAngle.Type">
            <summary>
                The <see cref="P:UnitsNet.SolidAngle.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SolidAngle.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.SolidAngle.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SolidAngle.Steradians">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SolidAngleUnit.Steradian"/>
            </summary>
        </member>
        <member name="M:UnitsNet.SolidAngle.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.SolidAngle.GetAbbreviation(UnitsNet.Units.SolidAngleUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.SolidAngle.GetAbbreviation(UnitsNet.Units.SolidAngleUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SolidAngle.FromSteradians(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SolidAngle"/> from <see cref="F:UnitsNet.Units.SolidAngleUnit.Steradian"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SolidAngle.From(UnitsNet.QuantityValue,UnitsNet.Units.SolidAngleUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.SolidAngleUnit" /> to <see cref="T:UnitsNet.SolidAngle" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>SolidAngle unit value.</returns>
        </member>
        <member name="M:UnitsNet.SolidAngle.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.SolidAngle.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SolidAngle.TryParse(System.String,UnitsNet.SolidAngle@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SolidAngle.TryParse(System.String,System.IFormatProvider,UnitsNet.SolidAngle@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SolidAngle.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.SolidAngle.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.SolidAngle.TryParseUnit(System.String,UnitsNet.Units.SolidAngleUnit@)">
            <inheritdoc cref="M:UnitsNet.SolidAngle.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.SolidAngleUnit@)"/>
        </member>
        <member name="M:UnitsNet.SolidAngle.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.SolidAngleUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SolidAngle.op_UnaryNegation(UnitsNet.SolidAngle)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.SolidAngle.op_Addition(UnitsNet.SolidAngle,UnitsNet.SolidAngle)">
            <summary>Get <see cref="T:UnitsNet.SolidAngle"/> from adding two <see cref="T:UnitsNet.SolidAngle"/>.</summary>
        </member>
        <member name="M:UnitsNet.SolidAngle.op_Subtraction(UnitsNet.SolidAngle,UnitsNet.SolidAngle)">
            <summary>Get <see cref="T:UnitsNet.SolidAngle"/> from subtracting two <see cref="T:UnitsNet.SolidAngle"/>.</summary>
        </member>
        <member name="M:UnitsNet.SolidAngle.op_Multiply(System.Double,UnitsNet.SolidAngle)">
            <summary>Get <see cref="T:UnitsNet.SolidAngle"/> from multiplying value and <see cref="T:UnitsNet.SolidAngle"/>.</summary>
        </member>
        <member name="M:UnitsNet.SolidAngle.op_Multiply(UnitsNet.SolidAngle,System.Double)">
            <summary>Get <see cref="T:UnitsNet.SolidAngle"/> from multiplying value and <see cref="T:UnitsNet.SolidAngle"/>.</summary>
        </member>
        <member name="M:UnitsNet.SolidAngle.op_Division(UnitsNet.SolidAngle,System.Double)">
            <summary>Get <see cref="T:UnitsNet.SolidAngle"/> from dividing <see cref="T:UnitsNet.SolidAngle"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.SolidAngle.op_Division(UnitsNet.SolidAngle,UnitsNet.SolidAngle)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.SolidAngle"/> by <see cref="T:UnitsNet.SolidAngle"/>.</summary>
        </member>
        <member name="M:UnitsNet.SolidAngle.op_LessThanOrEqual(UnitsNet.SolidAngle,UnitsNet.SolidAngle)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.SolidAngle.op_GreaterThanOrEqual(UnitsNet.SolidAngle,UnitsNet.SolidAngle)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.SolidAngle.op_LessThan(UnitsNet.SolidAngle,UnitsNet.SolidAngle)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.SolidAngle.op_GreaterThan(UnitsNet.SolidAngle,UnitsNet.SolidAngle)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.SolidAngle.op_Equality(UnitsNet.SolidAngle,UnitsNet.SolidAngle)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.SolidAngle.Equals(UnitsNet.SolidAngle,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.SolidAngle.op_Inequality(UnitsNet.SolidAngle,UnitsNet.SolidAngle)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.SolidAngle.Equals(UnitsNet.SolidAngle,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.SolidAngle.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SolidAngle.CompareTo(UnitsNet.SolidAngle)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SolidAngle.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.SolidAngle.Equals(UnitsNet.SolidAngle,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.SolidAngle.Equals(UnitsNet.SolidAngle)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.SolidAngle.Equals(UnitsNet.SolidAngle,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.SolidAngle.Equals(UnitsNet.SolidAngle,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another SolidAngle within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.SolidAngle.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current SolidAngle.</returns>
        </member>
        <member name="M:UnitsNet.SolidAngle.As(UnitsNet.Units.SolidAngleUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.SolidAngle.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.SolidAngle.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SolidAngle.ToUnit(UnitsNet.Units.SolidAngleUnit)">
            <summary>
                Converts this SolidAngle to another SolidAngle with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A SolidAngle with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.SolidAngle.ToUnit(UnitsNet.Units.SolidAngleUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this SolidAngle to another SolidAngle using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A SolidAngle with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.SolidAngle.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SolidAngle.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.SolidAngle.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SolidAngle.UnitsNet#IQuantity{UnitsNet#Units#SolidAngleUnit}#ToUnit(UnitsNet.Units.SolidAngleUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SolidAngle.UnitsNet#IQuantity{UnitsNet#Units#SolidAngleUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SolidAngle.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.SolidAngle.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SolidAngle.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SolidAngle.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SolidAngle.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.SolidAngle.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.SpecificEntropy">
            <inheritdoc />
            <summary>
                Specific entropy is an amount of energy required to raise temperature of a substance by 1 Kelvin per unit mass.
            </summary>
        </member>
        <member name="F:UnitsNet.SpecificEntropy._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.SpecificEntropy._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.#ctor(System.Double,UnitsNet.Units.SpecificEntropyUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.SpecificEntropy" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.SpecificEntropy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.BaseUnit">
            <summary>
                The base unit of SpecificEntropy, which is JoulePerKilogramKelvin. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.MaxValue">
            <summary>
            Represents the largest possible value of SpecificEntropy
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.MinValue">
            <summary>
            Represents the smallest possible value of SpecificEntropy
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.SpecificEntropy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.Units">
            <summary>
                All units of measurement for the SpecificEntropy quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit JoulePerKilogramKelvin.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.SpecificEntropy.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.SpecificEntropy.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.Type">
            <summary>
                The <see cref="P:UnitsNet.SpecificEntropy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.SpecificEntropy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.BtusPerPoundFahrenheit">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEntropyUnit.BtuPerPoundFahrenheit"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.CaloriesPerGramKelvin">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEntropyUnit.CaloriePerGramKelvin"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.JoulesPerKilogramDegreeCelsius">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEntropyUnit.JoulePerKilogramDegreeCelsius"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.JoulesPerKilogramKelvin">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEntropyUnit.JoulePerKilogramKelvin"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.KilocaloriesPerGramKelvin">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEntropyUnit.KilocaloriePerGramKelvin"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.KilojoulesPerKilogramDegreeCelsius">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEntropyUnit.KilojoulePerKilogramDegreeCelsius"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.KilojoulesPerKilogramKelvin">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEntropyUnit.KilojoulePerKilogramKelvin"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.MegajoulesPerKilogramDegreeCelsius">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEntropyUnit.MegajoulePerKilogramDegreeCelsius"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.MegajoulesPerKilogramKelvin">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificEntropyUnit.MegajoulePerKilogramKelvin"/>
            </summary>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.GetAbbreviation(UnitsNet.Units.SpecificEntropyUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.GetAbbreviation(UnitsNet.Units.SpecificEntropyUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.FromBtusPerPoundFahrenheit(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEntropy"/> from <see cref="F:UnitsNet.Units.SpecificEntropyUnit.BtuPerPoundFahrenheit"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.FromCaloriesPerGramKelvin(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEntropy"/> from <see cref="F:UnitsNet.Units.SpecificEntropyUnit.CaloriePerGramKelvin"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.FromJoulesPerKilogramDegreeCelsius(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEntropy"/> from <see cref="F:UnitsNet.Units.SpecificEntropyUnit.JoulePerKilogramDegreeCelsius"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.FromJoulesPerKilogramKelvin(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEntropy"/> from <see cref="F:UnitsNet.Units.SpecificEntropyUnit.JoulePerKilogramKelvin"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.FromKilocaloriesPerGramKelvin(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEntropy"/> from <see cref="F:UnitsNet.Units.SpecificEntropyUnit.KilocaloriePerGramKelvin"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.FromKilojoulesPerKilogramDegreeCelsius(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEntropy"/> from <see cref="F:UnitsNet.Units.SpecificEntropyUnit.KilojoulePerKilogramDegreeCelsius"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.FromKilojoulesPerKilogramKelvin(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEntropy"/> from <see cref="F:UnitsNet.Units.SpecificEntropyUnit.KilojoulePerKilogramKelvin"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.FromMegajoulesPerKilogramDegreeCelsius(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEntropy"/> from <see cref="F:UnitsNet.Units.SpecificEntropyUnit.MegajoulePerKilogramDegreeCelsius"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.FromMegajoulesPerKilogramKelvin(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificEntropy"/> from <see cref="F:UnitsNet.Units.SpecificEntropyUnit.MegajoulePerKilogramKelvin"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.From(UnitsNet.QuantityValue,UnitsNet.Units.SpecificEntropyUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.SpecificEntropyUnit" /> to <see cref="T:UnitsNet.SpecificEntropy" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>SpecificEntropy unit value.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.TryParse(System.String,UnitsNet.SpecificEntropy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.TryParse(System.String,System.IFormatProvider,UnitsNet.SpecificEntropy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.TryParseUnit(System.String,UnitsNet.Units.SpecificEntropyUnit@)">
            <inheritdoc cref="M:UnitsNet.SpecificEntropy.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.SpecificEntropyUnit@)"/>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.SpecificEntropyUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.op_UnaryNegation(UnitsNet.SpecificEntropy)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.op_Addition(UnitsNet.SpecificEntropy,UnitsNet.SpecificEntropy)">
            <summary>Get <see cref="T:UnitsNet.SpecificEntropy"/> from adding two <see cref="T:UnitsNet.SpecificEntropy"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.op_Subtraction(UnitsNet.SpecificEntropy,UnitsNet.SpecificEntropy)">
            <summary>Get <see cref="T:UnitsNet.SpecificEntropy"/> from subtracting two <see cref="T:UnitsNet.SpecificEntropy"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.op_Multiply(System.Double,UnitsNet.SpecificEntropy)">
            <summary>Get <see cref="T:UnitsNet.SpecificEntropy"/> from multiplying value and <see cref="T:UnitsNet.SpecificEntropy"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.op_Multiply(UnitsNet.SpecificEntropy,System.Double)">
            <summary>Get <see cref="T:UnitsNet.SpecificEntropy"/> from multiplying value and <see cref="T:UnitsNet.SpecificEntropy"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.op_Division(UnitsNet.SpecificEntropy,System.Double)">
            <summary>Get <see cref="T:UnitsNet.SpecificEntropy"/> from dividing <see cref="T:UnitsNet.SpecificEntropy"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.op_Division(UnitsNet.SpecificEntropy,UnitsNet.SpecificEntropy)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.SpecificEntropy"/> by <see cref="T:UnitsNet.SpecificEntropy"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.op_LessThanOrEqual(UnitsNet.SpecificEntropy,UnitsNet.SpecificEntropy)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.op_GreaterThanOrEqual(UnitsNet.SpecificEntropy,UnitsNet.SpecificEntropy)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.op_LessThan(UnitsNet.SpecificEntropy,UnitsNet.SpecificEntropy)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.op_GreaterThan(UnitsNet.SpecificEntropy,UnitsNet.SpecificEntropy)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.op_Equality(UnitsNet.SpecificEntropy,UnitsNet.SpecificEntropy)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.SpecificEntropy.Equals(UnitsNet.SpecificEntropy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.op_Inequality(UnitsNet.SpecificEntropy,UnitsNet.SpecificEntropy)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.SpecificEntropy.Equals(UnitsNet.SpecificEntropy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificEntropy.CompareTo(UnitsNet.SpecificEntropy)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificEntropy.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.SpecificEntropy.Equals(UnitsNet.SpecificEntropy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.Equals(UnitsNet.SpecificEntropy)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.SpecificEntropy.Equals(UnitsNet.SpecificEntropy,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.Equals(UnitsNet.SpecificEntropy,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another SpecificEntropy within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current SpecificEntropy.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.As(UnitsNet.Units.SpecificEntropyUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificEntropy.ToUnit(UnitsNet.Units.SpecificEntropyUnit)">
            <summary>
                Converts this SpecificEntropy to another SpecificEntropy with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A SpecificEntropy with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.ToUnit(UnitsNet.Units.SpecificEntropyUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this SpecificEntropy to another SpecificEntropy using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A SpecificEntropy with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificEntropy.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificEntropy.UnitsNet#IQuantity{UnitsNet#Units#SpecificEntropyUnit}#ToUnit(UnitsNet.Units.SpecificEntropyUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificEntropy.UnitsNet#IQuantity{UnitsNet#Units#SpecificEntropyUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificEntropy.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.SpecificFuelConsumption">
            <inheritdoc />
            <summary>
                SFC is the fuel efficiency of an engine design with respect to thrust output
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Thrust-specific_fuel_consumption
            </remarks>
        </member>
        <member name="F:UnitsNet.SpecificFuelConsumption._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.SpecificFuelConsumption._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.#ctor(System.Double,UnitsNet.Units.SpecificFuelConsumptionUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.SpecificFuelConsumption.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.SpecificFuelConsumption" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificFuelConsumption.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.SpecificFuelConsumption.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.SpecificFuelConsumption.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificFuelConsumption.BaseUnit">
            <summary>
                The base unit of SpecificFuelConsumption, which is GramPerKiloNewtonSecond. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificFuelConsumption.MaxValue">
            <summary>
            Represents the largest possible value of SpecificFuelConsumption
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificFuelConsumption.MinValue">
            <summary>
            Represents the smallest possible value of SpecificFuelConsumption
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificFuelConsumption.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.SpecificFuelConsumption.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificFuelConsumption.Units">
            <summary>
                All units of measurement for the SpecificFuelConsumption quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificFuelConsumption.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit GramPerKiloNewtonSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificFuelConsumption.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificFuelConsumption.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.SpecificFuelConsumption.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.SpecificFuelConsumption.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.SpecificFuelConsumption.Type">
            <summary>
                The <see cref="P:UnitsNet.SpecificFuelConsumption.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificFuelConsumption.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.SpecificFuelConsumption.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificFuelConsumption.GramsPerKiloNewtonSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificFuelConsumptionUnit.GramPerKiloNewtonSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificFuelConsumption.KilogramsPerKilogramForceHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificFuelConsumptionUnit.KilogramPerKilogramForceHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificFuelConsumption.KilogramsPerKiloNewtonSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificFuelConsumptionUnit.KilogramPerKiloNewtonSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificFuelConsumption.PoundsMassPerPoundForceHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.SpecificFuelConsumptionUnit.PoundMassPerPoundForceHour"/>
            </summary>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.GetAbbreviation(UnitsNet.Units.SpecificFuelConsumptionUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.GetAbbreviation(UnitsNet.Units.SpecificFuelConsumptionUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.FromGramsPerKiloNewtonSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificFuelConsumption"/> from <see cref="F:UnitsNet.Units.SpecificFuelConsumptionUnit.GramPerKiloNewtonSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.FromKilogramsPerKilogramForceHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificFuelConsumption"/> from <see cref="F:UnitsNet.Units.SpecificFuelConsumptionUnit.KilogramPerKilogramForceHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.FromKilogramsPerKiloNewtonSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificFuelConsumption"/> from <see cref="F:UnitsNet.Units.SpecificFuelConsumptionUnit.KilogramPerKiloNewtonSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.FromPoundsMassPerPoundForceHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.SpecificFuelConsumption"/> from <see cref="F:UnitsNet.Units.SpecificFuelConsumptionUnit.PoundMassPerPoundForceHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.From(UnitsNet.QuantityValue,UnitsNet.Units.SpecificFuelConsumptionUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.SpecificFuelConsumptionUnit" /> to <see cref="T:UnitsNet.SpecificFuelConsumption" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>SpecificFuelConsumption unit value.</returns>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.TryParse(System.String,UnitsNet.SpecificFuelConsumption@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.TryParse(System.String,System.IFormatProvider,UnitsNet.SpecificFuelConsumption@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.TryParseUnit(System.String,UnitsNet.Units.SpecificFuelConsumptionUnit@)">
            <inheritdoc cref="M:UnitsNet.SpecificFuelConsumption.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.SpecificFuelConsumptionUnit@)"/>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.SpecificFuelConsumptionUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.op_UnaryNegation(UnitsNet.SpecificFuelConsumption)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.op_Addition(UnitsNet.SpecificFuelConsumption,UnitsNet.SpecificFuelConsumption)">
            <summary>Get <see cref="T:UnitsNet.SpecificFuelConsumption"/> from adding two <see cref="T:UnitsNet.SpecificFuelConsumption"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.op_Subtraction(UnitsNet.SpecificFuelConsumption,UnitsNet.SpecificFuelConsumption)">
            <summary>Get <see cref="T:UnitsNet.SpecificFuelConsumption"/> from subtracting two <see cref="T:UnitsNet.SpecificFuelConsumption"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.op_Multiply(System.Double,UnitsNet.SpecificFuelConsumption)">
            <summary>Get <see cref="T:UnitsNet.SpecificFuelConsumption"/> from multiplying value and <see cref="T:UnitsNet.SpecificFuelConsumption"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.op_Multiply(UnitsNet.SpecificFuelConsumption,System.Double)">
            <summary>Get <see cref="T:UnitsNet.SpecificFuelConsumption"/> from multiplying value and <see cref="T:UnitsNet.SpecificFuelConsumption"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.op_Division(UnitsNet.SpecificFuelConsumption,System.Double)">
            <summary>Get <see cref="T:UnitsNet.SpecificFuelConsumption"/> from dividing <see cref="T:UnitsNet.SpecificFuelConsumption"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.op_Division(UnitsNet.SpecificFuelConsumption,UnitsNet.SpecificFuelConsumption)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.SpecificFuelConsumption"/> by <see cref="T:UnitsNet.SpecificFuelConsumption"/>.</summary>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.op_LessThanOrEqual(UnitsNet.SpecificFuelConsumption,UnitsNet.SpecificFuelConsumption)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.op_GreaterThanOrEqual(UnitsNet.SpecificFuelConsumption,UnitsNet.SpecificFuelConsumption)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.op_LessThan(UnitsNet.SpecificFuelConsumption,UnitsNet.SpecificFuelConsumption)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.op_GreaterThan(UnitsNet.SpecificFuelConsumption,UnitsNet.SpecificFuelConsumption)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.op_Equality(UnitsNet.SpecificFuelConsumption,UnitsNet.SpecificFuelConsumption)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.SpecificFuelConsumption.Equals(UnitsNet.SpecificFuelConsumption,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.op_Inequality(UnitsNet.SpecificFuelConsumption,UnitsNet.SpecificFuelConsumption)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.SpecificFuelConsumption.Equals(UnitsNet.SpecificFuelConsumption,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.CompareTo(UnitsNet.SpecificFuelConsumption)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.SpecificFuelConsumption.Equals(UnitsNet.SpecificFuelConsumption,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.Equals(UnitsNet.SpecificFuelConsumption)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.SpecificFuelConsumption.Equals(UnitsNet.SpecificFuelConsumption,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.Equals(UnitsNet.SpecificFuelConsumption,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another SpecificFuelConsumption within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current SpecificFuelConsumption.</returns>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.As(UnitsNet.Units.SpecificFuelConsumptionUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.ToUnit(UnitsNet.Units.SpecificFuelConsumptionUnit)">
            <summary>
                Converts this SpecificFuelConsumption to another SpecificFuelConsumption with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A SpecificFuelConsumption with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.ToUnit(UnitsNet.Units.SpecificFuelConsumptionUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this SpecificFuelConsumption to another SpecificFuelConsumption using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A SpecificFuelConsumption with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.UnitsNet#IQuantity{UnitsNet#Units#SpecificFuelConsumptionUnit}#ToUnit(UnitsNet.Units.SpecificFuelConsumptionUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.UnitsNet#IQuantity{UnitsNet#Units#SpecificFuelConsumptionUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.SpecificFuelConsumption.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.StandardVolumeFlow">
            <inheritdoc />
            <summary>
                The molar flow rate of a gas corrected to standardized conditions of temperature and pressure thus representing a fixed number of moles of gas regardless of composition and actual flow conditions.
            </summary>
        </member>
        <member name="F:UnitsNet.StandardVolumeFlow._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.StandardVolumeFlow._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.#ctor(System.Double,UnitsNet.Units.StandardVolumeFlowUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.StandardVolumeFlow.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.StandardVolumeFlow" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.StandardVolumeFlow.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.StandardVolumeFlow.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.StandardVolumeFlow.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.StandardVolumeFlow.BaseUnit">
            <summary>
                The base unit of StandardVolumeFlow, which is StandardCubicMeterPerSecond. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.StandardVolumeFlow.MaxValue">
            <summary>
            Represents the largest possible value of StandardVolumeFlow
            </summary>
        </member>
        <member name="P:UnitsNet.StandardVolumeFlow.MinValue">
            <summary>
            Represents the smallest possible value of StandardVolumeFlow
            </summary>
        </member>
        <member name="P:UnitsNet.StandardVolumeFlow.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.StandardVolumeFlow.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.StandardVolumeFlow.Units">
            <summary>
                All units of measurement for the StandardVolumeFlow quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.StandardVolumeFlow.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit StandardCubicMeterPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.StandardVolumeFlow.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.StandardVolumeFlow.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.StandardVolumeFlow.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.StandardVolumeFlow.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.StandardVolumeFlow.Type">
            <summary>
                The <see cref="P:UnitsNet.StandardVolumeFlow.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.StandardVolumeFlow.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.StandardVolumeFlow.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.StandardVolumeFlow.StandardCubicCentimetersPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.StandardVolumeFlowUnit.StandardCubicCentimeterPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.StandardVolumeFlow.StandardCubicFeetPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.StandardVolumeFlowUnit.StandardCubicFootPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.StandardVolumeFlow.StandardCubicFeetPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.StandardVolumeFlowUnit.StandardCubicFootPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.StandardVolumeFlow.StandardCubicFeetPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.StandardVolumeFlowUnit.StandardCubicFootPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.StandardVolumeFlow.StandardCubicMetersPerDay">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.StandardVolumeFlowUnit.StandardCubicMeterPerDay"/>
            </summary>
        </member>
        <member name="P:UnitsNet.StandardVolumeFlow.StandardCubicMetersPerHour">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.StandardVolumeFlowUnit.StandardCubicMeterPerHour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.StandardVolumeFlow.StandardCubicMetersPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.StandardVolumeFlowUnit.StandardCubicMeterPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.StandardVolumeFlow.StandardCubicMetersPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.StandardVolumeFlowUnit.StandardCubicMeterPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.StandardVolumeFlow.StandardLitersPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.StandardVolumeFlowUnit.StandardLiterPerMinute"/>
            </summary>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.GetAbbreviation(UnitsNet.Units.StandardVolumeFlowUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.GetAbbreviation(UnitsNet.Units.StandardVolumeFlowUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.FromStandardCubicCentimetersPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.StandardVolumeFlow"/> from <see cref="F:UnitsNet.Units.StandardVolumeFlowUnit.StandardCubicCentimeterPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.FromStandardCubicFeetPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.StandardVolumeFlow"/> from <see cref="F:UnitsNet.Units.StandardVolumeFlowUnit.StandardCubicFootPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.FromStandardCubicFeetPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.StandardVolumeFlow"/> from <see cref="F:UnitsNet.Units.StandardVolumeFlowUnit.StandardCubicFootPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.FromStandardCubicFeetPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.StandardVolumeFlow"/> from <see cref="F:UnitsNet.Units.StandardVolumeFlowUnit.StandardCubicFootPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.FromStandardCubicMetersPerDay(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.StandardVolumeFlow"/> from <see cref="F:UnitsNet.Units.StandardVolumeFlowUnit.StandardCubicMeterPerDay"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.FromStandardCubicMetersPerHour(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.StandardVolumeFlow"/> from <see cref="F:UnitsNet.Units.StandardVolumeFlowUnit.StandardCubicMeterPerHour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.FromStandardCubicMetersPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.StandardVolumeFlow"/> from <see cref="F:UnitsNet.Units.StandardVolumeFlowUnit.StandardCubicMeterPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.FromStandardCubicMetersPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.StandardVolumeFlow"/> from <see cref="F:UnitsNet.Units.StandardVolumeFlowUnit.StandardCubicMeterPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.FromStandardLitersPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.StandardVolumeFlow"/> from <see cref="F:UnitsNet.Units.StandardVolumeFlowUnit.StandardLiterPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.From(UnitsNet.QuantityValue,UnitsNet.Units.StandardVolumeFlowUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.StandardVolumeFlowUnit" /> to <see cref="T:UnitsNet.StandardVolumeFlow" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>StandardVolumeFlow unit value.</returns>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.TryParse(System.String,UnitsNet.StandardVolumeFlow@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.TryParse(System.String,System.IFormatProvider,UnitsNet.StandardVolumeFlow@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.TryParseUnit(System.String,UnitsNet.Units.StandardVolumeFlowUnit@)">
            <inheritdoc cref="M:UnitsNet.StandardVolumeFlow.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.StandardVolumeFlowUnit@)"/>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.StandardVolumeFlowUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.op_UnaryNegation(UnitsNet.StandardVolumeFlow)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.op_Addition(UnitsNet.StandardVolumeFlow,UnitsNet.StandardVolumeFlow)">
            <summary>Get <see cref="T:UnitsNet.StandardVolumeFlow"/> from adding two <see cref="T:UnitsNet.StandardVolumeFlow"/>.</summary>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.op_Subtraction(UnitsNet.StandardVolumeFlow,UnitsNet.StandardVolumeFlow)">
            <summary>Get <see cref="T:UnitsNet.StandardVolumeFlow"/> from subtracting two <see cref="T:UnitsNet.StandardVolumeFlow"/>.</summary>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.op_Multiply(System.Double,UnitsNet.StandardVolumeFlow)">
            <summary>Get <see cref="T:UnitsNet.StandardVolumeFlow"/> from multiplying value and <see cref="T:UnitsNet.StandardVolumeFlow"/>.</summary>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.op_Multiply(UnitsNet.StandardVolumeFlow,System.Double)">
            <summary>Get <see cref="T:UnitsNet.StandardVolumeFlow"/> from multiplying value and <see cref="T:UnitsNet.StandardVolumeFlow"/>.</summary>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.op_Division(UnitsNet.StandardVolumeFlow,System.Double)">
            <summary>Get <see cref="T:UnitsNet.StandardVolumeFlow"/> from dividing <see cref="T:UnitsNet.StandardVolumeFlow"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.op_Division(UnitsNet.StandardVolumeFlow,UnitsNet.StandardVolumeFlow)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.StandardVolumeFlow"/> by <see cref="T:UnitsNet.StandardVolumeFlow"/>.</summary>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.op_LessThanOrEqual(UnitsNet.StandardVolumeFlow,UnitsNet.StandardVolumeFlow)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.op_GreaterThanOrEqual(UnitsNet.StandardVolumeFlow,UnitsNet.StandardVolumeFlow)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.op_LessThan(UnitsNet.StandardVolumeFlow,UnitsNet.StandardVolumeFlow)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.op_GreaterThan(UnitsNet.StandardVolumeFlow,UnitsNet.StandardVolumeFlow)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.op_Equality(UnitsNet.StandardVolumeFlow,UnitsNet.StandardVolumeFlow)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.StandardVolumeFlow.Equals(UnitsNet.StandardVolumeFlow,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.op_Inequality(UnitsNet.StandardVolumeFlow,UnitsNet.StandardVolumeFlow)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.StandardVolumeFlow.Equals(UnitsNet.StandardVolumeFlow,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.CompareTo(UnitsNet.StandardVolumeFlow)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.StandardVolumeFlow.Equals(UnitsNet.StandardVolumeFlow,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.Equals(UnitsNet.StandardVolumeFlow)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.StandardVolumeFlow.Equals(UnitsNet.StandardVolumeFlow,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.Equals(UnitsNet.StandardVolumeFlow,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another StandardVolumeFlow within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current StandardVolumeFlow.</returns>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.As(UnitsNet.Units.StandardVolumeFlowUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.ToUnit(UnitsNet.Units.StandardVolumeFlowUnit)">
            <summary>
                Converts this StandardVolumeFlow to another StandardVolumeFlow with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A StandardVolumeFlow with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.ToUnit(UnitsNet.Units.StandardVolumeFlowUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this StandardVolumeFlow to another StandardVolumeFlow using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A StandardVolumeFlow with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.UnitsNet#IQuantity{UnitsNet#Units#StandardVolumeFlowUnit}#ToUnit(UnitsNet.Units.StandardVolumeFlowUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.UnitsNet#IQuantity{UnitsNet#Units#StandardVolumeFlowUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.StandardVolumeFlow.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.TemperatureChangeRate">
            <inheritdoc />
            <summary>
                Temperature change rate is the ratio of the temperature change to the time during which the change occurred (value of temperature changes per unit time).
            </summary>
        </member>
        <member name="F:UnitsNet.TemperatureChangeRate._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.TemperatureChangeRate._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.#ctor(System.Double,UnitsNet.Units.TemperatureChangeRateUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.TemperatureChangeRate" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.TemperatureChangeRate.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.BaseUnit">
            <summary>
                The base unit of TemperatureChangeRate, which is DegreeCelsiusPerSecond. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.MaxValue">
            <summary>
            Represents the largest possible value of TemperatureChangeRate
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.MinValue">
            <summary>
            Represents the smallest possible value of TemperatureChangeRate
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.TemperatureChangeRate.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.Units">
            <summary>
                All units of measurement for the TemperatureChangeRate quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit DegreeCelsiusPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.Type">
            <summary>
                The <see cref="P:UnitsNet.TemperatureChangeRate.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.TemperatureChangeRate.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.CentidegreesCelsiusPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureChangeRateUnit.CentidegreeCelsiusPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.DecadegreesCelsiusPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureChangeRateUnit.DecadegreeCelsiusPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.DecidegreesCelsiusPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureChangeRateUnit.DecidegreeCelsiusPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.DegreesCelsiusPerMinute">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureChangeRateUnit.DegreeCelsiusPerMinute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.DegreesCelsiusPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureChangeRateUnit.DegreeCelsiusPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.HectodegreesCelsiusPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureChangeRateUnit.HectodegreeCelsiusPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.KilodegreesCelsiusPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureChangeRateUnit.KilodegreeCelsiusPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.MicrodegreesCelsiusPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureChangeRateUnit.MicrodegreeCelsiusPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.MillidegreesCelsiusPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureChangeRateUnit.MillidegreeCelsiusPerSecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.NanodegreesCelsiusPerSecond">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TemperatureChangeRateUnit.NanodegreeCelsiusPerSecond"/>
            </summary>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.GetAbbreviation(UnitsNet.Units.TemperatureChangeRateUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.GetAbbreviation(UnitsNet.Units.TemperatureChangeRateUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.FromCentidegreesCelsiusPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TemperatureChangeRate"/> from <see cref="F:UnitsNet.Units.TemperatureChangeRateUnit.CentidegreeCelsiusPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.FromDecadegreesCelsiusPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TemperatureChangeRate"/> from <see cref="F:UnitsNet.Units.TemperatureChangeRateUnit.DecadegreeCelsiusPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.FromDecidegreesCelsiusPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TemperatureChangeRate"/> from <see cref="F:UnitsNet.Units.TemperatureChangeRateUnit.DecidegreeCelsiusPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.FromDegreesCelsiusPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TemperatureChangeRate"/> from <see cref="F:UnitsNet.Units.TemperatureChangeRateUnit.DegreeCelsiusPerMinute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.FromDegreesCelsiusPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TemperatureChangeRate"/> from <see cref="F:UnitsNet.Units.TemperatureChangeRateUnit.DegreeCelsiusPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.FromHectodegreesCelsiusPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TemperatureChangeRate"/> from <see cref="F:UnitsNet.Units.TemperatureChangeRateUnit.HectodegreeCelsiusPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.FromKilodegreesCelsiusPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TemperatureChangeRate"/> from <see cref="F:UnitsNet.Units.TemperatureChangeRateUnit.KilodegreeCelsiusPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.FromMicrodegreesCelsiusPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TemperatureChangeRate"/> from <see cref="F:UnitsNet.Units.TemperatureChangeRateUnit.MicrodegreeCelsiusPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.FromMillidegreesCelsiusPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TemperatureChangeRate"/> from <see cref="F:UnitsNet.Units.TemperatureChangeRateUnit.MillidegreeCelsiusPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.FromNanodegreesCelsiusPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TemperatureChangeRate"/> from <see cref="F:UnitsNet.Units.TemperatureChangeRateUnit.NanodegreeCelsiusPerSecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.From(UnitsNet.QuantityValue,UnitsNet.Units.TemperatureChangeRateUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.TemperatureChangeRateUnit" /> to <see cref="T:UnitsNet.TemperatureChangeRate" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>TemperatureChangeRate unit value.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.TryParse(System.String,UnitsNet.TemperatureChangeRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.TryParse(System.String,System.IFormatProvider,UnitsNet.TemperatureChangeRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.TryParseUnit(System.String,UnitsNet.Units.TemperatureChangeRateUnit@)">
            <inheritdoc cref="M:UnitsNet.TemperatureChangeRate.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.TemperatureChangeRateUnit@)"/>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.TemperatureChangeRateUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.op_UnaryNegation(UnitsNet.TemperatureChangeRate)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.op_Addition(UnitsNet.TemperatureChangeRate,UnitsNet.TemperatureChangeRate)">
            <summary>Get <see cref="T:UnitsNet.TemperatureChangeRate"/> from adding two <see cref="T:UnitsNet.TemperatureChangeRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.op_Subtraction(UnitsNet.TemperatureChangeRate,UnitsNet.TemperatureChangeRate)">
            <summary>Get <see cref="T:UnitsNet.TemperatureChangeRate"/> from subtracting two <see cref="T:UnitsNet.TemperatureChangeRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.op_Multiply(System.Double,UnitsNet.TemperatureChangeRate)">
            <summary>Get <see cref="T:UnitsNet.TemperatureChangeRate"/> from multiplying value and <see cref="T:UnitsNet.TemperatureChangeRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.op_Multiply(UnitsNet.TemperatureChangeRate,System.Double)">
            <summary>Get <see cref="T:UnitsNet.TemperatureChangeRate"/> from multiplying value and <see cref="T:UnitsNet.TemperatureChangeRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.op_Division(UnitsNet.TemperatureChangeRate,System.Double)">
            <summary>Get <see cref="T:UnitsNet.TemperatureChangeRate"/> from dividing <see cref="T:UnitsNet.TemperatureChangeRate"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.op_Division(UnitsNet.TemperatureChangeRate,UnitsNet.TemperatureChangeRate)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.TemperatureChangeRate"/> by <see cref="T:UnitsNet.TemperatureChangeRate"/>.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.op_LessThanOrEqual(UnitsNet.TemperatureChangeRate,UnitsNet.TemperatureChangeRate)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.op_GreaterThanOrEqual(UnitsNet.TemperatureChangeRate,UnitsNet.TemperatureChangeRate)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.op_LessThan(UnitsNet.TemperatureChangeRate,UnitsNet.TemperatureChangeRate)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.op_GreaterThan(UnitsNet.TemperatureChangeRate,UnitsNet.TemperatureChangeRate)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.op_Equality(UnitsNet.TemperatureChangeRate,UnitsNet.TemperatureChangeRate)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.TemperatureChangeRate.Equals(UnitsNet.TemperatureChangeRate,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.op_Inequality(UnitsNet.TemperatureChangeRate,UnitsNet.TemperatureChangeRate)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.TemperatureChangeRate.Equals(UnitsNet.TemperatureChangeRate,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.CompareTo(UnitsNet.TemperatureChangeRate)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.TemperatureChangeRate.Equals(UnitsNet.TemperatureChangeRate,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.Equals(UnitsNet.TemperatureChangeRate)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.TemperatureChangeRate.Equals(UnitsNet.TemperatureChangeRate,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.Equals(UnitsNet.TemperatureChangeRate,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another TemperatureChangeRate within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current TemperatureChangeRate.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.As(UnitsNet.Units.TemperatureChangeRateUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.ToUnit(UnitsNet.Units.TemperatureChangeRateUnit)">
            <summary>
                Converts this TemperatureChangeRate to another TemperatureChangeRate with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A TemperatureChangeRate with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.ToUnit(UnitsNet.Units.TemperatureChangeRateUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this TemperatureChangeRate to another TemperatureChangeRate using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A TemperatureChangeRate with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.UnitsNet#IQuantity{UnitsNet#Units#TemperatureChangeRateUnit}#ToUnit(UnitsNet.Units.TemperatureChangeRateUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.UnitsNet#IQuantity{UnitsNet#Units#TemperatureChangeRateUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.ThermalConductivity">
            <inheritdoc />
            <summary>
                Thermal conductivity is the property of a material to conduct heat.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Thermal_Conductivity
            </remarks>
        </member>
        <member name="F:UnitsNet.ThermalConductivity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ThermalConductivity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.#ctor(System.Double,UnitsNet.Units.ThermalConductivityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.ThermalConductivity.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.ThermalConductivity" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalConductivity.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ThermalConductivity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ThermalConductivity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalConductivity.BaseUnit">
            <summary>
                The base unit of ThermalConductivity, which is WattPerMeterKelvin. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalConductivity.MaxValue">
            <summary>
            Represents the largest possible value of ThermalConductivity
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalConductivity.MinValue">
            <summary>
            Represents the smallest possible value of ThermalConductivity
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalConductivity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ThermalConductivity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalConductivity.Units">
            <summary>
                All units of measurement for the ThermalConductivity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalConductivity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit WattPerMeterKelvin.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalConductivity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalConductivity.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ThermalConductivity.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ThermalConductivity.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ThermalConductivity.Type">
            <summary>
                The <see cref="P:UnitsNet.ThermalConductivity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalConductivity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ThermalConductivity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalConductivity.BtusPerHourFootFahrenheit">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ThermalConductivityUnit.BtuPerHourFootFahrenheit"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalConductivity.WattsPerMeterKelvin">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ThermalConductivityUnit.WattPerMeterKelvin"/>
            </summary>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.GetAbbreviation(UnitsNet.Units.ThermalConductivityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.GetAbbreviation(UnitsNet.Units.ThermalConductivityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.FromBtusPerHourFootFahrenheit(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ThermalConductivity"/> from <see cref="F:UnitsNet.Units.ThermalConductivityUnit.BtuPerHourFootFahrenheit"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.FromWattsPerMeterKelvin(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ThermalConductivity"/> from <see cref="F:UnitsNet.Units.ThermalConductivityUnit.WattPerMeterKelvin"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.From(UnitsNet.QuantityValue,UnitsNet.Units.ThermalConductivityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ThermalConductivityUnit" /> to <see cref="T:UnitsNet.ThermalConductivity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ThermalConductivity unit value.</returns>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.TryParse(System.String,UnitsNet.ThermalConductivity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.TryParse(System.String,System.IFormatProvider,UnitsNet.ThermalConductivity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.TryParseUnit(System.String,UnitsNet.Units.ThermalConductivityUnit@)">
            <inheritdoc cref="M:UnitsNet.ThermalConductivity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ThermalConductivityUnit@)"/>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ThermalConductivityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.op_UnaryNegation(UnitsNet.ThermalConductivity)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.op_Addition(UnitsNet.ThermalConductivity,UnitsNet.ThermalConductivity)">
            <summary>Get <see cref="T:UnitsNet.ThermalConductivity"/> from adding two <see cref="T:UnitsNet.ThermalConductivity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.op_Subtraction(UnitsNet.ThermalConductivity,UnitsNet.ThermalConductivity)">
            <summary>Get <see cref="T:UnitsNet.ThermalConductivity"/> from subtracting two <see cref="T:UnitsNet.ThermalConductivity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.op_Multiply(System.Double,UnitsNet.ThermalConductivity)">
            <summary>Get <see cref="T:UnitsNet.ThermalConductivity"/> from multiplying value and <see cref="T:UnitsNet.ThermalConductivity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.op_Multiply(UnitsNet.ThermalConductivity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ThermalConductivity"/> from multiplying value and <see cref="T:UnitsNet.ThermalConductivity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.op_Division(UnitsNet.ThermalConductivity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ThermalConductivity"/> from dividing <see cref="T:UnitsNet.ThermalConductivity"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.op_Division(UnitsNet.ThermalConductivity,UnitsNet.ThermalConductivity)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.ThermalConductivity"/> by <see cref="T:UnitsNet.ThermalConductivity"/>.</summary>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.op_LessThanOrEqual(UnitsNet.ThermalConductivity,UnitsNet.ThermalConductivity)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.op_GreaterThanOrEqual(UnitsNet.ThermalConductivity,UnitsNet.ThermalConductivity)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.op_LessThan(UnitsNet.ThermalConductivity,UnitsNet.ThermalConductivity)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.op_GreaterThan(UnitsNet.ThermalConductivity,UnitsNet.ThermalConductivity)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.op_Equality(UnitsNet.ThermalConductivity,UnitsNet.ThermalConductivity)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ThermalConductivity.Equals(UnitsNet.ThermalConductivity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.op_Inequality(UnitsNet.ThermalConductivity,UnitsNet.ThermalConductivity)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ThermalConductivity.Equals(UnitsNet.ThermalConductivity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ThermalConductivity.CompareTo(UnitsNet.ThermalConductivity)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ThermalConductivity.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ThermalConductivity.Equals(UnitsNet.ThermalConductivity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.Equals(UnitsNet.ThermalConductivity)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ThermalConductivity.Equals(UnitsNet.ThermalConductivity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.Equals(UnitsNet.ThermalConductivity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ThermalConductivity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ThermalConductivity.</returns>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.As(UnitsNet.Units.ThermalConductivityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ThermalConductivity.ToUnit(UnitsNet.Units.ThermalConductivityUnit)">
            <summary>
                Converts this ThermalConductivity to another ThermalConductivity with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A ThermalConductivity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.ToUnit(UnitsNet.Units.ThermalConductivityUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this ThermalConductivity to another ThermalConductivity using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A ThermalConductivity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ThermalConductivity.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ThermalConductivity.UnitsNet#IQuantity{UnitsNet#Units#ThermalConductivityUnit}#ToUnit(UnitsNet.Units.ThermalConductivityUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ThermalConductivity.UnitsNet#IQuantity{UnitsNet#Units#ThermalConductivityUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ThermalConductivity.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.ThermalResistance">
            <inheritdoc />
            <summary>
                Heat Transfer Coefficient or Thermal conductivity - indicates a materials ability to conduct heat.
            </summary>
        </member>
        <member name="F:UnitsNet.ThermalResistance._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ThermalResistance._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ThermalResistance.#ctor(System.Double,UnitsNet.Units.ThermalResistanceUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ThermalResistance.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.ThermalResistance.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.ThermalResistance" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ThermalResistance.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ThermalResistance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.BaseUnit">
            <summary>
                The base unit of ThermalResistance, which is SquareMeterKelvinPerKilowatt. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.MaxValue">
            <summary>
            Represents the largest possible value of ThermalResistance
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.MinValue">
            <summary>
            Represents the smallest possible value of ThermalResistance
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ThermalResistance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.Units">
            <summary>
                All units of measurement for the ThermalResistance quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit SquareMeterKelvinPerKilowatt.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ThermalResistance.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.ThermalResistance.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.ThermalResistance.Type">
            <summary>
                The <see cref="P:UnitsNet.ThermalResistance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ThermalResistance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.HourSquareFeetDegreesFahrenheitPerBtu">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ThermalResistanceUnit.HourSquareFeetDegreeFahrenheitPerBtu"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.SquareCentimeterHourDegreesCelsiusPerKilocalorie">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ThermalResistanceUnit.SquareCentimeterHourDegreeCelsiusPerKilocalorie"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.SquareCentimeterKelvinsPerWatt">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ThermalResistanceUnit.SquareCentimeterKelvinPerWatt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.SquareMeterDegreesCelsiusPerWatt">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ThermalResistanceUnit.SquareMeterDegreeCelsiusPerWatt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.SquareMeterKelvinsPerKilowatt">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ThermalResistanceUnit.SquareMeterKelvinPerKilowatt"/>
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.SquareMeterKelvinsPerWatt">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.ThermalResistanceUnit.SquareMeterKelvinPerWatt"/>
            </summary>
        </member>
        <member name="M:UnitsNet.ThermalResistance.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.ThermalResistance.GetAbbreviation(UnitsNet.Units.ThermalResistanceUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ThermalResistance.GetAbbreviation(UnitsNet.Units.ThermalResistanceUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ThermalResistance.FromHourSquareFeetDegreesFahrenheitPerBtu(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ThermalResistance"/> from <see cref="F:UnitsNet.Units.ThermalResistanceUnit.HourSquareFeetDegreeFahrenheitPerBtu"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ThermalResistance.FromSquareCentimeterHourDegreesCelsiusPerKilocalorie(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ThermalResistance"/> from <see cref="F:UnitsNet.Units.ThermalResistanceUnit.SquareCentimeterHourDegreeCelsiusPerKilocalorie"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ThermalResistance.FromSquareCentimeterKelvinsPerWatt(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ThermalResistance"/> from <see cref="F:UnitsNet.Units.ThermalResistanceUnit.SquareCentimeterKelvinPerWatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ThermalResistance.FromSquareMeterDegreesCelsiusPerWatt(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ThermalResistance"/> from <see cref="F:UnitsNet.Units.ThermalResistanceUnit.SquareMeterDegreeCelsiusPerWatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ThermalResistance.FromSquareMeterKelvinsPerKilowatt(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ThermalResistance"/> from <see cref="F:UnitsNet.Units.ThermalResistanceUnit.SquareMeterKelvinPerKilowatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ThermalResistance.FromSquareMeterKelvinsPerWatt(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.ThermalResistance"/> from <see cref="F:UnitsNet.Units.ThermalResistanceUnit.SquareMeterKelvinPerWatt"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ThermalResistance.From(UnitsNet.QuantityValue,UnitsNet.Units.ThermalResistanceUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ThermalResistanceUnit" /> to <see cref="T:UnitsNet.ThermalResistance" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ThermalResistance unit value.</returns>
        </member>
        <member name="M:UnitsNet.ThermalResistance.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ThermalResistance.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ThermalResistance.TryParse(System.String,UnitsNet.ThermalResistance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ThermalResistance.TryParse(System.String,System.IFormatProvider,UnitsNet.ThermalResistance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ThermalResistance.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ThermalResistance.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ThermalResistance.TryParseUnit(System.String,UnitsNet.Units.ThermalResistanceUnit@)">
            <inheritdoc cref="M:UnitsNet.ThermalResistance.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ThermalResistanceUnit@)"/>
        </member>
        <member name="M:UnitsNet.ThermalResistance.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ThermalResistanceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ThermalResistance.op_UnaryNegation(UnitsNet.ThermalResistance)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.ThermalResistance.op_Addition(UnitsNet.ThermalResistance,UnitsNet.ThermalResistance)">
            <summary>Get <see cref="T:UnitsNet.ThermalResistance"/> from adding two <see cref="T:UnitsNet.ThermalResistance"/>.</summary>
        </member>
        <member name="M:UnitsNet.ThermalResistance.op_Subtraction(UnitsNet.ThermalResistance,UnitsNet.ThermalResistance)">
            <summary>Get <see cref="T:UnitsNet.ThermalResistance"/> from subtracting two <see cref="T:UnitsNet.ThermalResistance"/>.</summary>
        </member>
        <member name="M:UnitsNet.ThermalResistance.op_Multiply(System.Double,UnitsNet.ThermalResistance)">
            <summary>Get <see cref="T:UnitsNet.ThermalResistance"/> from multiplying value and <see cref="T:UnitsNet.ThermalResistance"/>.</summary>
        </member>
        <member name="M:UnitsNet.ThermalResistance.op_Multiply(UnitsNet.ThermalResistance,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ThermalResistance"/> from multiplying value and <see cref="T:UnitsNet.ThermalResistance"/>.</summary>
        </member>
        <member name="M:UnitsNet.ThermalResistance.op_Division(UnitsNet.ThermalResistance,System.Double)">
            <summary>Get <see cref="T:UnitsNet.ThermalResistance"/> from dividing <see cref="T:UnitsNet.ThermalResistance"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.ThermalResistance.op_Division(UnitsNet.ThermalResistance,UnitsNet.ThermalResistance)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.ThermalResistance"/> by <see cref="T:UnitsNet.ThermalResistance"/>.</summary>
        </member>
        <member name="M:UnitsNet.ThermalResistance.op_LessThanOrEqual(UnitsNet.ThermalResistance,UnitsNet.ThermalResistance)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ThermalResistance.op_GreaterThanOrEqual(UnitsNet.ThermalResistance,UnitsNet.ThermalResistance)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.ThermalResistance.op_LessThan(UnitsNet.ThermalResistance,UnitsNet.ThermalResistance)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.ThermalResistance.op_GreaterThan(UnitsNet.ThermalResistance,UnitsNet.ThermalResistance)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.ThermalResistance.op_Equality(UnitsNet.ThermalResistance,UnitsNet.ThermalResistance)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ThermalResistance.Equals(UnitsNet.ThermalResistance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ThermalResistance.op_Inequality(UnitsNet.ThermalResistance,UnitsNet.ThermalResistance)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.ThermalResistance.Equals(UnitsNet.ThermalResistance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ThermalResistance.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ThermalResistance.CompareTo(UnitsNet.ThermalResistance)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ThermalResistance.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ThermalResistance.Equals(UnitsNet.ThermalResistance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ThermalResistance.Equals(UnitsNet.ThermalResistance)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.ThermalResistance.Equals(UnitsNet.ThermalResistance,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.ThermalResistance.Equals(UnitsNet.ThermalResistance,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ThermalResistance within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ThermalResistance.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ThermalResistance.</returns>
        </member>
        <member name="M:UnitsNet.ThermalResistance.As(UnitsNet.Units.ThermalResistanceUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ThermalResistance.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ThermalResistance.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ThermalResistance.ToUnit(UnitsNet.Units.ThermalResistanceUnit)">
            <summary>
                Converts this ThermalResistance to another ThermalResistance with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A ThermalResistance with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ThermalResistance.ToUnit(UnitsNet.Units.ThermalResistanceUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this ThermalResistance to another ThermalResistance using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A ThermalResistance with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ThermalResistance.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ThermalResistance.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.ThermalResistance.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ThermalResistance.UnitsNet#IQuantity{UnitsNet#Units#ThermalResistanceUnit}#ToUnit(UnitsNet.Units.ThermalResistanceUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ThermalResistance.UnitsNet#IQuantity{UnitsNet#Units#ThermalResistanceUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ThermalResistance.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ThermalResistance.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ThermalResistance.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ThermalResistance.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.ThermalResistance.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.ThermalResistance.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.TorquePerLength">
            <inheritdoc />
            <summary>
                The magnitude of torque per unit length.
            </summary>
        </member>
        <member name="F:UnitsNet.TorquePerLength._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.TorquePerLength._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.TorquePerLength.#ctor(System.Double,UnitsNet.Units.TorquePerLengthUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TorquePerLength.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.TorquePerLength.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.TorquePerLength" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.TorquePerLength.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.TorquePerLength.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.BaseUnit">
            <summary>
                The base unit of TorquePerLength, which is NewtonMeterPerMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.MaxValue">
            <summary>
            Represents the largest possible value of TorquePerLength
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.MinValue">
            <summary>
            Represents the smallest possible value of TorquePerLength
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.TorquePerLength.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.Units">
            <summary>
                All units of measurement for the TorquePerLength quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit NewtonMeterPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.TorquePerLength.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.TorquePerLength.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.TorquePerLength.Type">
            <summary>
                The <see cref="P:UnitsNet.TorquePerLength.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.TorquePerLength.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.KilogramForceCentimetersPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorquePerLengthUnit.KilogramForceCentimeterPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.KilogramForceMetersPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorquePerLengthUnit.KilogramForceMeterPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.KilogramForceMillimetersPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorquePerLengthUnit.KilogramForceMillimeterPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.KilonewtonCentimetersPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorquePerLengthUnit.KilonewtonCentimeterPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.KilonewtonMetersPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorquePerLengthUnit.KilonewtonMeterPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.KilonewtonMillimetersPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorquePerLengthUnit.KilonewtonMillimeterPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.KilopoundForceFeetPerFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorquePerLengthUnit.KilopoundForceFootPerFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.KilopoundForceInchesPerFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorquePerLengthUnit.KilopoundForceInchPerFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.MeganewtonCentimetersPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorquePerLengthUnit.MeganewtonCentimeterPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.MeganewtonMetersPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorquePerLengthUnit.MeganewtonMeterPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.MeganewtonMillimetersPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorquePerLengthUnit.MeganewtonMillimeterPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.MegapoundForceFeetPerFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorquePerLengthUnit.MegapoundForceFootPerFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.MegapoundForceInchesPerFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorquePerLengthUnit.MegapoundForceInchPerFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.NewtonCentimetersPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorquePerLengthUnit.NewtonCentimeterPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.NewtonMetersPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorquePerLengthUnit.NewtonMeterPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.NewtonMillimetersPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorquePerLengthUnit.NewtonMillimeterPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.PoundForceFeetPerFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorquePerLengthUnit.PoundForceFootPerFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.PoundForceInchesPerFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorquePerLengthUnit.PoundForceInchPerFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.TonneForceCentimetersPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorquePerLengthUnit.TonneForceCentimeterPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.TonneForceMetersPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorquePerLengthUnit.TonneForceMeterPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.TorquePerLength.TonneForceMillimetersPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TorquePerLengthUnit.TonneForceMillimeterPerMeter"/>
            </summary>
        </member>
        <member name="M:UnitsNet.TorquePerLength.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.TorquePerLength.GetAbbreviation(UnitsNet.Units.TorquePerLengthUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.TorquePerLength.GetAbbreviation(UnitsNet.Units.TorquePerLengthUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.TorquePerLength.FromKilogramForceCentimetersPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TorquePerLength"/> from <see cref="F:UnitsNet.Units.TorquePerLengthUnit.KilogramForceCentimeterPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TorquePerLength.FromKilogramForceMetersPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TorquePerLength"/> from <see cref="F:UnitsNet.Units.TorquePerLengthUnit.KilogramForceMeterPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TorquePerLength.FromKilogramForceMillimetersPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TorquePerLength"/> from <see cref="F:UnitsNet.Units.TorquePerLengthUnit.KilogramForceMillimeterPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TorquePerLength.FromKilonewtonCentimetersPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TorquePerLength"/> from <see cref="F:UnitsNet.Units.TorquePerLengthUnit.KilonewtonCentimeterPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TorquePerLength.FromKilonewtonMetersPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TorquePerLength"/> from <see cref="F:UnitsNet.Units.TorquePerLengthUnit.KilonewtonMeterPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TorquePerLength.FromKilonewtonMillimetersPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TorquePerLength"/> from <see cref="F:UnitsNet.Units.TorquePerLengthUnit.KilonewtonMillimeterPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TorquePerLength.FromKilopoundForceFeetPerFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TorquePerLength"/> from <see cref="F:UnitsNet.Units.TorquePerLengthUnit.KilopoundForceFootPerFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TorquePerLength.FromKilopoundForceInchesPerFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TorquePerLength"/> from <see cref="F:UnitsNet.Units.TorquePerLengthUnit.KilopoundForceInchPerFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TorquePerLength.FromMeganewtonCentimetersPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TorquePerLength"/> from <see cref="F:UnitsNet.Units.TorquePerLengthUnit.MeganewtonCentimeterPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TorquePerLength.FromMeganewtonMetersPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TorquePerLength"/> from <see cref="F:UnitsNet.Units.TorquePerLengthUnit.MeganewtonMeterPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TorquePerLength.FromMeganewtonMillimetersPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TorquePerLength"/> from <see cref="F:UnitsNet.Units.TorquePerLengthUnit.MeganewtonMillimeterPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TorquePerLength.FromMegapoundForceFeetPerFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TorquePerLength"/> from <see cref="F:UnitsNet.Units.TorquePerLengthUnit.MegapoundForceFootPerFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TorquePerLength.FromMegapoundForceInchesPerFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TorquePerLength"/> from <see cref="F:UnitsNet.Units.TorquePerLengthUnit.MegapoundForceInchPerFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TorquePerLength.FromNewtonCentimetersPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TorquePerLength"/> from <see cref="F:UnitsNet.Units.TorquePerLengthUnit.NewtonCentimeterPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TorquePerLength.FromNewtonMetersPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TorquePerLength"/> from <see cref="F:UnitsNet.Units.TorquePerLengthUnit.NewtonMeterPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TorquePerLength.FromNewtonMillimetersPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TorquePerLength"/> from <see cref="F:UnitsNet.Units.TorquePerLengthUnit.NewtonMillimeterPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TorquePerLength.FromPoundForceFeetPerFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TorquePerLength"/> from <see cref="F:UnitsNet.Units.TorquePerLengthUnit.PoundForceFootPerFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TorquePerLength.FromPoundForceInchesPerFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TorquePerLength"/> from <see cref="F:UnitsNet.Units.TorquePerLengthUnit.PoundForceInchPerFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TorquePerLength.FromTonneForceCentimetersPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TorquePerLength"/> from <see cref="F:UnitsNet.Units.TorquePerLengthUnit.TonneForceCentimeterPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TorquePerLength.FromTonneForceMetersPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TorquePerLength"/> from <see cref="F:UnitsNet.Units.TorquePerLengthUnit.TonneForceMeterPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TorquePerLength.FromTonneForceMillimetersPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.TorquePerLength"/> from <see cref="F:UnitsNet.Units.TorquePerLengthUnit.TonneForceMillimeterPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TorquePerLength.From(UnitsNet.QuantityValue,UnitsNet.Units.TorquePerLengthUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.TorquePerLengthUnit" /> to <see cref="T:UnitsNet.TorquePerLength" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>TorquePerLength unit value.</returns>
        </member>
        <member name="M:UnitsNet.TorquePerLength.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.TorquePerLength.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.TorquePerLength.TryParse(System.String,UnitsNet.TorquePerLength@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.TorquePerLength.TryParse(System.String,System.IFormatProvider,UnitsNet.TorquePerLength@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.TorquePerLength.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.TorquePerLength.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.TorquePerLength.TryParseUnit(System.String,UnitsNet.Units.TorquePerLengthUnit@)">
            <inheritdoc cref="M:UnitsNet.TorquePerLength.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.TorquePerLengthUnit@)"/>
        </member>
        <member name="M:UnitsNet.TorquePerLength.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.TorquePerLengthUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.TorquePerLength.op_UnaryNegation(UnitsNet.TorquePerLength)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.TorquePerLength.op_Addition(UnitsNet.TorquePerLength,UnitsNet.TorquePerLength)">
            <summary>Get <see cref="T:UnitsNet.TorquePerLength"/> from adding two <see cref="T:UnitsNet.TorquePerLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.TorquePerLength.op_Subtraction(UnitsNet.TorquePerLength,UnitsNet.TorquePerLength)">
            <summary>Get <see cref="T:UnitsNet.TorquePerLength"/> from subtracting two <see cref="T:UnitsNet.TorquePerLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.TorquePerLength.op_Multiply(System.Double,UnitsNet.TorquePerLength)">
            <summary>Get <see cref="T:UnitsNet.TorquePerLength"/> from multiplying value and <see cref="T:UnitsNet.TorquePerLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.TorquePerLength.op_Multiply(UnitsNet.TorquePerLength,System.Double)">
            <summary>Get <see cref="T:UnitsNet.TorquePerLength"/> from multiplying value and <see cref="T:UnitsNet.TorquePerLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.TorquePerLength.op_Division(UnitsNet.TorquePerLength,System.Double)">
            <summary>Get <see cref="T:UnitsNet.TorquePerLength"/> from dividing <see cref="T:UnitsNet.TorquePerLength"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.TorquePerLength.op_Division(UnitsNet.TorquePerLength,UnitsNet.TorquePerLength)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.TorquePerLength"/> by <see cref="T:UnitsNet.TorquePerLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.TorquePerLength.op_LessThanOrEqual(UnitsNet.TorquePerLength,UnitsNet.TorquePerLength)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.TorquePerLength.op_GreaterThanOrEqual(UnitsNet.TorquePerLength,UnitsNet.TorquePerLength)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.TorquePerLength.op_LessThan(UnitsNet.TorquePerLength,UnitsNet.TorquePerLength)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.TorquePerLength.op_GreaterThan(UnitsNet.TorquePerLength,UnitsNet.TorquePerLength)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.TorquePerLength.op_Equality(UnitsNet.TorquePerLength,UnitsNet.TorquePerLength)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.TorquePerLength.Equals(UnitsNet.TorquePerLength,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.TorquePerLength.op_Inequality(UnitsNet.TorquePerLength,UnitsNet.TorquePerLength)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.TorquePerLength.Equals(UnitsNet.TorquePerLength,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.TorquePerLength.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.TorquePerLength.CompareTo(UnitsNet.TorquePerLength)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.TorquePerLength.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.TorquePerLength.Equals(UnitsNet.TorquePerLength,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.TorquePerLength.Equals(UnitsNet.TorquePerLength)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.TorquePerLength.Equals(UnitsNet.TorquePerLength,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.TorquePerLength.Equals(UnitsNet.TorquePerLength,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another TorquePerLength within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.TorquePerLength.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current TorquePerLength.</returns>
        </member>
        <member name="M:UnitsNet.TorquePerLength.As(UnitsNet.Units.TorquePerLengthUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.TorquePerLength.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.TorquePerLength.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.TorquePerLength.ToUnit(UnitsNet.Units.TorquePerLengthUnit)">
            <summary>
                Converts this TorquePerLength to another TorquePerLength with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A TorquePerLength with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.TorquePerLength.ToUnit(UnitsNet.Units.TorquePerLengthUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this TorquePerLength to another TorquePerLength using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A TorquePerLength with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.TorquePerLength.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.TorquePerLength.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.TorquePerLength.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.TorquePerLength.UnitsNet#IQuantity{UnitsNet#Units#TorquePerLengthUnit}#ToUnit(UnitsNet.Units.TorquePerLengthUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.TorquePerLength.UnitsNet#IQuantity{UnitsNet#Units#TorquePerLengthUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.TorquePerLength.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.TorquePerLength.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.TorquePerLength.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.TorquePerLength.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.TorquePerLength.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.TorquePerLength.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.Turbidity">
            <inheritdoc />
            <summary>
                Turbidity is the cloudiness or haziness of a fluid caused by large numbers of individual particles that are generally invisible to the naked eye, similar to smoke in air. The measurement of turbidity is a key test of water quality.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Turbidity
            </remarks>
        </member>
        <member name="F:UnitsNet.Turbidity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Turbidity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Turbidity.#ctor(System.Double,UnitsNet.Units.TurbidityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Turbidity.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.Turbidity.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.Turbidity" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.Turbidity.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Turbidity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Turbidity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Turbidity.BaseUnit">
            <summary>
                The base unit of Turbidity, which is NTU. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Turbidity.MaxValue">
            <summary>
            Represents the largest possible value of Turbidity
            </summary>
        </member>
        <member name="P:UnitsNet.Turbidity.MinValue">
            <summary>
            Represents the smallest possible value of Turbidity
            </summary>
        </member>
        <member name="P:UnitsNet.Turbidity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Turbidity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Turbidity.Units">
            <summary>
                All units of measurement for the Turbidity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Turbidity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit NTU.
            </summary>
        </member>
        <member name="P:UnitsNet.Turbidity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Turbidity.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Turbidity.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.Turbidity.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.Turbidity.Type">
            <summary>
                The <see cref="P:UnitsNet.Turbidity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Turbidity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Turbidity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Turbidity.NTU">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.TurbidityUnit.NTU"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Turbidity.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.Turbidity.GetAbbreviation(UnitsNet.Units.TurbidityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Turbidity.GetAbbreviation(UnitsNet.Units.TurbidityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Turbidity.FromNTU(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.Turbidity"/> from <see cref="F:UnitsNet.Units.TurbidityUnit.NTU"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Turbidity.From(UnitsNet.QuantityValue,UnitsNet.Units.TurbidityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.TurbidityUnit" /> to <see cref="T:UnitsNet.Turbidity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Turbidity unit value.</returns>
        </member>
        <member name="M:UnitsNet.Turbidity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Turbidity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Turbidity.TryParse(System.String,UnitsNet.Turbidity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Turbidity.TryParse(System.String,System.IFormatProvider,UnitsNet.Turbidity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Turbidity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Turbidity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Turbidity.TryParseUnit(System.String,UnitsNet.Units.TurbidityUnit@)">
            <inheritdoc cref="M:UnitsNet.Turbidity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.TurbidityUnit@)"/>
        </member>
        <member name="M:UnitsNet.Turbidity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.TurbidityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Turbidity.op_UnaryNegation(UnitsNet.Turbidity)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.Turbidity.op_Addition(UnitsNet.Turbidity,UnitsNet.Turbidity)">
            <summary>Get <see cref="T:UnitsNet.Turbidity"/> from adding two <see cref="T:UnitsNet.Turbidity"/>.</summary>
        </member>
        <member name="M:UnitsNet.Turbidity.op_Subtraction(UnitsNet.Turbidity,UnitsNet.Turbidity)">
            <summary>Get <see cref="T:UnitsNet.Turbidity"/> from subtracting two <see cref="T:UnitsNet.Turbidity"/>.</summary>
        </member>
        <member name="M:UnitsNet.Turbidity.op_Multiply(System.Double,UnitsNet.Turbidity)">
            <summary>Get <see cref="T:UnitsNet.Turbidity"/> from multiplying value and <see cref="T:UnitsNet.Turbidity"/>.</summary>
        </member>
        <member name="M:UnitsNet.Turbidity.op_Multiply(UnitsNet.Turbidity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Turbidity"/> from multiplying value and <see cref="T:UnitsNet.Turbidity"/>.</summary>
        </member>
        <member name="M:UnitsNet.Turbidity.op_Division(UnitsNet.Turbidity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.Turbidity"/> from dividing <see cref="T:UnitsNet.Turbidity"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.Turbidity.op_Division(UnitsNet.Turbidity,UnitsNet.Turbidity)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.Turbidity"/> by <see cref="T:UnitsNet.Turbidity"/>.</summary>
        </member>
        <member name="M:UnitsNet.Turbidity.op_LessThanOrEqual(UnitsNet.Turbidity,UnitsNet.Turbidity)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Turbidity.op_GreaterThanOrEqual(UnitsNet.Turbidity,UnitsNet.Turbidity)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.Turbidity.op_LessThan(UnitsNet.Turbidity,UnitsNet.Turbidity)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.Turbidity.op_GreaterThan(UnitsNet.Turbidity,UnitsNet.Turbidity)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.Turbidity.op_Equality(UnitsNet.Turbidity,UnitsNet.Turbidity)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Turbidity.Equals(UnitsNet.Turbidity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Turbidity.op_Inequality(UnitsNet.Turbidity,UnitsNet.Turbidity)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.Turbidity.Equals(UnitsNet.Turbidity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Turbidity.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Turbidity.CompareTo(UnitsNet.Turbidity)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Turbidity.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Turbidity.Equals(UnitsNet.Turbidity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Turbidity.Equals(UnitsNet.Turbidity)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.Turbidity.Equals(UnitsNet.Turbidity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.Turbidity.Equals(UnitsNet.Turbidity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Turbidity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Turbidity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Turbidity.</returns>
        </member>
        <member name="M:UnitsNet.Turbidity.As(UnitsNet.Units.TurbidityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Turbidity.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Turbidity.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Turbidity.ToUnit(UnitsNet.Units.TurbidityUnit)">
            <summary>
                Converts this Turbidity to another Turbidity with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A Turbidity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Turbidity.ToUnit(UnitsNet.Units.TurbidityUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this Turbidity to another Turbidity using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A Turbidity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Turbidity.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Turbidity.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.Turbidity.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Turbidity.UnitsNet#IQuantity{UnitsNet#Units#TurbidityUnit}#ToUnit(UnitsNet.Units.TurbidityUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Turbidity.UnitsNet#IQuantity{UnitsNet#Units#TurbidityUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Turbidity.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Turbidity.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Turbidity.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Turbidity.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.Turbidity.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.Turbidity.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.VitaminA">
            <inheritdoc />
            <summary>
                Vitamin A: 1 IU is the biological equivalent of 0.3 µg retinol, or of 0.6 µg beta-carotene.
            </summary>
        </member>
        <member name="F:UnitsNet.VitaminA._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.VitaminA._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.VitaminA.#ctor(System.Double,UnitsNet.Units.VitaminAUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VitaminA.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.VitaminA.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.VitaminA" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.VitaminA.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.VitaminA.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.VitaminA.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VitaminA.BaseUnit">
            <summary>
                The base unit of VitaminA, which is InternationalUnit. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.VitaminA.MaxValue">
            <summary>
            Represents the largest possible value of VitaminA
            </summary>
        </member>
        <member name="P:UnitsNet.VitaminA.MinValue">
            <summary>
            Represents the smallest possible value of VitaminA
            </summary>
        </member>
        <member name="P:UnitsNet.VitaminA.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.VitaminA.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VitaminA.Units">
            <summary>
                All units of measurement for the VitaminA quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VitaminA.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit InternationalUnit.
            </summary>
        </member>
        <member name="P:UnitsNet.VitaminA.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.VitaminA.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.VitaminA.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.VitaminA.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.VitaminA.Type">
            <summary>
                The <see cref="P:UnitsNet.VitaminA.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VitaminA.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.VitaminA.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VitaminA.InternationalUnits">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VitaminAUnit.InternationalUnit"/>
            </summary>
        </member>
        <member name="M:UnitsNet.VitaminA.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.VitaminA.GetAbbreviation(UnitsNet.Units.VitaminAUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.VitaminA.GetAbbreviation(UnitsNet.Units.VitaminAUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VitaminA.FromInternationalUnits(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VitaminA"/> from <see cref="F:UnitsNet.Units.VitaminAUnit.InternationalUnit"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VitaminA.From(UnitsNet.QuantityValue,UnitsNet.Units.VitaminAUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.VitaminAUnit" /> to <see cref="T:UnitsNet.VitaminA" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>VitaminA unit value.</returns>
        </member>
        <member name="M:UnitsNet.VitaminA.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.VitaminA.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VitaminA.TryParse(System.String,UnitsNet.VitaminA@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.VitaminA.TryParse(System.String,System.IFormatProvider,UnitsNet.VitaminA@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VitaminA.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.VitaminA.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.VitaminA.TryParseUnit(System.String,UnitsNet.Units.VitaminAUnit@)">
            <inheritdoc cref="M:UnitsNet.VitaminA.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.VitaminAUnit@)"/>
        </member>
        <member name="M:UnitsNet.VitaminA.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.VitaminAUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VitaminA.op_UnaryNegation(UnitsNet.VitaminA)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.VitaminA.op_Addition(UnitsNet.VitaminA,UnitsNet.VitaminA)">
            <summary>Get <see cref="T:UnitsNet.VitaminA"/> from adding two <see cref="T:UnitsNet.VitaminA"/>.</summary>
        </member>
        <member name="M:UnitsNet.VitaminA.op_Subtraction(UnitsNet.VitaminA,UnitsNet.VitaminA)">
            <summary>Get <see cref="T:UnitsNet.VitaminA"/> from subtracting two <see cref="T:UnitsNet.VitaminA"/>.</summary>
        </member>
        <member name="M:UnitsNet.VitaminA.op_Multiply(System.Double,UnitsNet.VitaminA)">
            <summary>Get <see cref="T:UnitsNet.VitaminA"/> from multiplying value and <see cref="T:UnitsNet.VitaminA"/>.</summary>
        </member>
        <member name="M:UnitsNet.VitaminA.op_Multiply(UnitsNet.VitaminA,System.Double)">
            <summary>Get <see cref="T:UnitsNet.VitaminA"/> from multiplying value and <see cref="T:UnitsNet.VitaminA"/>.</summary>
        </member>
        <member name="M:UnitsNet.VitaminA.op_Division(UnitsNet.VitaminA,System.Double)">
            <summary>Get <see cref="T:UnitsNet.VitaminA"/> from dividing <see cref="T:UnitsNet.VitaminA"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.VitaminA.op_Division(UnitsNet.VitaminA,UnitsNet.VitaminA)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.VitaminA"/> by <see cref="T:UnitsNet.VitaminA"/>.</summary>
        </member>
        <member name="M:UnitsNet.VitaminA.op_LessThanOrEqual(UnitsNet.VitaminA,UnitsNet.VitaminA)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.VitaminA.op_GreaterThanOrEqual(UnitsNet.VitaminA,UnitsNet.VitaminA)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.VitaminA.op_LessThan(UnitsNet.VitaminA,UnitsNet.VitaminA)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.VitaminA.op_GreaterThan(UnitsNet.VitaminA,UnitsNet.VitaminA)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.VitaminA.op_Equality(UnitsNet.VitaminA,UnitsNet.VitaminA)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.VitaminA.Equals(UnitsNet.VitaminA,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.VitaminA.op_Inequality(UnitsNet.VitaminA,UnitsNet.VitaminA)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.VitaminA.Equals(UnitsNet.VitaminA,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.VitaminA.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VitaminA.CompareTo(UnitsNet.VitaminA)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VitaminA.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.VitaminA.Equals(UnitsNet.VitaminA,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.VitaminA.Equals(UnitsNet.VitaminA)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.VitaminA.Equals(UnitsNet.VitaminA,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.VitaminA.Equals(UnitsNet.VitaminA,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another VitaminA within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.VitaminA.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current VitaminA.</returns>
        </member>
        <member name="M:UnitsNet.VitaminA.As(UnitsNet.Units.VitaminAUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.VitaminA.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.VitaminA.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VitaminA.ToUnit(UnitsNet.Units.VitaminAUnit)">
            <summary>
                Converts this VitaminA to another VitaminA with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A VitaminA with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.VitaminA.ToUnit(UnitsNet.Units.VitaminAUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this VitaminA to another VitaminA using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A VitaminA with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.VitaminA.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VitaminA.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.VitaminA.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VitaminA.UnitsNet#IQuantity{UnitsNet#Units#VitaminAUnit}#ToUnit(UnitsNet.Units.VitaminAUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VitaminA.UnitsNet#IQuantity{UnitsNet#Units#VitaminAUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VitaminA.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.VitaminA.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VitaminA.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VitaminA.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VitaminA.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.VitaminA.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.VolumeFlowPerArea">
            <inheritdoc />
            <summary>
                The volumetric flow rate per area is the volume of fluid which passes through a given unit surface area per unit time.
            </summary>
        </member>
        <member name="F:UnitsNet.VolumeFlowPerArea._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.VolumeFlowPerArea._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.#ctor(System.Double,UnitsNet.Units.VolumeFlowPerAreaUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.VolumeFlowPerArea.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.VolumeFlowPerArea" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlowPerArea.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.VolumeFlowPerArea.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.VolumeFlowPerArea.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlowPerArea.BaseUnit">
            <summary>
                The base unit of VolumeFlowPerArea, which is CubicMeterPerSecondPerSquareMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlowPerArea.MaxValue">
            <summary>
            Represents the largest possible value of VolumeFlowPerArea
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlowPerArea.MinValue">
            <summary>
            Represents the smallest possible value of VolumeFlowPerArea
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlowPerArea.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.VolumeFlowPerArea.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlowPerArea.Units">
            <summary>
                All units of measurement for the VolumeFlowPerArea quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlowPerArea.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit CubicMeterPerSecondPerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlowPerArea.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlowPerArea.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.VolumeFlowPerArea.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.VolumeFlowPerArea.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.VolumeFlowPerArea.Type">
            <summary>
                The <see cref="P:UnitsNet.VolumeFlowPerArea.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlowPerArea.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.VolumeFlowPerArea.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlowPerArea.CubicFeetPerMinutePerSquareFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowPerAreaUnit.CubicFootPerMinutePerSquareFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlowPerArea.CubicMetersPerSecondPerSquareMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumeFlowPerAreaUnit.CubicMeterPerSecondPerSquareMeter"/>
            </summary>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.GetAbbreviation(UnitsNet.Units.VolumeFlowPerAreaUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.GetAbbreviation(UnitsNet.Units.VolumeFlowPerAreaUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.FromCubicFeetPerMinutePerSquareFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlowPerArea"/> from <see cref="F:UnitsNet.Units.VolumeFlowPerAreaUnit.CubicFootPerMinutePerSquareFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.FromCubicMetersPerSecondPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumeFlowPerArea"/> from <see cref="F:UnitsNet.Units.VolumeFlowPerAreaUnit.CubicMeterPerSecondPerSquareMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.From(UnitsNet.QuantityValue,UnitsNet.Units.VolumeFlowPerAreaUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.VolumeFlowPerAreaUnit" /> to <see cref="T:UnitsNet.VolumeFlowPerArea" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>VolumeFlowPerArea unit value.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.TryParse(System.String,UnitsNet.VolumeFlowPerArea@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.TryParse(System.String,System.IFormatProvider,UnitsNet.VolumeFlowPerArea@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.TryParseUnit(System.String,UnitsNet.Units.VolumeFlowPerAreaUnit@)">
            <inheritdoc cref="M:UnitsNet.VolumeFlowPerArea.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.VolumeFlowPerAreaUnit@)"/>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.VolumeFlowPerAreaUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.op_UnaryNegation(UnitsNet.VolumeFlowPerArea)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.op_Addition(UnitsNet.VolumeFlowPerArea,UnitsNet.VolumeFlowPerArea)">
            <summary>Get <see cref="T:UnitsNet.VolumeFlowPerArea"/> from adding two <see cref="T:UnitsNet.VolumeFlowPerArea"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.op_Subtraction(UnitsNet.VolumeFlowPerArea,UnitsNet.VolumeFlowPerArea)">
            <summary>Get <see cref="T:UnitsNet.VolumeFlowPerArea"/> from subtracting two <see cref="T:UnitsNet.VolumeFlowPerArea"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.op_Multiply(System.Double,UnitsNet.VolumeFlowPerArea)">
            <summary>Get <see cref="T:UnitsNet.VolumeFlowPerArea"/> from multiplying value and <see cref="T:UnitsNet.VolumeFlowPerArea"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.op_Multiply(UnitsNet.VolumeFlowPerArea,System.Double)">
            <summary>Get <see cref="T:UnitsNet.VolumeFlowPerArea"/> from multiplying value and <see cref="T:UnitsNet.VolumeFlowPerArea"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.op_Division(UnitsNet.VolumeFlowPerArea,System.Double)">
            <summary>Get <see cref="T:UnitsNet.VolumeFlowPerArea"/> from dividing <see cref="T:UnitsNet.VolumeFlowPerArea"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.op_Division(UnitsNet.VolumeFlowPerArea,UnitsNet.VolumeFlowPerArea)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.VolumeFlowPerArea"/> by <see cref="T:UnitsNet.VolumeFlowPerArea"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.op_LessThanOrEqual(UnitsNet.VolumeFlowPerArea,UnitsNet.VolumeFlowPerArea)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.op_GreaterThanOrEqual(UnitsNet.VolumeFlowPerArea,UnitsNet.VolumeFlowPerArea)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.op_LessThan(UnitsNet.VolumeFlowPerArea,UnitsNet.VolumeFlowPerArea)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.op_GreaterThan(UnitsNet.VolumeFlowPerArea,UnitsNet.VolumeFlowPerArea)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.op_Equality(UnitsNet.VolumeFlowPerArea,UnitsNet.VolumeFlowPerArea)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.VolumeFlowPerArea.Equals(UnitsNet.VolumeFlowPerArea,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.op_Inequality(UnitsNet.VolumeFlowPerArea,UnitsNet.VolumeFlowPerArea)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.VolumeFlowPerArea.Equals(UnitsNet.VolumeFlowPerArea,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.CompareTo(UnitsNet.VolumeFlowPerArea)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.VolumeFlowPerArea.Equals(UnitsNet.VolumeFlowPerArea,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.Equals(UnitsNet.VolumeFlowPerArea)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.VolumeFlowPerArea.Equals(UnitsNet.VolumeFlowPerArea,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.Equals(UnitsNet.VolumeFlowPerArea,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another VolumeFlowPerArea within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current VolumeFlowPerArea.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.As(UnitsNet.Units.VolumeFlowPerAreaUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.ToUnit(UnitsNet.Units.VolumeFlowPerAreaUnit)">
            <summary>
                Converts this VolumeFlowPerArea to another VolumeFlowPerArea with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A VolumeFlowPerArea with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.ToUnit(UnitsNet.Units.VolumeFlowPerAreaUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this VolumeFlowPerArea to another VolumeFlowPerArea using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A VolumeFlowPerArea with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.UnitsNet#IQuantity{UnitsNet#Units#VolumeFlowPerAreaUnit}#ToUnit(UnitsNet.Units.VolumeFlowPerAreaUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.UnitsNet#IQuantity{UnitsNet#Units#VolumeFlowPerAreaUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlowPerArea.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.VolumePerLength">
            <inheritdoc />
            <summary>
                Volume, typically of fluid, that a container can hold within a unit of length.
            </summary>
        </member>
        <member name="F:UnitsNet.VolumePerLength._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.VolumePerLength._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.VolumePerLength.#ctor(System.Double,UnitsNet.Units.VolumePerLengthUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumePerLength.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.VolumePerLength.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.VolumePerLength" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumePerLength.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.VolumePerLength.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.VolumePerLength.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumePerLength.BaseUnit">
            <summary>
                The base unit of VolumePerLength, which is CubicMeterPerMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumePerLength.MaxValue">
            <summary>
            Represents the largest possible value of VolumePerLength
            </summary>
        </member>
        <member name="P:UnitsNet.VolumePerLength.MinValue">
            <summary>
            Represents the smallest possible value of VolumePerLength
            </summary>
        </member>
        <member name="P:UnitsNet.VolumePerLength.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.VolumePerLength.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumePerLength.Units">
            <summary>
                All units of measurement for the VolumePerLength quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumePerLength.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit CubicMeterPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumePerLength.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumePerLength.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.VolumePerLength.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.VolumePerLength.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.VolumePerLength.Type">
            <summary>
                The <see cref="P:UnitsNet.VolumePerLength.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumePerLength.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.VolumePerLength.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumePerLength.CubicMetersPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumePerLengthUnit.CubicMeterPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumePerLength.CubicYardsPerFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumePerLengthUnit.CubicYardPerFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumePerLength.CubicYardsPerUsSurveyFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumePerLengthUnit.CubicYardPerUsSurveyFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumePerLength.LitersPerKilometer">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumePerLengthUnit.LiterPerKilometer"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumePerLength.LitersPerMeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumePerLengthUnit.LiterPerMeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumePerLength.LitersPerMillimeter">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumePerLengthUnit.LiterPerMillimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumePerLength.OilBarrelsPerFoot">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumePerLengthUnit.OilBarrelPerFoot"/>
            </summary>
        </member>
        <member name="M:UnitsNet.VolumePerLength.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.VolumePerLength.GetAbbreviation(UnitsNet.Units.VolumePerLengthUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.VolumePerLength.GetAbbreviation(UnitsNet.Units.VolumePerLengthUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumePerLength.FromCubicMetersPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumePerLength"/> from <see cref="F:UnitsNet.Units.VolumePerLengthUnit.CubicMeterPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumePerLength.FromCubicYardsPerFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumePerLength"/> from <see cref="F:UnitsNet.Units.VolumePerLengthUnit.CubicYardPerFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumePerLength.FromCubicYardsPerUsSurveyFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumePerLength"/> from <see cref="F:UnitsNet.Units.VolumePerLengthUnit.CubicYardPerUsSurveyFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumePerLength.FromLitersPerKilometer(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumePerLength"/> from <see cref="F:UnitsNet.Units.VolumePerLengthUnit.LiterPerKilometer"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumePerLength.FromLitersPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumePerLength"/> from <see cref="F:UnitsNet.Units.VolumePerLengthUnit.LiterPerMeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumePerLength.FromLitersPerMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumePerLength"/> from <see cref="F:UnitsNet.Units.VolumePerLengthUnit.LiterPerMillimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumePerLength.FromOilBarrelsPerFoot(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumePerLength"/> from <see cref="F:UnitsNet.Units.VolumePerLengthUnit.OilBarrelPerFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumePerLength.From(UnitsNet.QuantityValue,UnitsNet.Units.VolumePerLengthUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.VolumePerLengthUnit" /> to <see cref="T:UnitsNet.VolumePerLength" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>VolumePerLength unit value.</returns>
        </member>
        <member name="M:UnitsNet.VolumePerLength.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.VolumePerLength.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumePerLength.TryParse(System.String,UnitsNet.VolumePerLength@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.VolumePerLength.TryParse(System.String,System.IFormatProvider,UnitsNet.VolumePerLength@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumePerLength.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.VolumePerLength.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.VolumePerLength.TryParseUnit(System.String,UnitsNet.Units.VolumePerLengthUnit@)">
            <inheritdoc cref="M:UnitsNet.VolumePerLength.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.VolumePerLengthUnit@)"/>
        </member>
        <member name="M:UnitsNet.VolumePerLength.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.VolumePerLengthUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumePerLength.op_UnaryNegation(UnitsNet.VolumePerLength)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.VolumePerLength.op_Addition(UnitsNet.VolumePerLength,UnitsNet.VolumePerLength)">
            <summary>Get <see cref="T:UnitsNet.VolumePerLength"/> from adding two <see cref="T:UnitsNet.VolumePerLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumePerLength.op_Subtraction(UnitsNet.VolumePerLength,UnitsNet.VolumePerLength)">
            <summary>Get <see cref="T:UnitsNet.VolumePerLength"/> from subtracting two <see cref="T:UnitsNet.VolumePerLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumePerLength.op_Multiply(System.Double,UnitsNet.VolumePerLength)">
            <summary>Get <see cref="T:UnitsNet.VolumePerLength"/> from multiplying value and <see cref="T:UnitsNet.VolumePerLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumePerLength.op_Multiply(UnitsNet.VolumePerLength,System.Double)">
            <summary>Get <see cref="T:UnitsNet.VolumePerLength"/> from multiplying value and <see cref="T:UnitsNet.VolumePerLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumePerLength.op_Division(UnitsNet.VolumePerLength,System.Double)">
            <summary>Get <see cref="T:UnitsNet.VolumePerLength"/> from dividing <see cref="T:UnitsNet.VolumePerLength"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.VolumePerLength.op_Division(UnitsNet.VolumePerLength,UnitsNet.VolumePerLength)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.VolumePerLength"/> by <see cref="T:UnitsNet.VolumePerLength"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumePerLength.op_LessThanOrEqual(UnitsNet.VolumePerLength,UnitsNet.VolumePerLength)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.VolumePerLength.op_GreaterThanOrEqual(UnitsNet.VolumePerLength,UnitsNet.VolumePerLength)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.VolumePerLength.op_LessThan(UnitsNet.VolumePerLength,UnitsNet.VolumePerLength)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.VolumePerLength.op_GreaterThan(UnitsNet.VolumePerLength,UnitsNet.VolumePerLength)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.VolumePerLength.op_Equality(UnitsNet.VolumePerLength,UnitsNet.VolumePerLength)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.VolumePerLength.Equals(UnitsNet.VolumePerLength,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.VolumePerLength.op_Inequality(UnitsNet.VolumePerLength,UnitsNet.VolumePerLength)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.VolumePerLength.Equals(UnitsNet.VolumePerLength,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.VolumePerLength.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumePerLength.CompareTo(UnitsNet.VolumePerLength)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumePerLength.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.VolumePerLength.Equals(UnitsNet.VolumePerLength,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.VolumePerLength.Equals(UnitsNet.VolumePerLength)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.VolumePerLength.Equals(UnitsNet.VolumePerLength,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.VolumePerLength.Equals(UnitsNet.VolumePerLength,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another VolumePerLength within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.VolumePerLength.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current VolumePerLength.</returns>
        </member>
        <member name="M:UnitsNet.VolumePerLength.As(UnitsNet.Units.VolumePerLengthUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.VolumePerLength.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.VolumePerLength.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumePerLength.ToUnit(UnitsNet.Units.VolumePerLengthUnit)">
            <summary>
                Converts this VolumePerLength to another VolumePerLength with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A VolumePerLength with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.VolumePerLength.ToUnit(UnitsNet.Units.VolumePerLengthUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this VolumePerLength to another VolumePerLength using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A VolumePerLength with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.VolumePerLength.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumePerLength.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.VolumePerLength.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumePerLength.UnitsNet#IQuantity{UnitsNet#Units#VolumePerLengthUnit}#ToUnit(UnitsNet.Units.VolumePerLengthUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumePerLength.UnitsNet#IQuantity{UnitsNet#Units#VolumePerLengthUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumePerLength.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.VolumePerLength.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumePerLength.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumePerLength.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumePerLength.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.VolumePerLength.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.VolumetricHeatCapacity">
            <inheritdoc />
            <summary>
                The volumetric heat capacity is the amount of energy that must be added, in the form of heat, to one unit of volume of the material in order to cause an increase of one unit in its temperature.
            </summary>
            <remarks>
                https://en.wikipedia.org/wiki/Volumetric_heat_capacity
            </remarks>
        </member>
        <member name="F:UnitsNet.VolumetricHeatCapacity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.VolumetricHeatCapacity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.#ctor(System.Double,UnitsNet.Units.VolumetricHeatCapacityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.VolumetricHeatCapacity.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.VolumetricHeatCapacity" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumetricHeatCapacity.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.VolumetricHeatCapacity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.VolumetricHeatCapacity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumetricHeatCapacity.BaseUnit">
            <summary>
                The base unit of VolumetricHeatCapacity, which is JoulePerCubicMeterKelvin. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumetricHeatCapacity.MaxValue">
            <summary>
            Represents the largest possible value of VolumetricHeatCapacity
            </summary>
        </member>
        <member name="P:UnitsNet.VolumetricHeatCapacity.MinValue">
            <summary>
            Represents the smallest possible value of VolumetricHeatCapacity
            </summary>
        </member>
        <member name="P:UnitsNet.VolumetricHeatCapacity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.VolumetricHeatCapacity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumetricHeatCapacity.Units">
            <summary>
                All units of measurement for the VolumetricHeatCapacity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumetricHeatCapacity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit JoulePerCubicMeterKelvin.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumetricHeatCapacity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumetricHeatCapacity.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.VolumetricHeatCapacity.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.VolumetricHeatCapacity.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.VolumetricHeatCapacity.Type">
            <summary>
                The <see cref="P:UnitsNet.VolumetricHeatCapacity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumetricHeatCapacity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.VolumetricHeatCapacity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumetricHeatCapacity.BtusPerCubicFootDegreeFahrenheit">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumetricHeatCapacityUnit.BtuPerCubicFootDegreeFahrenheit"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumetricHeatCapacity.CaloriesPerCubicCentimeterDegreeCelsius">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumetricHeatCapacityUnit.CaloriePerCubicCentimeterDegreeCelsius"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumetricHeatCapacity.JoulesPerCubicMeterDegreeCelsius">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumetricHeatCapacityUnit.JoulePerCubicMeterDegreeCelsius"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumetricHeatCapacity.JoulesPerCubicMeterKelvin">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumetricHeatCapacityUnit.JoulePerCubicMeterKelvin"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumetricHeatCapacity.KilocaloriesPerCubicCentimeterDegreeCelsius">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumetricHeatCapacityUnit.KilocaloriePerCubicCentimeterDegreeCelsius"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumetricHeatCapacity.KilojoulesPerCubicMeterDegreeCelsius">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumetricHeatCapacityUnit.KilojoulePerCubicMeterDegreeCelsius"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumetricHeatCapacity.KilojoulesPerCubicMeterKelvin">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumetricHeatCapacityUnit.KilojoulePerCubicMeterKelvin"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumetricHeatCapacity.MegajoulesPerCubicMeterDegreeCelsius">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumetricHeatCapacityUnit.MegajoulePerCubicMeterDegreeCelsius"/>
            </summary>
        </member>
        <member name="P:UnitsNet.VolumetricHeatCapacity.MegajoulesPerCubicMeterKelvin">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.VolumetricHeatCapacityUnit.MegajoulePerCubicMeterKelvin"/>
            </summary>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.GetAbbreviation(UnitsNet.Units.VolumetricHeatCapacityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.GetAbbreviation(UnitsNet.Units.VolumetricHeatCapacityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.FromBtusPerCubicFootDegreeFahrenheit(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumetricHeatCapacity"/> from <see cref="F:UnitsNet.Units.VolumetricHeatCapacityUnit.BtuPerCubicFootDegreeFahrenheit"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.FromCaloriesPerCubicCentimeterDegreeCelsius(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumetricHeatCapacity"/> from <see cref="F:UnitsNet.Units.VolumetricHeatCapacityUnit.CaloriePerCubicCentimeterDegreeCelsius"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.FromJoulesPerCubicMeterDegreeCelsius(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumetricHeatCapacity"/> from <see cref="F:UnitsNet.Units.VolumetricHeatCapacityUnit.JoulePerCubicMeterDegreeCelsius"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.FromJoulesPerCubicMeterKelvin(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumetricHeatCapacity"/> from <see cref="F:UnitsNet.Units.VolumetricHeatCapacityUnit.JoulePerCubicMeterKelvin"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.FromKilocaloriesPerCubicCentimeterDegreeCelsius(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumetricHeatCapacity"/> from <see cref="F:UnitsNet.Units.VolumetricHeatCapacityUnit.KilocaloriePerCubicCentimeterDegreeCelsius"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.FromKilojoulesPerCubicMeterDegreeCelsius(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumetricHeatCapacity"/> from <see cref="F:UnitsNet.Units.VolumetricHeatCapacityUnit.KilojoulePerCubicMeterDegreeCelsius"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.FromKilojoulesPerCubicMeterKelvin(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumetricHeatCapacity"/> from <see cref="F:UnitsNet.Units.VolumetricHeatCapacityUnit.KilojoulePerCubicMeterKelvin"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.FromMegajoulesPerCubicMeterDegreeCelsius(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumetricHeatCapacity"/> from <see cref="F:UnitsNet.Units.VolumetricHeatCapacityUnit.MegajoulePerCubicMeterDegreeCelsius"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.FromMegajoulesPerCubicMeterKelvin(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.VolumetricHeatCapacity"/> from <see cref="F:UnitsNet.Units.VolumetricHeatCapacityUnit.MegajoulePerCubicMeterKelvin"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.From(UnitsNet.QuantityValue,UnitsNet.Units.VolumetricHeatCapacityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.VolumetricHeatCapacityUnit" /> to <see cref="T:UnitsNet.VolumetricHeatCapacity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>VolumetricHeatCapacity unit value.</returns>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.TryParse(System.String,UnitsNet.VolumetricHeatCapacity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.TryParse(System.String,System.IFormatProvider,UnitsNet.VolumetricHeatCapacity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.TryParseUnit(System.String,UnitsNet.Units.VolumetricHeatCapacityUnit@)">
            <inheritdoc cref="M:UnitsNet.VolumetricHeatCapacity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.VolumetricHeatCapacityUnit@)"/>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.VolumetricHeatCapacityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.op_UnaryNegation(UnitsNet.VolumetricHeatCapacity)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.op_Addition(UnitsNet.VolumetricHeatCapacity,UnitsNet.VolumetricHeatCapacity)">
            <summary>Get <see cref="T:UnitsNet.VolumetricHeatCapacity"/> from adding two <see cref="T:UnitsNet.VolumetricHeatCapacity"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.op_Subtraction(UnitsNet.VolumetricHeatCapacity,UnitsNet.VolumetricHeatCapacity)">
            <summary>Get <see cref="T:UnitsNet.VolumetricHeatCapacity"/> from subtracting two <see cref="T:UnitsNet.VolumetricHeatCapacity"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.op_Multiply(System.Double,UnitsNet.VolumetricHeatCapacity)">
            <summary>Get <see cref="T:UnitsNet.VolumetricHeatCapacity"/> from multiplying value and <see cref="T:UnitsNet.VolumetricHeatCapacity"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.op_Multiply(UnitsNet.VolumetricHeatCapacity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.VolumetricHeatCapacity"/> from multiplying value and <see cref="T:UnitsNet.VolumetricHeatCapacity"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.op_Division(UnitsNet.VolumetricHeatCapacity,System.Double)">
            <summary>Get <see cref="T:UnitsNet.VolumetricHeatCapacity"/> from dividing <see cref="T:UnitsNet.VolumetricHeatCapacity"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.op_Division(UnitsNet.VolumetricHeatCapacity,UnitsNet.VolumetricHeatCapacity)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.VolumetricHeatCapacity"/> by <see cref="T:UnitsNet.VolumetricHeatCapacity"/>.</summary>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.op_LessThanOrEqual(UnitsNet.VolumetricHeatCapacity,UnitsNet.VolumetricHeatCapacity)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.op_GreaterThanOrEqual(UnitsNet.VolumetricHeatCapacity,UnitsNet.VolumetricHeatCapacity)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.op_LessThan(UnitsNet.VolumetricHeatCapacity,UnitsNet.VolumetricHeatCapacity)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.op_GreaterThan(UnitsNet.VolumetricHeatCapacity,UnitsNet.VolumetricHeatCapacity)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.op_Equality(UnitsNet.VolumetricHeatCapacity,UnitsNet.VolumetricHeatCapacity)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.VolumetricHeatCapacity.Equals(UnitsNet.VolumetricHeatCapacity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.op_Inequality(UnitsNet.VolumetricHeatCapacity,UnitsNet.VolumetricHeatCapacity)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.VolumetricHeatCapacity.Equals(UnitsNet.VolumetricHeatCapacity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.CompareTo(UnitsNet.VolumetricHeatCapacity)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.VolumetricHeatCapacity.Equals(UnitsNet.VolumetricHeatCapacity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.Equals(UnitsNet.VolumetricHeatCapacity)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.VolumetricHeatCapacity.Equals(UnitsNet.VolumetricHeatCapacity,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.Equals(UnitsNet.VolumetricHeatCapacity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another VolumetricHeatCapacity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current VolumetricHeatCapacity.</returns>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.As(UnitsNet.Units.VolumetricHeatCapacityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.ToUnit(UnitsNet.Units.VolumetricHeatCapacityUnit)">
            <summary>
                Converts this VolumetricHeatCapacity to another VolumetricHeatCapacity with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A VolumetricHeatCapacity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.ToUnit(UnitsNet.Units.VolumetricHeatCapacityUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this VolumetricHeatCapacity to another VolumetricHeatCapacity using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A VolumetricHeatCapacity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.UnitsNet#IQuantity{UnitsNet#Units#VolumetricHeatCapacityUnit}#ToUnit(UnitsNet.Units.VolumetricHeatCapacityUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.UnitsNet#IQuantity{UnitsNet#Units#VolumetricHeatCapacityUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.VolumetricHeatCapacity.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.WarpingMomentOfInertia">
            <inheritdoc />
            <summary>
                A geometric property of an area that is used to determine the warping stress.
            </summary>
        </member>
        <member name="F:UnitsNet.WarpingMomentOfInertia._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.WarpingMomentOfInertia._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.#ctor(System.Double,UnitsNet.Units.WarpingMomentOfInertiaUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.#ctor(System.Double,UnitsNet.UnitSystem)">
            <summary>
            Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="T:UnitsNet.UnitSystem"/>.
            If multiple compatible units were found, the first match is used.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unitSystem">The unit system to create the quantity with.</param>
            <exception cref="T:System.ArgumentNullException">The given <see cref="T:UnitsNet.UnitSystem"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No unit was found for the given <see cref="T:UnitsNet.UnitSystem"/>.</exception>
        </member>
        <member name="P:UnitsNet.WarpingMomentOfInertia.DefaultConversionFunctions">
            <summary>
                The <see cref="T:UnitsNet.UnitConverter" /> containing the default generated conversion functions for <see cref="T:UnitsNet.WarpingMomentOfInertia" /> instances.
            </summary>
        </member>
        <member name="P:UnitsNet.WarpingMomentOfInertia.Info">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.WarpingMomentOfInertia.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.WarpingMomentOfInertia.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.WarpingMomentOfInertia.BaseUnit">
            <summary>
                The base unit of WarpingMomentOfInertia, which is MeterToTheSixth. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.WarpingMomentOfInertia.MaxValue">
            <summary>
            Represents the largest possible value of WarpingMomentOfInertia
            </summary>
        </member>
        <member name="P:UnitsNet.WarpingMomentOfInertia.MinValue">
            <summary>
            Represents the smallest possible value of WarpingMomentOfInertia
            </summary>
        </member>
        <member name="P:UnitsNet.WarpingMomentOfInertia.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.WarpingMomentOfInertia.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.WarpingMomentOfInertia.Units">
            <summary>
                All units of measurement for the WarpingMomentOfInertia quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.WarpingMomentOfInertia.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit MeterToTheSixth.
            </summary>
        </member>
        <member name="P:UnitsNet.WarpingMomentOfInertia.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.WarpingMomentOfInertia.Unit">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.WarpingMomentOfInertia.QuantityInfo">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.WarpingMomentOfInertia.UnitsNet#IQuantity#QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="P:UnitsNet.WarpingMomentOfInertia.Type">
            <summary>
                The <see cref="P:UnitsNet.WarpingMomentOfInertia.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.WarpingMomentOfInertia.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.WarpingMomentOfInertia.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.WarpingMomentOfInertia.CentimetersToTheSixth">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.WarpingMomentOfInertiaUnit.CentimeterToTheSixth"/>
            </summary>
        </member>
        <member name="P:UnitsNet.WarpingMomentOfInertia.DecimetersToTheSixth">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.WarpingMomentOfInertiaUnit.DecimeterToTheSixth"/>
            </summary>
        </member>
        <member name="P:UnitsNet.WarpingMomentOfInertia.FeetToTheSixth">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.WarpingMomentOfInertiaUnit.FootToTheSixth"/>
            </summary>
        </member>
        <member name="P:UnitsNet.WarpingMomentOfInertia.InchesToTheSixth">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.WarpingMomentOfInertiaUnit.InchToTheSixth"/>
            </summary>
        </member>
        <member name="P:UnitsNet.WarpingMomentOfInertia.MetersToTheSixth">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.WarpingMomentOfInertiaUnit.MeterToTheSixth"/>
            </summary>
        </member>
        <member name="P:UnitsNet.WarpingMomentOfInertia.MillimetersToTheSixth">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.WarpingMomentOfInertiaUnit.MillimeterToTheSixth"/>
            </summary>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.GetAbbreviation(UnitsNet.Units.WarpingMomentOfInertiaUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.GetAbbreviation(UnitsNet.Units.WarpingMomentOfInertiaUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.FromCentimetersToTheSixth(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.WarpingMomentOfInertia"/> from <see cref="F:UnitsNet.Units.WarpingMomentOfInertiaUnit.CentimeterToTheSixth"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.FromDecimetersToTheSixth(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.WarpingMomentOfInertia"/> from <see cref="F:UnitsNet.Units.WarpingMomentOfInertiaUnit.DecimeterToTheSixth"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.FromFeetToTheSixth(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.WarpingMomentOfInertia"/> from <see cref="F:UnitsNet.Units.WarpingMomentOfInertiaUnit.FootToTheSixth"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.FromInchesToTheSixth(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.WarpingMomentOfInertia"/> from <see cref="F:UnitsNet.Units.WarpingMomentOfInertiaUnit.InchToTheSixth"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.FromMetersToTheSixth(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.WarpingMomentOfInertia"/> from <see cref="F:UnitsNet.Units.WarpingMomentOfInertiaUnit.MeterToTheSixth"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.FromMillimetersToTheSixth(UnitsNet.QuantityValue)">
            <summary>
                Creates a <see cref="T:UnitsNet.WarpingMomentOfInertia"/> from <see cref="F:UnitsNet.Units.WarpingMomentOfInertiaUnit.MillimeterToTheSixth"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.From(UnitsNet.QuantityValue,UnitsNet.Units.WarpingMomentOfInertiaUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.WarpingMomentOfInertiaUnit" /> to <see cref="T:UnitsNet.WarpingMomentOfInertia" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>WarpingMomentOfInertia unit value.</returns>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.TryParse(System.String,UnitsNet.WarpingMomentOfInertia@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.TryParse(System.String,System.IFormatProvider,UnitsNet.WarpingMomentOfInertia@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.TryParseUnit(System.String,UnitsNet.Units.WarpingMomentOfInertiaUnit@)">
            <inheritdoc cref="M:UnitsNet.WarpingMomentOfInertia.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.WarpingMomentOfInertiaUnit@)"/>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.WarpingMomentOfInertiaUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.op_UnaryNegation(UnitsNet.WarpingMomentOfInertia)">
            <summary>Negate the value.</summary>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.op_Addition(UnitsNet.WarpingMomentOfInertia,UnitsNet.WarpingMomentOfInertia)">
            <summary>Get <see cref="T:UnitsNet.WarpingMomentOfInertia"/> from adding two <see cref="T:UnitsNet.WarpingMomentOfInertia"/>.</summary>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.op_Subtraction(UnitsNet.WarpingMomentOfInertia,UnitsNet.WarpingMomentOfInertia)">
            <summary>Get <see cref="T:UnitsNet.WarpingMomentOfInertia"/> from subtracting two <see cref="T:UnitsNet.WarpingMomentOfInertia"/>.</summary>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.op_Multiply(System.Double,UnitsNet.WarpingMomentOfInertia)">
            <summary>Get <see cref="T:UnitsNet.WarpingMomentOfInertia"/> from multiplying value and <see cref="T:UnitsNet.WarpingMomentOfInertia"/>.</summary>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.op_Multiply(UnitsNet.WarpingMomentOfInertia,System.Double)">
            <summary>Get <see cref="T:UnitsNet.WarpingMomentOfInertia"/> from multiplying value and <see cref="T:UnitsNet.WarpingMomentOfInertia"/>.</summary>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.op_Division(UnitsNet.WarpingMomentOfInertia,System.Double)">
            <summary>Get <see cref="T:UnitsNet.WarpingMomentOfInertia"/> from dividing <see cref="T:UnitsNet.WarpingMomentOfInertia"/> by value.</summary>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.op_Division(UnitsNet.WarpingMomentOfInertia,UnitsNet.WarpingMomentOfInertia)">
            <summary>Get ratio value from dividing <see cref="T:UnitsNet.WarpingMomentOfInertia"/> by <see cref="T:UnitsNet.WarpingMomentOfInertia"/>.</summary>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.op_LessThanOrEqual(UnitsNet.WarpingMomentOfInertia,UnitsNet.WarpingMomentOfInertia)">
            <summary>Returns true if less or equal to.</summary>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.op_GreaterThanOrEqual(UnitsNet.WarpingMomentOfInertia,UnitsNet.WarpingMomentOfInertia)">
            <summary>Returns true if greater than or equal to.</summary>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.op_LessThan(UnitsNet.WarpingMomentOfInertia,UnitsNet.WarpingMomentOfInertia)">
            <summary>Returns true if less than.</summary>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.op_GreaterThan(UnitsNet.WarpingMomentOfInertia,UnitsNet.WarpingMomentOfInertia)">
            <summary>Returns true if greater than.</summary>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.op_Equality(UnitsNet.WarpingMomentOfInertia,UnitsNet.WarpingMomentOfInertia)">
            <summary>Returns true if exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.WarpingMomentOfInertia.Equals(UnitsNet.WarpingMomentOfInertia,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.op_Inequality(UnitsNet.WarpingMomentOfInertia,UnitsNet.WarpingMomentOfInertia)">
            <summary>Returns true if not exactly equal.</summary>
            <remarks>Consider using <see cref="M:UnitsNet.WarpingMomentOfInertia.Equals(UnitsNet.WarpingMomentOfInertia,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.CompareTo(UnitsNet.WarpingMomentOfInertia)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.Equals(System.Object)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.WarpingMomentOfInertia.Equals(UnitsNet.WarpingMomentOfInertia,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.Equals(UnitsNet.WarpingMomentOfInertia)">
            <inheritdoc />
            <remarks>Consider using <see cref="M:UnitsNet.WarpingMomentOfInertia.Equals(UnitsNet.WarpingMomentOfInertia,System.Double,UnitsNet.ComparisonType)"/> for safely comparing floating point values.</remarks>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.Equals(UnitsNet.WarpingMomentOfInertia,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another WarpingMomentOfInertia within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current WarpingMomentOfInertia.</returns>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.As(UnitsNet.Units.WarpingMomentOfInertiaUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.As(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.UnitsNet#IQuantity#As(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.ToUnit(UnitsNet.Units.WarpingMomentOfInertiaUnit)">
            <summary>
                Converts this WarpingMomentOfInertia to another WarpingMomentOfInertia with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <returns>A WarpingMomentOfInertia with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.ToUnit(UnitsNet.Units.WarpingMomentOfInertiaUnit,UnitsNet.UnitConverter)">
            <summary>
                Converts this WarpingMomentOfInertia to another WarpingMomentOfInertia using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
            </summary>
            <param name="unit">The unit to convert to.</param>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to use for the conversion.</param>
            <returns>A WarpingMomentOfInertia with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.UnitsNet#IQuantity#ToUnit(System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc cref="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.UnitsNet#IQuantity#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.UnitsNet#IQuantity{UnitsNet#Units#WarpingMomentOfInertiaUnit}#ToUnit(UnitsNet.Units.WarpingMomentOfInertiaUnit)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.UnitsNet#IQuantity{UnitsNet#Units#WarpingMomentOfInertiaUnit}#ToUnit(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.ToString">
            <summary>
                Gets the default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.ToString(System.IFormatProvider)">
            <summary>
                Gets the default string representation of value and unit using the given format provider.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.ToString(System.String)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.WarpingMomentOfInertia.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)"/>
            <summary>
            Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.QuantityType">
            <summary>
                Lists all generated quantities with the same name as the quantity struct type,
                such as Length, Mass, Force etc.
                This is useful for populating options in the UI, such as creating a generic conversion
                tool with inputValue, quantityName, fromUnit and toUnit selectors.
            </summary>
        </member>
        <member name="F:UnitsNet.Units.BrakeSpecificFuelConsumptionUnit.PoundPerMechanicalHorsepowerHour">
            <summary>
                The pound per horse power hour uses mechanical horse power and the imperial pound
            </summary>
        </member>
        <member name="F:UnitsNet.Units.ForceUnit.ShortTonForce">
            <summary>
                The short ton-force is a unit of force equal to 2,000 pounds-force (907.18474 kgf), that is most commonly used in the United States – known there simply as the ton or US ton.
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Ton-force#Short_ton-force</remarks>
        </member>
        <member name="F:UnitsNet.Units.LengthUnit.Angstrom">
            <summary>
                Angstrom is a metric unit of length equal to 1e-10 meter
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Angstrom</remarks>
        </member>
        <member name="F:UnitsNet.Units.LengthUnit.AstronomicalUnit">
            <summary>
                One Astronomical Unit is the distance from the solar system Star, the sun, to planet Earth.
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Astronomical_unit</remarks>
        </member>
        <member name="F:UnitsNet.Units.LengthUnit.LightYear">
            <summary>
                A Light Year (ly) is the distance that light travel during an Earth year, ie 365 days.
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Light-year</remarks>
        </member>
        <member name="F:UnitsNet.Units.LengthUnit.Parsec">
            <summary>
                A parsec is defined as the distance at which one astronomical unit (AU) subtends an angle of one arcsecond.
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Parsec</remarks>
        </member>
        <member name="F:UnitsNet.Units.LengthUnit.SolarRadius">
            <summary>
                Solar radius is a ratio unit to the radius of the solar system star, the sun.
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Stellar_classification</remarks>
        </member>
        <member name="F:UnitsNet.Units.LuminosityUnit.SolarLuminosity">
            <remarks>https://www.britannica.com/science/luminosity</remarks>
        </member>
        <member name="F:UnitsNet.Units.MassUnit.EarthMass">
            <summary>
                Earth mass is a ratio unit to the mass of planet Earth.
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Earth_mass</remarks>
        </member>
        <member name="F:UnitsNet.Units.MassUnit.Grain">
            <summary>
                A grain is a unit of measurement of mass, and in the troy weight, avoirdupois, and Apothecaries' system, equal to exactly 64.79891 milligrams.
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Grain_(unit)</remarks>
        </member>
        <member name="F:UnitsNet.Units.MassUnit.LongHundredweight">
            <summary>
                The long or imperial hundredweight (abbreviation cwt) is a unit of mass equal to 112 pounds in US and Canada.
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Hundredweight</remarks>
        </member>
        <member name="F:UnitsNet.Units.MassUnit.LongTon">
            <summary>
                Long ton (weight ton or Imperial ton) is a unit of mass equal to 2,240 pounds (1,016 kg) and is the name for the unit called the "ton" in the avoirdupois or Imperial system of measurements that was used in the United Kingdom and several other Commonwealth countries before metrication.
            </summary>
            <remarks>http://en.wikipedia.org/wiki/Long_ton</remarks>
        </member>
        <member name="F:UnitsNet.Units.MassUnit.Ounce">
            <summary>
                An ounce (abbreviated oz) is usually the international avoirdupois ounce as used in the United States customary and British imperial systems, which is equal to one-sixteenth of a pound or approximately 28 grams. The abbreviation 'oz' derives from the Italian word onza (now spelled oncia).
            </summary>
            <remarks>http://en.wikipedia.org/wiki/Ounce</remarks>
        </member>
        <member name="F:UnitsNet.Units.MassUnit.Pound">
            <summary>
                The pound or pound-mass (abbreviations: lb, lbm) is a unit of mass used in the imperial, United States customary and other systems of measurement. A number of different definitions have been used, the most common today being the international avoirdupois pound which is legally defined as exactly 0.45359237 kilograms, and which is divided into 16 avoirdupois ounces.
            </summary>
        </member>
        <member name="F:UnitsNet.Units.MassUnit.ShortHundredweight">
            <summary>
                The short hundredweight (abbreviation cwt) is a unit of mass equal to 100 pounds in US and Canada. In British English, the short hundredweight is referred to as the "cental".
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Hundredweight</remarks>
        </member>
        <member name="F:UnitsNet.Units.MassUnit.ShortTon">
            <summary>
                The short ton is a unit of mass equal to 2,000 pounds (907.18474 kg), that is most commonly used in the United States – known there simply as the ton.
            </summary>
            <remarks>http://en.wikipedia.org/wiki/Short_ton</remarks>
        </member>
        <member name="F:UnitsNet.Units.MassUnit.Slug">
            <summary>
                The slug (abbreviation slug) is a unit of mass that is accelerated by 1 ft/s² when a force of one pound (lbf) is exerted on it.
            </summary>
            <remarks>http://en.wikipedia.org/wiki/Slug_(unit)</remarks>
        </member>
        <member name="F:UnitsNet.Units.MassUnit.SolarMass">
            <summary>
                Solar mass is a ratio unit to the mass of the solar system star, the sun.
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Solar_mass</remarks>
        </member>
        <member name="F:UnitsNet.Units.MassUnit.Stone">
            <summary>
                The stone (abbreviation st) is a unit of mass equal to 14 pounds avoirdupois (about 6.35 kilograms) used in Great Britain and Ireland for measuring human body weight.
            </summary>
            <remarks>http://en.wikipedia.org/wiki/Stone_(unit)</remarks>
        </member>
        <member name="T:UnitsNet.IDecimalQuantity">
            <summary>
                Represents a quantity with a decimal value.
            </summary>
        </member>
        <member name="P:UnitsNet.IDecimalQuantity.Value">
            <summary>
                The decimal value this quantity was constructed with.
            </summary>
        </member>
        <member name="T:UnitsNet.InternalHelpers.Guard">
            <summary>
                Guard methods to ensure parameter values satisfy pre-conditions and use a consistent exception message.
            </summary>
        </member>
        <member name="M:UnitsNet.InternalHelpers.Guard.EnsureValidNumber(System.Double,System.String)">
            <summary>
                Throws <see cref="T:System.ArgumentException" /> if value is <see cref="F:System.Double.NaN" />,
                <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" />.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">Name of parameter in calling method.</param>
            <returns>The given <paramref name="value" /> if valid.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="value" /> is invalid.</exception>
        </member>
        <member name="M:UnitsNet.InternalHelpers.ReflectionBridgeExtensions.Wrap(System.Type)">
            <summary>
                Wrap the type to make it .NET agnostic using Type for old targets and the newer TypeInfo for newer targets.
            </summary>
        </member>
        <member name="M:UnitsNet.InternalHelpers.ReflectionBridgeExtensions.ToUniformType(System.Type)">
            <summary>
                Returns the type or type info object depending on compile target, such as TypeInfo for .NET 4.5+ and Type for .NET
                4.0 and older.
                The APIs of these two objects are similar, but obtaining them is slightly different.
                The idea is to get fewer #if pragma statements in the code.
            </summary>
        </member>
        <member name="T:UnitsNet.IQuantity">
            <summary>
                Represents a quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.IQuantity.Type">
            <summary>
                The <see cref="T:UnitsNet.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.IQuantity.Dimensions">
            <summary>
                The <see cref="T:UnitsNet.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.IQuantity.QuantityInfo">
            <summary>
                Information about the quantity type, such as unit values and names.
            </summary>
        </member>
        <member name="M:UnitsNet.IQuantity.As(System.Enum)">
            <summary>
                Gets the value in the given unit.
            </summary>
            <param name="unit">The unit enum value. The unit must be compatible, so for <see cref="T:UnitsNet.Length"/> you should provide a <see cref="T:UnitsNet.Units.LengthUnit"/> value.</param>
            <returns>Value converted to the specified unit.</returns>
            <exception cref="T:System.InvalidCastException">Wrong unit enum type was given.</exception>
        </member>
        <member name="M:UnitsNet.IQuantity.As(UnitsNet.UnitSystem)">
            <summary>
                Gets the value in the unit determined by the given <see cref="T:UnitsNet.UnitSystem"/>. If multiple units were found for the given <see cref="T:UnitsNet.UnitSystem"/>,
                the first match will be used.
            </summary>
            <param name="unitSystem">The <see cref="T:UnitsNet.UnitSystem"/> to convert the quantity value to.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="P:UnitsNet.IQuantity.Unit">
            <summary>
                The unit this quantity was constructed with -or- BaseUnit if default ctor was used.
            </summary>
        </member>
        <member name="P:UnitsNet.IQuantity.Value">
            <summary>
                The value this quantity was constructed with. See also <see cref="P:UnitsNet.IQuantity.Unit"/>.
            </summary>
        </member>
        <member name="M:UnitsNet.IQuantity.ToUnit(System.Enum)">
            <summary>
                Converts this <see cref="T:UnitsNet.IQuantity"/> to an <see cref="T:UnitsNet.IQuantity"/> in the given <paramref name="unit"/>.
            </summary>
            <param name="unit">
                The unit <see cref="T:System.Enum"/> value. The <see cref="T:System.Enum"/> must be compatible with the units of the <see cref="T:UnitsNet.IQuantity"/>.
                For example, if the <see cref="T:UnitsNet.IQuantity"/> is a <see cref="T:UnitsNet.Length"/>, you should provide a <see cref="T:UnitsNet.Units.LengthUnit"/> value.
            </param>
            <exception cref="T:System.NotImplementedException">Conversion was not possible from this <see cref="T:UnitsNet.IQuantity"/> to <paramref name="unit"/>.</exception>
            <returns>A new <see cref="T:UnitsNet.IQuantity"/> in the given <paramref name="unit"/>.</returns>
        </member>
        <member name="M:UnitsNet.IQuantity.ToUnit(UnitsNet.UnitSystem)">
            <summary>
                Converts to a quantity with a unit determined by the given <see cref="T:UnitsNet.UnitSystem"/>, which affects things like <see cref="M:UnitsNet.IQuantity.ToString(System.IFormatProvider)"/>.
                If multiple units were found for the given <see cref="T:UnitsNet.UnitSystem"/>, the first match will be used.
            </summary>
            <param name="unitSystem">The <see cref="T:UnitsNet.UnitSystem"/> to convert the quantity to.</param>
            <returns>A new quantity with the determined unit.</returns>
        </member>
        <member name="M:UnitsNet.IQuantity.ToString(System.IFormatProvider)">
            <summary>
                Gets the string representation of value and unit. Uses two significant digits after radix.
            </summary>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.IQuantity.ToString(System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="M:UnitsNet.IQuantity.ToString(System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
        </member>
        <member name="T:UnitsNet.IQuantity`1">
            <summary>
                A stronger typed interface where the unit enum type is known, to avoid passing in the
                wrong unit enum type and not having to cast from <see cref="T:System.Enum"/>.
            </summary>
            <example>
                IQuantity{LengthUnit} length;
                double centimeters = length.As(LengthUnit.Centimeter); // Type safety on enum type
            </example>
        </member>
        <member name="M:UnitsNet.IQuantity`1.As(`0)">
            <summary>
                Convert to a unit representation <typeparamref name="TUnitType"/>.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="P:UnitsNet.IQuantity`1.Unit">
            <inheritdoc cref="P:UnitsNet.IQuantity.Unit"/>
        </member>
        <member name="P:UnitsNet.IQuantity`1.QuantityInfo">
            <inheritdoc cref="P:UnitsNet.IQuantity.QuantityInfo"/>
        </member>
        <member name="M:UnitsNet.IQuantity`1.ToUnit(`0)">
            <summary>
                Converts this <see cref="T:UnitsNet.IQuantity`1"/> to an <see cref="T:UnitsNet.IQuantity`1"/> in the given <paramref name="unit"/>.
            </summary>
            <param name="unit">The unit value.</param>
            <exception cref="T:System.NotImplementedException">Conversion was not possible from this <see cref="T:UnitsNet.IQuantity"/> to <paramref name="unit"/>.</exception>
            <returns>A new <see cref="T:UnitsNet.IQuantity`1"/> in the given <paramref name="unit"/>.</returns>
        </member>
        <member name="M:UnitsNet.IQuantity`1.ToUnit(UnitsNet.UnitSystem)">
            <summary>
                Converts to a quantity with a unit determined by the given <see cref="T:UnitsNet.UnitSystem"/>, which affects things like <see cref="M:UnitsNet.IQuantity.ToString(System.IFormatProvider)"/>.
                If multiple units were found for the given <see cref="T:UnitsNet.UnitSystem"/>, the first match will be used.
            </summary>
            <param name="unitSystem">The <see cref="T:UnitsNet.UnitSystem"/> to convert the quantity to.</param>
            <returns>A new quantity with the determined unit.</returns>
        </member>
        <member name="T:UnitsNet.QuantityFormatter">
            <summary>
            The QuantityFormatter class is responsible for formatting a quantity using the given format string.
            </summary>
        </member>
        <member name="F:UnitsNet.QuantityFormatter.UnitsNetFormatSpecifiers">
            <summary>
            The available UnitsNet custom format specifiers.
            </summary>
        </member>
        <member name="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String)">
            <summary>
            Formats a quantity using the given format string and format provider.
            </summary>
            <typeparam name="TUnitType">The quantity's unit type, for example <see cref="T:UnitsNet.Units.LengthUnit"/>.</typeparam>
            <param name="quantity">The quantity to format.</param>
            <param name="format">The format string.</param>
            <remarks>
            The valid format strings are as follows:
            <list type="bullet">
                <item>
                    <term>A standard numeric format string.</term>
                    <description>Any of the standard numeric format for <see cref="P:UnitsNet.IQuantity.Value" /> except for "G" or "g".
                    "C" or "c", "E" or "e", "F" or "f", "N" or "n", "P" or "p", "R" or "r" are all accepted.
                    </description>
                </item>
                <item>
                    <term>"G" or "g".</term>
                    <description>The value with 2 significant digits after the radix followed by the unit abbreviation, such as "1.23 m".</description>
                </item>
                <item>
                    <term>"A" or "a".</term>
                    <description>The default unit abbreviation for <see cref="P:UnitsNet.IQuantity`1.Unit" />, such as "m".</description>
                </item>
                <item>
                    <term>"A0", "A1", ..., "An" or "a0", "a1", ..., "an".</term>
                    <description>The n-th unit abbreviation for <see cref="P:UnitsNet.IQuantity`1.Unit" />. "a0" is the same as "a".
                    A <see cref="T:System.FormatException"/> will be thrown if the requested abbreviation index does not exist.</description>
                </item>
                <item>
                    <term>"V" or "v".</term>
                    <description>The string representation of <see cref="P:UnitsNet.IQuantity.Value" /> using the default ToString method.</description>
                </item>
                <item>
                    <term>"U" or "u".</term>
                    <description>The enum name of <see cref="P:UnitsNet.IQuantity`1.Unit" />, such as "Meter".</description>
                </item>
                <item>
                    <term>"Q" or "q".</term>
                    <description>The quantity name, such as "Length".</description>
                </item>
                <item>
                    <term>"S1", "S2", ..., "Sn" or "s1", "s2", ..., "sn".</term>
                    <description>The value with n significant digits after the radix followed by the unit abbreviation. For example,
                    "s4" would return "1.2345 m" if <see cref="P:UnitsNet.IQuantity.Value" /> is 1.2345678. Trailing zeros are omitted.</description>
                </item>
            </list>
            </remarks>
            <returns>The string representation.</returns>
        </member>
        <member name="M:UnitsNet.QuantityFormatter.Format``1(UnitsNet.IQuantity{``0},System.String,System.IFormatProvider)">
            <summary>
            Formats a quantity using the given format string and format provider.
            </summary>
            <typeparam name="TUnitType">The quantity's unit type, for example <see cref="T:UnitsNet.Units.LengthUnit"/>.</typeparam>
            <param name="quantity">The quantity to format.</param>
            <param name="format">The format string.</param>
            <param name="formatProvider">The format provider to use for localization and number formatting. Defaults to
            <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> if null.</param>
            <remarks>
            The valid format strings are as follows:
            <list type="bullet">
                <item>
                    <term>A standard numeric format string.</term>
                    <description>Any of the standard numeric format for <see cref="P:UnitsNet.IQuantity.Value" /> except for "G" or "g".
                    "C" or "c", "E" or "e", "F" or "f", "N" or "n", "P" or "p", "R" or "r" are all accepted.
                    </description>
                </item>
                <item>
                    <term>"G" or "g".</term>
                    <description>The value with 2 significant digits after the radix followed by the unit abbreviation, such as "1.23 m".</description>
                </item>
                <item>
                    <term>"A" or "a".</term>
                    <description>The default unit abbreviation for <see cref="P:UnitsNet.IQuantity`1.Unit" />, such as "m".</description>
                </item>
                <item>
                    <term>"A0", "A1", ..., "An" or "a0", "a1", ..., "an".</term>
                    <description>The n-th unit abbreviation for <see cref="P:UnitsNet.IQuantity`1.Unit" />. "a0" is the same as "a".
                    A <see cref="T:System.FormatException"/> will be thrown if the requested abbreviation index does not exist.</description>
                </item>
                <item>
                    <term>"V" or "v".</term>
                    <description>The string representation of <see cref="P:UnitsNet.IQuantity.Value" /> using the default ToString method.</description>
                </item>
                <item>
                    <term>"U" or "u".</term>
                    <description>The enum name of <see cref="P:UnitsNet.IQuantity`1.Unit" />, such as "Meter".</description>
                </item>
                <item>
                    <term>"Q" or "q".</term>
                    <description>The quantity name, such as "Length".</description>
                </item>
                <item>
                    <term>"S1", "S2", ..., "Sn" or "s1", "s2", ..., "sn".</term>
                    <description>The value with n significant digits after the radix followed by the unit abbreviation. For example,
                    "s4" would return "1.2345 m" if <see cref="P:UnitsNet.IQuantity.Value" /> is 1.2345678. Trailing zeros are omitted.</description>
                </item>
            </list>
            </remarks>
            <returns>The string representation.</returns>
        </member>
        <member name="T:UnitsNet.QuantityInfo">
            <summary>
                Information about the quantity, such as names, unit values and zero quantity.
                This is useful to enumerate units and present names with quantities and units
                chose dynamically at runtime, such as unit conversion apps or allowing the user to change the
                unit representation.
            </summary>
            <remarks>
                Typically you obtain this by looking it up via <see cref="P:UnitsNet.IQuantity.QuantityInfo" />.
            </remarks>
        </member>
        <member name="M:UnitsNet.QuantityInfo.#ctor(UnitsNet.QuantityType,UnitsNet.UnitInfo[],System.Enum,UnitsNet.IQuantity,UnitsNet.BaseDimensions)">
            <summary>
                Constructs an instance.
            </summary>
            <param name="quantityType">The quantity enum value.</param>
            <param name="unitInfos">The information about the units for this quantity.</param>
            <param name="baseUnit">The base unit enum value.</param>
            <param name="zero">The zero quantity.</param>
            <param name="baseDimensions">The base dimensions of the quantity.</param>
            <exception cref="T:System.ArgumentException">Quantity type can not be undefined.</exception>
            <exception cref="T:System.ArgumentNullException">If units -or- baseUnit -or- zero -or- baseDimensions is null.</exception>
        </member>
        <member name="M:UnitsNet.QuantityInfo.#ctor(System.String,System.Type,UnitsNet.UnitInfo[],System.Enum,UnitsNet.IQuantity,UnitsNet.BaseDimensions,UnitsNet.QuantityType)">
            <summary>
                Constructs an instance.
            </summary>
            <param name="name">Name of the quantity.</param>
            <param name="unitType">The unit enum type, such as <see cref="T:UnitsNet.Units.LengthUnit" />.</param>
            <param name="unitInfos">The information about the units for this quantity.</param>
            <param name="baseUnit">The base unit enum value.</param>
            <param name="zero">The zero quantity.</param>
            <param name="baseDimensions">The base dimensions of the quantity.</param>
            <param name="quantityType">The the quantity type. Defaults to Undefined.</param>
            <exception cref="T:System.ArgumentException">Quantity type can not be undefined.</exception>
            <exception cref="T:System.ArgumentNullException">If units -or- baseUnit -or- zero -or- baseDimensions is null.</exception>
        </member>
        <member name="P:UnitsNet.QuantityInfo.Name">
            <summary>
                Quantity name, such as "Length" or "Mass".
            </summary>
        </member>
        <member name="P:UnitsNet.QuantityInfo.QuantityType">
            <summary>
                Quantity type, such as <see cref="F:UnitsNet.QuantityType.Length" /> or <see cref="F:UnitsNet.QuantityType.Mass" />.
            </summary>
        </member>
        <member name="P:UnitsNet.QuantityInfo.UnitInfos">
            <summary>
                The units for this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.QuantityInfo.UnitNames">
            <summary>
                All unit names for the quantity, such as ["Centimeter", "Decimeter", "Meter", ...].
            </summary>
        </member>
        <member name="P:UnitsNet.QuantityInfo.Units">
            <summary>
                All unit enum values for the quantity, such as [<see cref="F:UnitsNet.Units.LengthUnit.Centimeter" />,
                <see cref="F:UnitsNet.Units.LengthUnit.Decimeter" />, <see cref="F:UnitsNet.Units.LengthUnit.Meter" />, ...].
            </summary>
        </member>
        <member name="P:UnitsNet.QuantityInfo.BaseUnitInfo">
            <summary>
                The base unit of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.QuantityInfo.BaseUnit">
            <summary>
                The base unit for the quantity, such as <see cref="F:UnitsNet.Units.LengthUnit.Meter" />.
            </summary>
        </member>
        <member name="P:UnitsNet.QuantityInfo.Zero">
            <summary>
                Zero value of quantity, such as <see cref="P:UnitsNet.Length.Zero" />.
            </summary>
        </member>
        <member name="P:UnitsNet.QuantityInfo.UnitType">
            <summary>
                Unit enum type, such as <see cref="T:UnitsNet.Units.LengthUnit"/> or <see cref="T:UnitsNet.Units.MassUnit"/>.
            </summary>
        </member>
        <member name="P:UnitsNet.QuantityInfo.ValueType">
            <summary>
                Quantity value type, such as <see cref="T:UnitsNet.Length"/> or <see cref="T:UnitsNet.Mass"/>.
            </summary>
        </member>
        <member name="P:UnitsNet.QuantityInfo.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.QuantityInfo.BaseDimensions" /> for a quantity.
            </summary>
        </member>
        <member name="M:UnitsNet.QuantityInfo.GetUnitInfoFor(UnitsNet.BaseUnits)">
            <summary>
            Gets the <see cref="T:UnitsNet.UnitInfo"/> whose <see cref="T:UnitsNet.BaseUnits"/> is a subset of <paramref name="baseUnits"/>.
            </summary>
            <example>Length.Info.GetUnitInfoFor(unitSystemWithFootAsLengthUnit) returns <see cref="T:UnitsNet.UnitInfo" /> for <see cref="F:UnitsNet.Units.LengthUnit.Foot" />.</example>
            <param name="baseUnits">The <see cref="T:UnitsNet.BaseUnits"/> to check against.</param>
            <returns>The <see cref="T:UnitsNet.UnitInfo"/> that has <see cref="T:UnitsNet.BaseUnits"/> that is a subset of <paramref name="baseUnits"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseUnits"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">No unit was found that is a subset of <paramref name="baseUnits"/>.</exception>
            <exception cref="T:System.InvalidOperationException">More than one unit was found that is a subset of <paramref name="baseUnits"/>.</exception>
        </member>
        <member name="M:UnitsNet.QuantityInfo.GetUnitInfosFor(UnitsNet.BaseUnits)">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:UnitsNet.UnitInfo"/> that have <see cref="T:UnitsNet.BaseUnits"/> that is a subset of <paramref name="baseUnits"/>.
            </summary>
            <param name="baseUnits">The <see cref="T:UnitsNet.BaseUnits"/> to check against.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:UnitsNet.UnitInfo"/> that have <see cref="T:UnitsNet.BaseUnits"/> that is a subset of <paramref name="baseUnits"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseUnits"/> is null.</exception>
        </member>
        <member name="T:UnitsNet.QuantityInfo`1">
            <inheritdoc cref="T:UnitsNet.QuantityInfo" />
            <remarks>
                This is a specialization of <see cref="T:UnitsNet.QuantityInfo" />, for when the unit type is known.
                Typically you obtain this by looking it up statically from <see cref="P:UnitsNet.Length.Info" /> or
                <see cref="P:UnitsNet.Length.QuantityInfo" />, or dynamically via <see cref="P:UnitsNet.IQuantity`1.QuantityInfo" />.
            </remarks>
            <typeparam name="TUnit">The unit enum type, such as <see cref="T:UnitsNet.Units.LengthUnit" />. </typeparam>
        </member>
        <member name="M:UnitsNet.QuantityInfo`1.#ctor(UnitsNet.QuantityType,UnitsNet.UnitInfo{`0}[],`0,UnitsNet.IQuantity{`0},UnitsNet.BaseDimensions)">
            <inheritdoc cref="M:UnitsNet.QuantityInfo`1.#ctor(System.String,UnitsNet.UnitInfo{`0}[],`0,UnitsNet.IQuantity{`0},UnitsNet.BaseDimensions,UnitsNet.QuantityType)" />
        </member>
        <member name="M:UnitsNet.QuantityInfo`1.#ctor(System.String,UnitsNet.UnitInfo{`0}[],`0,UnitsNet.IQuantity{`0},UnitsNet.BaseDimensions,UnitsNet.QuantityType)">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.QuantityInfo`1.UnitInfos">
            <inheritdoc cref="P:UnitsNet.QuantityInfo.UnitInfos" />
        </member>
        <member name="P:UnitsNet.QuantityInfo`1.Units">
            <inheritdoc cref="P:UnitsNet.QuantityInfo.Units" />
        </member>
        <member name="P:UnitsNet.QuantityInfo`1.BaseUnitInfo">
            <inheritdoc cref="P:UnitsNet.QuantityInfo.BaseUnitInfo" />
        </member>
        <member name="P:UnitsNet.QuantityInfo`1.BaseUnit">
            <inheritdoc cref="P:UnitsNet.QuantityInfo.BaseUnit" />
        </member>
        <member name="P:UnitsNet.QuantityInfo`1.Zero">
            <inheritdoc cref="P:UnitsNet.QuantityInfo.Zero" />
        </member>
        <member name="P:UnitsNet.QuantityInfo`1.UnitType">
            <inheritdoc cref="P:UnitsNet.QuantityInfo.UnitType" />
        </member>
        <member name="M:UnitsNet.QuantityInfo`1.GetUnitInfoFor(UnitsNet.BaseUnits)">
            <inheritdoc cref="M:UnitsNet.QuantityInfo.GetUnitInfoFor(UnitsNet.BaseUnits)" />
        </member>
        <member name="M:UnitsNet.QuantityInfo`1.GetUnitInfosFor(UnitsNet.BaseUnits)">
            <inheritdoc cref="M:UnitsNet.QuantityInfo.GetUnitInfosFor(UnitsNet.BaseUnits)" />
        </member>
        <member name="T:UnitsNet.QuantityNotFoundException">
            <summary>
                Quantity type was not found. This is typically thrown for dynamic conversions,
                such as <see cref="M:UnitsNet.UnitConverter.ConvertByName(UnitsNet.QuantityValue,System.String,System.String,System.String)" />.
            </summary>
        </member>
        <member name="M:UnitsNet.QuantityNotFoundException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.QuantityNotFoundException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.QuantityNotFoundException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:UnitsNet.UnitAttributeBase">
            <summary>
            Is the base class for all attributes that are related to <see cref="T:UnitsNet.QuantityTypeConverter`1"/>
            </summary>
        </member>
        <member name="P:UnitsNet.UnitAttributeBase.UnitType">
            <summary>
            The unit enum type, such as <see cref="T:UnitsNet.Units.LengthUnit" />
            </summary>
        </member>
        <member name="M:UnitsNet.UnitAttributeBase.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitsNet.UnitAttributeBase"/> class.
            </summary>
            <param name="unitType"></param>
        </member>
        <member name="T:UnitsNet.DefaultUnitAttribute">
            <summary>
            This attribute defines the default Unit to use if the string to convert only consists of digits
            </summary>
        </member>
        <member name="M:UnitsNet.DefaultUnitAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitsNet.DefaultUnitAttribute"/> class.
            </summary>
            <param name="unitType">The unit the quantity gets when the string parsing dose only consist of digits</param>
        </member>
        <member name="T:UnitsNet.ConvertToUnitAttribute">
            <summary>
            This attribute defines the Unit the quantity is converted to after it has been parsed.
            </summary>
        </member>
        <member name="M:UnitsNet.ConvertToUnitAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitsNet.ConvertToUnitAttribute"/> class.
            </summary>
            <param name="unitType">The unit the quantity is converted to when parsing from string</param>
        </member>
        <member name="T:UnitsNet.DisplayAsUnitAttribute">
            <summary>
            This attribute defines the unit the quantity has when converting to string
            </summary>
        </member>
        <member name="P:UnitsNet.DisplayAsUnitAttribute.Format">
            <summary>
            The formating used when the quantity is converted to string. See <see cref="M:UnitsNet.IQuantity.ToString(System.IFormatProvider)"/>
            </summary>
        </member>
        <member name="M:UnitsNet.DisplayAsUnitAttribute.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitsNet.DisplayAsUnitAttribute"/> class.
            </summary>
            <param name="unitType">The unit the quantity should be displayed in</param>
            <param name="format">Formating string <see cref="M:UnitsNet.IQuantity.ToString(System.IFormatProvider)"/> </param>
        </member>
        <member name="T:UnitsNet.QuantityTypeConverter`1">
             <summary>
             <para>
                 Converts between IQuantity and string.
                 Implements a TypeConverter for IQuantitys. This allows eg the PropertyGrid to read and write properties of type IQuantity.
             </para>
               <para>For basic understanding of TypeConverters consult the .NET documentation.</para>
             </summary>
             <typeparam name="TQuantity">Quantity value type, such as <see cref="T:UnitsNet.Length"/> or <see cref="T:UnitsNet.Mass"/>.</typeparam>
             <remarks>
             <para>
                 When a string is converted a Quantity the unit given by the string is used.
                 When no unit is given by the string the base unit is used.
                 The base unit can be overwritten by use of the <see cref="T:UnitsNet.DefaultUnitAttribute"/>.
                 The converted Quantity can be forced to be in a certain unit by use of the <see cref="T:UnitsNet.ConvertToUnitAttribute"/>.
             </para>
             <para>
                 The displayed unit can be forced to a certain unit by use of the <see cref="T:UnitsNet.DisplayAsUnitAttribute"/>.
                 The <see cref="T:UnitsNet.DisplayAsUnitAttribute"/> provides the possibility to format the displayed Quantity.
             </para>
             </remarks>
             <example>
               <para>These examples show how to use this TypeConverter.</para>
            
             <code title="Using the TypeConverter without additional attributes">
                 [TypeConverter(typeof(UnitsNetTypeConverter{Length}))]
                 Units.Length PropertyName { get; set; }
             </code>
            
             <code title="Using the TypeConverter with DisplayAsUnit attribute">
                 [DisplayAsUnit(UnitsNet.Units.LengthUnit.Meter)]
                 [TypeConverter(typeof(UnitsNetTypeConverter{Length}))]
                 Units.Length Length { get; set; }
             </code>
            
             <code title="Using the TypeConverter with DisplayAsUnit attribute with formating">
                 [DisplayAsUnit(UnitsNet.Units.LengthUnit.Meter, "g")]
                 [TypeConverter(typeof(UnitsNetTypeConverter{Length}))]
                 Units.Length Length { get; set; }
             </code>
            
             <code title="Using the TypeConverter with ConvertToUnit attribute">
                 [ConvertToUnitAttribute(UnitsNet.Units.LengthUnit.Meter)]
                 [TypeConverter(typeof(UnitsNetTypeConverter{Length}))]
                 Units.Length Length { get; set; }
             </code>
            
             <code title="Using the TypeConverter with DefaultUnit attribute">
                 [DefaultUnitAttribute(UnitsNet.Units.LengthUnit.Meter)]
                 [TypeConverter(typeof(UnitsNetTypeConverter{Length}))]
                 Units.Length Length { get; set; }
             </code>
             </example>
        </member>
        <member name="M:UnitsNet.QuantityTypeConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
                Returns true if sourceType if of type <see cref="T:System.String"/>
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:UnitsNet.QuantityTypeConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
                Converts the given object, when it is of type <see cref="T:System.String"/> to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">The System.Globalization.CultureInfo to use as the current culture.</param>
            <param name="value">The System.Object to convert.</param>
            <returns>An <see cref="T:UnitsNet.IQuantity"/> object.</returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
            <exception cref="T:System.ArgumentException">Unit value is not a know unit enum type.</exception>
        </member>
        <member name="M:UnitsNet.QuantityTypeConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Returns true whether this converter can convert the <see cref="T:UnitsNet.IQuantity"/> to string, using the specified context.</summary>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to. </param>
        </member>
        <member name="M:UnitsNet.QuantityTypeConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts the given <see cref="T:UnitsNet.IQuantity"/> object to <see cref="T:System.String"/>, using the specified context and culture information.</summary>
            <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If null is passed, the current culture is assumed. </param>
            <param name="value">The <see cref="T:System.Object" /> to convert. </param>
            <param name="destinationType">The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType" /> parameter is null. </exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:UnitsNet.QuantityValue">
            <summary>
                A type that supports implicit cast from all .NET numeric types, in order to avoid a large number of overloads
                and binary size for all From(value, unit) factory methods, for each of the 700+ units in the library.
                <see cref="T:UnitsNet.QuantityValue"/> stores the value internally with the proper type to preserve the range or precision of the original value:
            <list type="bullet">
            <item><description><see cref="T:System.Double"/> for [byte, short, int, long, float, double]</description></item>
            <item><description><see cref="T:System.Decimal"/> for [decimal] to preserve the 128-bit precision</description></item>
            </list>
            </summary>
            <remarks>
                At the time of this writing, this reduces the number of From(value, unit) overloads to 1/4th:
                From 8 (int, long, double, decimal + each nullable) down to 2 (QuantityValue and QuantityValue?).
                This also adds more numeric types with no extra overhead, such as float, short and byte.
            </remarks>
        </member>
        <member name="F:UnitsNet.QuantityValue._value">
            <summary>
                Value assigned when implicitly casting from all numeric types except <see cref="T:System.Decimal" />, since
                <see cref="T:System.Double" /> has the greatest range and is 64 bits versus 128 bits for <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="F:UnitsNet.QuantityValue._valueDecimal">
            <summary>
                Value assigned when implicitly casting from <see cref="T:System.Decimal" /> type, since it has a greater precision than
                <see cref="T:System.Double"/> and we want to preserve that when constructing quantities that use <see cref="T:System.Decimal"/>
                as their value type.
            </summary>
        </member>
        <member name="M:UnitsNet.QuantityValue.op_Implicit(System.Byte)~UnitsNet.QuantityValue">
            <summary>Implicit cast from <see cref="T:System.Byte"/> to <see cref="T:UnitsNet.QuantityValue"/>.</summary>
        </member>
        <member name="M:UnitsNet.QuantityValue.op_Implicit(System.Int16)~UnitsNet.QuantityValue">
            <summary>Implicit cast from <see cref="T:System.Int16"/> to <see cref="T:UnitsNet.QuantityValue"/>.</summary>
        </member>
        <member name="M:UnitsNet.QuantityValue.op_Implicit(System.Int32)~UnitsNet.QuantityValue">
            <summary>Implicit cast from <see cref="T:System.Int32"/> to <see cref="T:UnitsNet.QuantityValue"/>.</summary>
        </member>
        <member name="M:UnitsNet.QuantityValue.op_Implicit(System.Int64)~UnitsNet.QuantityValue">
            <summary>Implicit cast from <see cref="T:System.Int64"/> to <see cref="T:UnitsNet.QuantityValue"/>.</summary>
        </member>
        <member name="M:UnitsNet.QuantityValue.op_Implicit(System.Single)~UnitsNet.QuantityValue">
            <summary>Implicit cast from <see cref="T:System.Single"/> to <see cref="T:UnitsNet.QuantityValue"/>.</summary>
        </member>
        <member name="M:UnitsNet.QuantityValue.op_Implicit(System.Double)~UnitsNet.QuantityValue">
            <summary>Implicit cast from <see cref="T:System.Double"/> to <see cref="T:UnitsNet.QuantityValue"/>.</summary>
        </member>
        <member name="M:UnitsNet.QuantityValue.op_Implicit(System.Decimal)~UnitsNet.QuantityValue">
            <summary>Implicit cast from <see cref="T:System.Decimal"/> to <see cref="T:UnitsNet.QuantityValue"/>.</summary>
        </member>
        <member name="M:UnitsNet.QuantityValue.op_Explicit(UnitsNet.QuantityValue)~System.Double">
            <summary>Explicit cast from <see cref="T:UnitsNet.QuantityValue"/> to <see cref="T:System.Double"/>.</summary>
        </member>
        <member name="M:UnitsNet.QuantityValue.op_Explicit(UnitsNet.QuantityValue)~System.Decimal">
            <summary>Explicit cast from <see cref="T:UnitsNet.QuantityValue"/> to <see cref="T:System.Decimal"/>.</summary>
        </member>
        <member name="M:UnitsNet.QuantityValue.ToString">
            <summary>Returns the string representation of the numeric value.</summary>
        </member>
        <member name="T:UnitsNet.ConversionFunction">
             <summary>
            
             </summary>
             <param name="inputValue"></param>
             <returns></returns>
        </member>
        <member name="T:UnitsNet.ConversionFunction`1">
             <summary>
            
             </summary>
             <typeparam name="TQuantity"></typeparam>
             <param name="inputValue"></param>
             <returns></returns>
        </member>
        <member name="T:UnitsNet.UnitConverter">
            <summary>
                Convert between units of a quantity, such as converting from meters to centimeters of a given length.
            </summary>
        </member>
        <member name="P:UnitsNet.UnitConverter.Default">
            <summary>
            The static instance used by Units.NET to convert between units. Modify this to add/remove conversion functions at runtime, such
            as adding your own third-party units and quantities to convert between.
            </summary>
        </member>
        <member name="M:UnitsNet.UnitConverter.#ctor">
            <summary>
            Creates a new <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
        </member>
        <member name="M:UnitsNet.UnitConverter.#ctor(UnitsNet.UnitConverter)">
            <summary>
            Creates a new <see cref="T:UnitsNet.UnitConverter"/> instance with the <see cref="T:UnitsNet.ConversionFunction"/> copied from <paramref name="other"/>.
            </summary>
            <param name="other">The <see cref="T:UnitsNet.UnitConverter"/> to copy from.</param>
        </member>
        <member name="M:UnitsNet.UnitConverter.RegisterDefaultConversions(UnitsNet.UnitConverter)">
            <summary>
            Registers the default conversion functions in the given <see cref="T:UnitsNet.UnitConverter"/> instance.
            </summary>
            <param name="unitConverter">The <see cref="T:UnitsNet.UnitConverter"/> to register the default conversion functions in.</param>
        </member>
        <member name="M:UnitsNet.UnitConverter.SetConversionFunction``1(System.Enum,System.Enum,UnitsNet.ConversionFunction{``0})">
            <summary>
            Sets the conversion function from two units of the same quantity type.
            </summary>
            <typeparam name="TQuantity">The type of quantity, must implement <see cref="T:UnitsNet.IQuantity"/>.</typeparam>
            <param name="from">From unit enum value, such as <see cref="F:UnitsNet.Units.LengthUnit.Kilometer" />.</param>
            <param name="to">To unit enum value, such as <see cref="F:UnitsNet.Units.LengthUnit.Centimeter"/>.</param>
            <param name="conversionFunction">The quantity conversion function.</param>
        </member>
        <member name="M:UnitsNet.UnitConverter.SetConversionFunction``2(System.Enum,System.Enum,UnitsNet.ConversionFunction)">
            <summary>
            Sets the conversion function from two units of different quantity types.
            </summary>
            <typeparam name="TQuantityFrom">From quantity type, must implement <see cref="T:UnitsNet.IQuantity"/>.</typeparam>
            <typeparam name="TQuantityTo">To quantity type, must implement <see cref="T:UnitsNet.IQuantity"/>.</typeparam>
            <param name="from">From unit enum value, such as <see cref="F:UnitsNet.Units.LengthUnit.Kilometer" />.</param>
            <param name="to">To unit enum value, such as <see cref="F:UnitsNet.Units.LengthUnit.Centimeter"/>.</param>
            <param name="conversionFunction">The quantity conversion function.</param>
        </member>
        <member name="M:UnitsNet.UnitConverter.SetConversionFunction(System.Type,System.Enum,System.Type,System.Enum,UnitsNet.ConversionFunction)">
            <summary>
            Sets the conversion function from two units of different quantity types.
            </summary>
            <param name="fromType">From quantity type, must implement <see cref="T:UnitsNet.IQuantity"/>.</param>
            <param name="from">From unit enum value, such as <see cref="F:UnitsNet.Units.LengthUnit.Kilometer" />.</param>
            <param name="toType">To quantity type, must implement <see cref="T:UnitsNet.IQuantity"/>.</param>
            <param name="to">To unit enum value, such as <see cref="F:UnitsNet.Units.LengthUnit.Centimeter"/>.</param>
            <param name="conversionFunction">The quantity conversion function.</param>
        </member>
        <member name="M:UnitsNet.UnitConverter.SetConversionFunction(System.ValueTuple{System.Type,System.Enum,System.Type,System.Enum},UnitsNet.ConversionFunction)">
            <summary>
            Sets the conversion function for a particular conversion function lookup.
            </summary>
            <param name="lookupKey">The lookup key.</param>
            <param name="conversionFunction">The quantity conversion function.</param>
        </member>
        <member name="M:UnitsNet.UnitConverter.SetConversionFunction``1(System.ValueTuple{System.Type,System.Enum,System.Type,System.Enum},UnitsNet.ConversionFunction{``0})">
            <summary>
            Sets the conversion function for a particular conversion function lookup.
            </summary>
            <typeparam name="TQuantity">The quantity type, must implement <see cref="T:UnitsNet.IQuantity"/>.</typeparam>
            <param name="conversionLookup">The quantity conversion function lookup key.</param>
            <param name="conversionFunction">The quantity conversion function.</param>
        </member>
        <member name="M:UnitsNet.UnitConverter.GetConversionFunction``1(System.Enum,System.Enum)">
            <summary>
            Gets the conversion function from two units of the same quantity type.
            </summary>
            <typeparam name="TQuantity">The quantity type, must implement <see cref="T:UnitsNet.IQuantity"/>.</typeparam>
            <param name="from">From unit enum value, such as <see cref="F:UnitsNet.Units.LengthUnit.Kilometer" />.</param>
            <param name="to">To unit enum value, such as <see cref="F:UnitsNet.Units.LengthUnit.Centimeter"/>.</param>
            <returns></returns>
        </member>
        <member name="M:UnitsNet.UnitConverter.GetConversionFunction``2(System.Enum,System.Enum)">
            <summary>
            Gets the conversion function from two units of different quantity types.
            </summary>
            <typeparam name="TQuantityFrom">From quantity type, must implement <see cref="T:UnitsNet.IQuantity"/>.</typeparam>
            <typeparam name="TQuantityTo">To quantity type, must implement <see cref="T:UnitsNet.IQuantity"/>.</typeparam>
            <param name="from">From unit enum value, such as <see cref="F:UnitsNet.Units.LengthUnit.Kilometer" />.</param>
            <param name="to">To unit enum value, such as <see cref="F:UnitsNet.Units.LengthUnit.Centimeter"/>.</param>
            <returns></returns>
        </member>
        <member name="M:UnitsNet.UnitConverter.GetConversionFunction(System.Type,System.Enum,System.Type,System.Enum)">
            <summary>
            Gets the conversion function from two units of different quantity types.
            </summary>
            <param name="fromType">From quantity type, must implement <see cref="T:UnitsNet.IQuantity"/>.</param>
            <param name="from">From unit enum value, such as <see cref="F:UnitsNet.Units.LengthUnit.Kilometer" />.</param>
            <param name="toType">To quantity type, must implement <see cref="T:UnitsNet.IQuantity"/>.</param>
            <param name="to">To unit enum value, such as <see cref="F:UnitsNet.Units.LengthUnit.Centimeter"/>.</param>
        </member>
        <member name="M:UnitsNet.UnitConverter.GetConversionFunction(System.ValueTuple{System.Type,System.Enum,System.Type,System.Enum})">
            <summary>
            Gets the conversion function by its lookup key.
            </summary>
            <param name="lookupKey"></param>
        </member>
        <member name="M:UnitsNet.UnitConverter.TryGetConversionFunction``1(System.Enum,System.Enum,UnitsNet.ConversionFunction@)">
            <summary>
            Gets the conversion function for two units of the same quantity type.
            </summary>
            <typeparam name="TQuantity">The quantity type, must implement <see cref="T:UnitsNet.IQuantity"/>.</typeparam>
            <param name="from">From unit enum value, such as <see cref="F:UnitsNet.Units.LengthUnit.Kilometer" />.</param>
            <param name="to">To unit enum value, such as <see cref="F:UnitsNet.Units.LengthUnit.Centimeter"/>.</param>
            <param name="conversionFunction">The quantity conversion function.</param>
            <returns>true if set; otherwise, false.</returns>
        </member>
        <member name="M:UnitsNet.UnitConverter.TryGetConversionFunction``2(System.Enum,System.Enum,UnitsNet.ConversionFunction@)">
            <summary>
            Gets the conversion function for two units of different quantity types.
            </summary>
            <typeparam name="TQuantityFrom">From quantity type, must implement <see cref="T:UnitsNet.IQuantity"/>.</typeparam>
            <typeparam name="TQuantityTo">To quantity type, must implement <see cref="T:UnitsNet.IQuantity"/>.</typeparam>
            <param name="from">From unit enum value, such as <see cref="F:UnitsNet.Units.LengthUnit.Kilometer" />.</param>
            <param name="to">To unit enum value, such as <see cref="F:UnitsNet.Units.LengthUnit.Centimeter"/>.</param>
            <param name="conversionFunction">The quantity conversion function.</param>
            <returns>true if set; otherwise, false.</returns>
        </member>
        <member name="M:UnitsNet.UnitConverter.TryGetConversionFunction(System.Type,System.Enum,System.Type,System.Enum,UnitsNet.ConversionFunction@)">
            <summary>
            Try to get the conversion function for two units of the same quantity type.
            </summary>
            <param name="fromType">From quantity type, must implement <see cref="T:UnitsNet.IQuantity"/>.</param>
            <param name="from">From unit enum value, such as <see cref="F:UnitsNet.Units.LengthUnit.Kilometer" />.</param>
            <param name="toType">To quantity type, must implement <see cref="T:UnitsNet.IQuantity"/>.</param>
            <param name="to">To unit enum value, such as <see cref="F:UnitsNet.Units.LengthUnit.Centimeter"/>.</param>
            <param name="conversionFunction">The quantity conversion function.</param>
            <returns>true if set; otherwise, false.</returns>
        </member>
        <member name="M:UnitsNet.UnitConverter.TryGetConversionFunction(System.ValueTuple{System.Type,System.Enum,System.Type,System.Enum},UnitsNet.ConversionFunction@)">
             <summary>
            
             </summary>
             <param name="lookupKey"></param>
             <param name="conversionFunction"></param>
             <returns>true if set; otherwise, false.</returns>
        </member>
        <member name="M:UnitsNet.UnitConverter.Convert(UnitsNet.QuantityValue,System.Enum,System.Enum)">
            <summary>
                Convert between any two quantity units given a numeric value and two unit enum values.
            </summary>
            <param name="fromValue">Numeric value.</param>
            <param name="fromUnitValue">From unit enum value.</param>
            <param name="toUnitValue">To unit enum value, must be compatible with <paramref name="fromUnitValue" />.</param>
            <returns>The converted value in the new unit representation.</returns>
        </member>
        <member name="M:UnitsNet.UnitConverter.TryConvert(UnitsNet.QuantityValue,System.Enum,System.Enum,System.Double@)">
            <summary>
                Try to convert between any two quantity units given a numeric value and two unit enum values.
            </summary>
            <param name="fromValue">Numeric value.</param>
            <param name="fromUnitValue">From unit enum value.</param>
            <param name="toUnitValue">To unit enum value, must be compatible with <paramref name="fromUnitValue" />.</param>
            <param name="convertedValue">The converted value, if successful. Otherwise default.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:UnitsNet.UnitConverter.ConvertByName(UnitsNet.QuantityValue,System.String,System.String,System.String)">
            <summary>
                Convert between any two quantity units by their names, such as converting a "Length" of N "Meter" to "Centimeter".
                This is particularly useful for creating things like a generated unit conversion UI,
                where you list some selectors:
                a) Quantity: Length, Mass, Force etc.
                b) From unit: Meter, Centimeter etc if Length is selected
                c) To unit: Meter, Centimeter etc if Length is selected
            </summary>
            <param name="fromValue">
                Input value, which together with <paramref name="fromUnit" /> represents the quantity to
                convert from.
            </param>
            <param name="quantityName">
                The name of the quantity, such as "Length" or "Mass". See <see cref="P:UnitsNet.Quantity.Infos" /> for all
                types generated by UnitsNet and use <see cref="P:UnitsNet.UnitInfo.Name"/>.
            </param>
            <param name="fromUnit">
                Name of unit, such as "Meter" or "Centimeter" if "Length" was passed as
                <paramref name="quantityName" />.
            </param>
            <param name="toUnit">
                Name of unit, such as "Meter" or "Centimeter" if "Length" was passed as
                <paramref name="quantityName" />.
            </param>
            <example>double centimeters = ConvertByName(5, "Length", "Meter", "Centimeter"); // 500</example>
            <returns>Output value as the result of converting to <paramref name="toUnit" />.</returns>
            <exception cref="T:UnitsNet.UnitNotFoundException">No units match the abbreviation.</exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">More than one unit matches the abbreviation.</exception>
        </member>
        <member name="M:UnitsNet.UnitConverter.TryConvertByName(UnitsNet.QuantityValue,System.String,System.String,System.String,System.Double@)">
            <summary>
                Convert between any two quantity units by their names, such as converting a "Length" of N "Meter" to "Centimeter".
                This is particularly useful for creating things like a generated unit conversion UI,
                where you list some selectors:
                a) Quantity: Length, Mass, Force etc.
                b) From unit: Meter, Centimeter etc if Length is selected
                c) To unit: Meter, Centimeter etc if Length is selected
            </summary>
            <param name="inputValue">
                Input value, which together with <paramref name="fromUnit" /> represents the quantity to
                convert from.
            </param>
            <param name="quantityName">
                The name of the quantity, such as "Length" or "Mass". See <see cref="P:UnitsNet.Quantity.Infos" /> for all
                types generated by UnitsNet and use <see cref="P:UnitsNet.UnitInfo.Name"/>.
            </param>
            <param name="fromUnit">
                Name of unit, such as "Meter" or "Centimeter" if "Length" was passed as
                <paramref name="quantityName" />.
            </param>
            <param name="toUnit">
                Name of unit, such as "Meter" or "Centimeter" if "Length" was passed as
                <paramref name="quantityName" />.
            </param>
            <param name="result">Result if conversion was successful, 0 if not.</param>
            <example>bool ok = TryConvertByName(5, "Length", "Meter", "Centimeter", out double centimeters); // 500</example>
            <returns>True if conversion was successful.</returns>
        </member>
        <member name="M:UnitsNet.UnitConverter.ConvertByAbbreviation(UnitsNet.QuantityValue,System.String,System.String,System.String)">
            <summary>
                Convert between any two quantity units by their abbreviations, such as converting a "Length" of N "m" to "cm".
                This is particularly useful for creating things like a generated unit conversion UI,
                where you list some selectors:
                a) Quantity: Length, Mass, Force etc.
                b) From unit: Meter, Centimeter etc if Length is selected
                c) To unit: Meter, Centimeter etc if Length is selected
            </summary>
            <param name="fromValue">
                Input value, which together with <paramref name="fromUnitAbbrev" /> represents the quantity to
                convert from.
            </param>
            <param name="quantityName">
                Name of quantity, such as "Length" and "Mass". <see cref="T:UnitsNet.QuantityInfo" /> for all
                values.
            </param>
            <param name="fromUnitAbbrev">
                Name of unit, such as "Meter" or "Centimeter" if "Length" was passed as
                <paramref name="quantityName" />.
            </param>
            <param name="toUnitAbbrev">
                Name of unit, such as "Meter" or "Centimeter" if "Length" was passed as
                <paramref name="quantityName" />.
            </param>
            <example>double centimeters = ConvertByName(5, "Length", "m", "cm"); // 500</example>
            <returns>Output value as the result of converting to <paramref name="toUnitAbbrev" />.</returns>
        </member>
        <member name="M:UnitsNet.UnitConverter.ConvertByAbbreviation(UnitsNet.QuantityValue,System.String,System.String,System.String,System.String)">
            <summary>
                Convert between any two quantity units by their abbreviations, such as converting a "Length" of N "m" to "cm".
                This is particularly useful for creating things like a generated unit conversion UI,
                where you list some selectors:
                a) Quantity: Length, Mass, Force etc.
                b) From unit: Meter, Centimeter etc if Length is selected
                c) To unit: Meter, Centimeter etc if Length is selected
            </summary>
            <param name="fromValue">
                Input value, which together with <paramref name="fromUnitAbbrev" /> represents the quantity to
                convert from.
            </param>
            <param name="quantityName">
                The name of the quantity, such as "Length" or "Mass". See <see cref="P:UnitsNet.Quantity.Infos" /> for all
                types generated by UnitsNet and use <see cref="P:UnitsNet.UnitInfo.Name"/>.
            </param>
            <param name="fromUnitAbbrev">
                Name of unit, such as "Meter" or "Centimeter" if "Length" was passed as
                <paramref name="quantityName" />.
            </param>
            <param name="toUnitAbbrev">
                Name of unit, such as "Meter" or "Centimeter" if "Length" was passed as
                <paramref name="quantityName" />.
            </param>
            <param name="culture">Culture to parse abbreviations with.</param>
            <example>double centimeters = ConvertByName(5, "Length", "m", "cm"); // 500</example>
            <returns>Output value as the result of converting to <paramref name="toUnitAbbrev" />.</returns>
            <exception cref="T:UnitsNet.UnitNotFoundException">
                No unit types match the prefix of <paramref name="quantityName" /> or no units
                are mapped to the abbreviation.
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">More than one unit matches the abbreviation.</exception>
        </member>
        <member name="M:UnitsNet.UnitConverter.TryConvertByAbbreviation(UnitsNet.QuantityValue,System.String,System.String,System.String,System.Double@)">
            <summary>
                Convert between any two quantity units by their abbreviations, such as converting a "Length" of N "m" to "cm".
                This is particularly useful for creating things like a generated unit conversion UI,
                where you list some selectors:
                a) Quantity: Length, Mass, Force etc.
                b) From unit: Meter, Centimeter etc if Length is selected
                c) To unit: Meter, Centimeter etc if Length is selected
            </summary>
            <param name="fromValue">
                Input value, which together with <paramref name="fromUnitAbbrev" /> represents the quantity to
                convert from.
            </param>
            <param name="quantityName">
                The name of the quantity, such as "Length" or "Mass". See <see cref="P:UnitsNet.Quantity.Infos" /> for all
                types generated by UnitsNet and use <see cref="P:UnitsNet.UnitInfo.Name"/>.
            </param>
            <param name="fromUnitAbbrev">
                Name of unit, such as "Meter" or "Centimeter" if "Length" was passed as
                <paramref name="quantityName" />.
            </param>
            <param name="toUnitAbbrev">
                Name of unit, such as "Meter" or "Centimeter" if "Length" was passed as
                <paramref name="quantityName" />.
            </param>
            <param name="result">Result if conversion was successful, 0 if not.</param>
            <example>double centimeters = ConvertByName(5, "Length", "m", "cm"); // 500</example>
            <returns>True if conversion was successful.</returns>
        </member>
        <member name="M:UnitsNet.UnitConverter.TryConvertByAbbreviation(UnitsNet.QuantityValue,System.String,System.String,System.String,System.Double@,System.String)">
            <summary>
                Convert between any two quantity units by their abbreviations, such as converting a "Length" of N "m" to "cm".
                This is particularly useful for creating things like a generated unit conversion UI,
                where you list some selectors:
                a) Quantity: Length, Mass, Force etc.
                b) From unit: Meter, Centimeter etc if Length is selected
                c) To unit: Meter, Centimeter etc if Length is selected
            </summary>
            <param name="fromValue">
                Input value, which together with <paramref name="fromUnitAbbrev" /> represents the quantity to
                convert from.
            </param>
            <param name="quantityName">
                The name of the quantity, such as "Length" or "Mass". See <see cref="P:UnitsNet.Quantity.Infos" /> for all
                types generated by UnitsNet and use <see cref="P:UnitsNet.UnitInfo.Name"/>.
            </param>
            <param name="fromUnitAbbrev">
                Name of unit, such as "Meter" or "Centimeter" if "Length" was passed as
                <paramref name="quantityName" />.
            </param>
            <param name="toUnitAbbrev">
                Name of unit, such as "Meter" or "Centimeter" if "Length" was passed as
                <paramref name="quantityName" />.
            </param>
            <param name="culture">Culture to parse abbreviations with.</param>
            <param name="result">Result if conversion was successful, 0 if not.</param>
            <example>double centimeters = ConvertByName(5, "Length", "m", "cm"); // 500</example>
            <returns>True if conversion was successful.</returns>
        </member>
        <member name="M:UnitsNet.UnitConverter.TryParseUnit(System.Type,System.String,System.Enum@)">
            <summary>
                Parse a unit by the unit enum type <paramref name="unitType" /> and a unit enum value <paramref name="unitName" />>
            </summary>
            <param name="unitType">Unit type, such as <see cref="T:UnitsNet.Units.LengthUnit" />.</param>
            <param name="unitName">Unit name, such as "Meter" corresponding to <see cref="F:UnitsNet.Units.LengthUnit.Meter" />.</param>
            <param name="unitValue">The return enum value, such as <see cref="F:UnitsNet.Units.LengthUnit.Meter" /> boxed as an object.</param>
            <returns>True if succeeded, otherwise false.</returns>
            <exception cref="T:UnitsNet.UnitNotFoundException">No unit values match the <paramref name="unitName" />.</exception>
        </member>
        <member name="T:UnitsNet.UnitFormatter">
            <summary>
                Utility class for formatting units and values.
            </summary>
        </member>
        <member name="M:UnitsNet.UnitFormatter.GetFormat(System.Double,System.Int32)">
            <summary>
                Gets the default ToString format for the specified value.
            </summary>
            <param name="value">The value to format.</param>
            <param name="significantDigitsAfterRadix">
                The number of digits after the radix point to display in the formatted
                string.
            </param>
            <returns>A ToString format for the specified value.</returns>
        </member>
        <member name="M:UnitsNet.UnitFormatter.GetFormatArgs``1(``0,System.Double,System.IFormatProvider,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                Gets ToString format arguments.
            </summary>
            <typeparam name="TUnitType">The type of units to format.</typeparam>
            <param name="unit">The units</param>
            <param name="value">The unit value to format.</param>
            <param name="culture">The current culture.</param>
            <param name="args">The list of format arguments.</param>
            <returns>An array of ToString format arguments.</returns>
        </member>
        <member name="T:UnitsNet.UnitInfo">
            <summary>
                Information about the unit, such as its name and value.
                This is useful to enumerate units and present names with quantities and units
                chosen dynamically at runtime, such as unit conversion apps or allowing the user to change the
                unit representation.
            </summary>
            <remarks>
                Typically you obtain this by looking it up via <see cref="P:UnitsNet.QuantityInfo.UnitInfos" />.
            </remarks>
        </member>
        <member name="M:UnitsNet.UnitInfo.#ctor(System.Enum,System.String,UnitsNet.BaseUnits)">
            <summary>
            Creates an instance of the UnitInfo class.
            </summary>
            <param name="value">The enum value for this class, for example <see cref="F:UnitsNet.Units.LengthUnit.Meter"/>.</param>
            <param name="pluralName">The plural name of the unit, such as "Centimeters".</param>
            <param name="baseUnits">The <see cref="P:UnitsNet.UnitInfo.BaseUnits"/> for this unit.</param>
        </member>
        <member name="P:UnitsNet.UnitInfo.Value">
            <summary>
            The enum value of the unit, such as <see cref="F:UnitsNet.Units.LengthUnit.Centimeter" />.
            </summary>
        </member>
        <member name="P:UnitsNet.UnitInfo.Name">
            <summary>
            The singular name of the unit, such as "Centimeter".
            </summary>
        </member>
        <member name="P:UnitsNet.UnitInfo.PluralName">
            <summary>
            The plural name of the unit, such as "Centimeters".
            </summary>
        </member>
        <member name="P:UnitsNet.UnitInfo.BaseUnits">
            <summary>
            Gets the <see cref="P:UnitsNet.UnitInfo.BaseUnits"/> for this unit.
            </summary>
        </member>
        <member name="T:UnitsNet.UnitInfo`1">
            <inheritdoc cref="T:UnitsNet.UnitInfo" />
            <remarks>
                This is a specialization of <see cref="T:UnitsNet.UnitInfo" />, for when the unit type is known.
                Typically you obtain this by looking it up statically from <see cref="P:UnitsNet.QuantityInfo`1.UnitInfos" /> or
                or dynamically via <see cref="P:UnitsNet.IQuantity`1.QuantityInfo" />.
            </remarks>
            <typeparam name="TUnit">The unit enum type, such as <see cref="T:UnitsNet.Units.LengthUnit" />. </typeparam>
        </member>
        <member name="M:UnitsNet.UnitInfo`1.#ctor(`0,System.String,UnitsNet.BaseUnits)">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.UnitInfo`1.Value">
            <inheritdoc cref="P:UnitsNet.UnitInfo.Value"/>
        </member>
        <member name="T:UnitsNet.UnitMath">
            <summary>
                A set of extension methods for some of the most common Math operations, such as Min, Max, Sum and Average
            </summary>
        </member>
        <member name="M:UnitsNet.UnitMath.Abs``1(``0)">
            <summary>Returns the absolute value of a <typeparamref name="TQuantity" />.</summary>
            <param name="value">
                A quantity with a value that is greater than or equal to <see cref="F:System.Double.MinValue" />,
                but less than or equal to <see cref="F:System.Double.MaxValue" />.
            </param>
            <returns>A quantity with a value, such that 0 ≤ value ≤ <see cref="F:System.Double.MaxValue" />.</returns>
        </member>
        <member name="M:UnitsNet.UnitMath.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Enum)">
            <summary>Computes the sum of a sequence of <typeparamref name="TQuantity" /> values.</summary>
            <param name="source">A sequence of <typeparamref name="TQuantity" /> values to calculate the sum of.</param>
            <param name="unitType">The desired unit type for the resulting quantity</param>
            <returns>The sum of the values in the sequence, represented in the specified unit type.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source">source</paramref> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="source">source</paramref> contains quantity types different from <paramref name="unitType" />.
            </exception>
        </member>
        <member name="M:UnitsNet.UnitMath.Sum``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Enum)">
            <summary>
                Computes the sum of the sequence of <typeparamref name="TQuantity" /> values that are obtained by invoking a
                transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="unitType">The desired unit type for the resulting quantity</param>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TQuantity">The type of quantity that is produced by this operation</typeparam>
            <returns>The sum of the projected values, represented in the specified unit type.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source">source</paramref> or <paramref name="selector">selector</paramref> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="source">source</paramref> contains quantity types different from <paramref name="unitType" />.
            </exception>
        </member>
        <member name="M:UnitsNet.UnitMath.Min``1(``0,``0)">
            <summary>Returns the smaller of two <typeparamref name="TQuantity" /> values.</summary>
            <typeparam name="TQuantity">The type of quantities to compare.</typeparam>
            <param name="val1">The first of two <typeparamref name="TQuantity" /> values to compare.</param>
            <param name="val2">The second of two <typeparamref name="TQuantity" /> values to compare.</param>
            <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</returns>
        </member>
        <member name="M:UnitsNet.UnitMath.Min``1(System.Collections.Generic.IEnumerable{``0},System.Enum)">
            <summary>Computes the min of a sequence of <typeparamref name="TQuantity" /> values.</summary>
            <param name="source">A sequence of <typeparamref name="TQuantity" /> values to calculate the min of.</param>
            <param name="unitType">The desired unit type for the resulting quantity</param>
            <returns>The min of the values in the sequence, represented in the specified unit type.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source">source</paramref> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source">source</paramref> contains no elements.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="source">source</paramref> contains quantity types different from <paramref name="unitType" />.
            </exception>
        </member>
        <member name="M:UnitsNet.UnitMath.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Enum)">
            <summary>
                Computes the min of the sequence of <typeparamref name="TQuantity" /> values that are obtained by invoking a
                transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of values that are used to calculate a min.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="unitType">The desired unit type for the resulting quantity</param>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TQuantity">The type of quantity that is produced by this operation</typeparam>
            <returns>The min of the projected values, represented in the specified unit type.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source">source</paramref> or <paramref name="selector">selector</paramref> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source">source</paramref> contains no elements.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="source">source</paramref> contains quantity types different from <paramref name="unitType" />.
            </exception>
        </member>
        <member name="M:UnitsNet.UnitMath.Max``1(``0,``0)">
            <summary>Returns the larger of two <typeparamref name="TQuantity" /> values.</summary>
            <typeparam name="TQuantity">The type of quantities to compare.</typeparam>
            <param name="val1">The first of two <typeparamref name="TQuantity" /> values to compare.</param>
            <param name="val2">The second of two <typeparamref name="TQuantity" /> values to compare.</param>
            <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</returns>
        </member>
        <member name="M:UnitsNet.UnitMath.Max``1(System.Collections.Generic.IEnumerable{``0},System.Enum)">
            <summary>Computes the max of a sequence of <typeparamref name="TQuantity" /> values.</summary>
            <param name="source">A sequence of <typeparamref name="TQuantity" /> values to calculate the max of.</param>
            <param name="unitType">The desired unit type for the resulting quantity</param>
            <returns>The max of the values in the sequence, represented in the specified unit type.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source">source</paramref> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source">source</paramref> contains no elements.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="source">source</paramref> contains quantity types different from <paramref name="unitType" />.
            </exception>
        </member>
        <member name="M:UnitsNet.UnitMath.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Enum)">
            <summary>
                Computes the max of the sequence of <typeparamref name="TQuantity" /> values that are obtained by invoking a
                transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of values that are used to calculate a max.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="unitType">The desired unit type for the resulting quantity</param>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TQuantity">The type of quantity that is produced by this operation</typeparam>
            <returns>The max of the projected values, represented in the specified unit type.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source">source</paramref> or <paramref name="selector">selector</paramref> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source">source</paramref> contains no elements.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="source">source</paramref> contains quantity types different from <paramref name="unitType" />.
            </exception>
        </member>
        <member name="M:UnitsNet.UnitMath.Average``1(System.Collections.Generic.IEnumerable{``0},System.Enum)">
            <summary>Computes the average of a sequence of <typeparamref name="TQuantity" /> values.</summary>
            <param name="source">A sequence of <typeparamref name="TQuantity" /> values to calculate the average of.</param>
            <param name="unitType">The desired unit type for the resulting quantity</param>
            <returns>The average of the values in the sequence, represented in the specified unit type.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source">source</paramref> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source">source</paramref> contains no elements.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="source">source</paramref> contains quantity types different from <paramref name="unitType" />.
            </exception>
        </member>
        <member name="M:UnitsNet.UnitMath.Average``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Enum)">
            <summary>
                Computes the average of the sequence of <typeparamref name="TQuantity" /> values that are obtained by invoking
                a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of values that are used to calculate an average.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="unitType">The desired unit type for the resulting quantity</param>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TQuantity">The type of quantity that is produced by this operation</typeparam>
            <returns>The average of the projected values, represented in the specified unit type.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source">source</paramref> or <paramref name="selector">selector</paramref> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source">source</paramref> contains no elements.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="source">source</paramref> contains quantity types different from <paramref name="unitType" />.
            </exception>
        </member>
        <member name="T:UnitsNet.UnitNotFoundException">
            <summary>
                Unit was not found. This is typically thrown for dynamic conversions,
                such as <see cref="M:UnitsNet.UnitConverter.ConvertByName(UnitsNet.QuantityValue,System.String,System.String,System.String)" />.
            </summary>
        </member>
        <member name="M:UnitsNet.UnitNotFoundException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.UnitNotFoundException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.UnitNotFoundException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:UnitsNet.UnitsNetException">
            <summary>
                The base type for UnitsNet exceptions.
            </summary>
        </member>
        <member name="M:UnitsNet.UnitsNetException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.UnitsNetException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.UnitsNetException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:UnitsNet.UnitSystem">
            <summary>
                A unit system defined by a combination of base units.
                This is typically used to define the "working units" for consistently creating and presenting quantities in the selected base units,
                such as <see cref="P:UnitsNet.UnitSystem.SI"/> to use SI base units such as meters, kilograms and seconds.
            </summary>
        </member>
        <member name="M:UnitsNet.UnitSystem.#ctor(UnitsNet.BaseUnits)">
            <summary>
            Creates an instance of a unit system with the specified base units.
            </summary>
            <param name="baseUnits">The base units for the unit system.</param>
        </member>
        <member name="M:UnitsNet.UnitSystem.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.UnitSystem.Equals(UnitsNet.UnitSystem)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.UnitSystem.op_Equality(UnitsNet.UnitSystem,UnitsNet.UnitSystem)">
            <summary>
            Checks if this instance is equal to another.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>True if equal, otherwise false.</returns>
            <seealso cref="M:UnitsNet.UnitSystem.Equals(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.UnitSystem.op_Inequality(UnitsNet.UnitSystem,UnitsNet.UnitSystem)">
            <summary>
            Checks if this instance is equal to another.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>True if equal, otherwise false.</returns>
            <seealso cref="M:UnitsNet.UnitSystem.Equals(UnitsNet.UnitSystem)"/>
        </member>
        <member name="M:UnitsNet.UnitSystem.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.UnitSystem.BaseUnits">
            <summary>
                The base units of this unit system.
            </summary>
        </member>
        <member name="P:UnitsNet.UnitSystem.SI">
            <summary>
            Gets the SI unit system.
            </summary>
        </member>
    </members>
</doc>
